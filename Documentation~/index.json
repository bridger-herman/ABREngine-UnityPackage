{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Overview | ABREngine",
    "keywords": "API Overview Here are the most important classes start out making visualizations with C# and ABR. Check out the Creating a C# ABR visualization tutorial for more examples. ABREngine Class Importance ABREngine This is the main ABR Engine class. ABREngine is a singleton, meaning that you will most often access an instance of this class with ABREngine.Instance . ABRConfig Main configuration class for ABR. Create an ABRConfig using Assets > Create > ABR > ABR Configuration and modify as necessary. ABRStateParser Main class for serializing and deserializing ABR states Data Data Loading Class Importance DataManager Main \"manager\" object where data are stored. Single instance of this class is ABREngine.Instance.Data . KeyData High-level representation of geometric data. See Key Data . RawDataset Low-level representation of geometric data. See Basic Terminology RawDatasetAdapter Factory used to create ABR-compatible raw datasets from existing data you have (e.g., creating a surface out of a bunch of @UnityEngine.Vector3 s) MediaDataLoader Load data from the media folder ResourcesDataLoader Load data from any Unity Resources folder - useful for bundling data with a project. HttpDataLoader Load data from a network (http) source (must be set up with ABR data server) Data Variables and Ranges Class Importance ScalarDataVariable Scalar variables (single value at each point in the dataset) VectorDataVariable Vector variables (3 values at each point in the dataset) @IVLab.ABREngine.DataRange Representation of a data range (min/max, only meaningful for scalar variables VisAssets Class Importance VisAssetManager Main \"manager\" object where VisAssets are stored. Single instance of this class is ABREngine.Instance.VisAssets . VisAssetLoader Responsible for loading visassets, deciding which VisAsset fetcher to use, and error handling VisAsset Every VisAsset is one of these ColormapVisAsset Imported from a colormap.xml and have a GetGradient() method to get a @UnityEngine.Texture2D LineTextureVisAsset Imported from a horizontal.png texture, have a GetTexture() method to get a @UnityEngine.Texture2D SurfaceTextureVisAsset Imported from a texture.png texture, have a GetTexture() method to get a @UnityEngine.Texture2D GlyphVisAsset LOD-Separated, imported from a LOD1.obj and normal-mapped with a LOD1.png . VisAssetGradient Gradients of multiple VisAssets (applies to every VisAsset type except Colormaps) Data Impressions Class Importance DataImpression Main class that all data impressions inherit from SimpleSurfaceDataImpression Data impression for surfaces. Takes key data type \"Surface\" SimpleLineDataImpression Data impression for ribbon-formed lines. Takes key data type \"Lines\" SimpleGlyphDataImpression Data impression for glyphs. Takes key data type \"Points\" SimpleVolumeDataImpression Data impression for volume data. Takes key data type \"Volume\" (a structured grid) InstancedSurfaceDataImpression Data impression for a series of instanced surfaces (same geometry repeated over many different transforms)"
  },
  "api/IVLab.ABREngine.ABRConfig.Consts.html": {
    "href": "api/IVLab.ABREngine.ABRConfig.Consts.html",
    "title": "Class ABRConfig.Consts | ABREngine",
    "keywords": "Class ABRConfig.Consts Global access to constants in the ABR Engine Inheritance Object ABRConfig.Consts Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public static class Consts Fields | Improve this Doc View Source DatasetFolder Dataset folder within media folder Declaration public const string DatasetFolder = \"datasets\" Field Value Type Description String | Improve this Doc View Source MediaFolder Default name for the media folder Declaration public const string MediaFolder = \"media\" Field Value Type Description String | Improve this Doc View Source VisAssetFolder VisAsset folder within media folder Declaration public const string VisAssetFolder = \"visassets\" Field Value Type Description String | Improve this Doc View Source VisAssetJson Name of VisAsset JSON specifier Declaration public const string VisAssetJson = \"artifact.json\" Field Value Type Description String"
  },
  "api/IVLab.ABREngine.ABRConfig.html": {
    "href": "api/IVLab.ABREngine.ABRConfig.html",
    "title": "Class ABRConfig | ABREngine",
    "keywords": "Class ABRConfig This Scriptable Object controls the ABR configuration before startup. On engine startup, a copy is instantiated for use at runtime. Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject ABRConfig Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [CreateAssetMenu(fileName = \"ABRConfig\", menuName = \"ABR/ABR Configuration\")] public class ABRConfig : ScriptableObject Fields | Improve this Doc View Source dataContainer Default bounds for datasets when showing (in Unity world coordinates) Declaration [Tooltip(\"Unity world-space container to 'squish' all data into to avoid overflowing Unity coordinates\")] public Bounds dataContainer Field Value Type Description UnityEngine.Bounds | Improve this Doc View Source dataListenerPort Port to listen for data on, if any. Useful if, for instance, you want to have a live connection to ParaView that pushes data into ABR. Default: null Declaration [Tooltip(\"Port to listen for data connections (e.g. from ParaView on). A port `0` is assumed to mean no connection.\")] public int dataListenerPort Field Value Type Description Int32 | Improve this Doc View Source dataServerUrl What server to obtain data from, if any. If none provided, ABR will assume that everything is in Unity's persistentData path. If server is provided and resource doesn't exist in persistentData, it will be downloaded. Default: null Declaration [Tooltip(\"Server to load VisAssets from (e.g. `http://192.168.137.1:8001/api`\")] public string dataServerUrl Field Value Type Description String | Improve this Doc View Source defaultColor Declaration [Tooltip(\"Default color for geometries that have not had a colormap applied yet\")] public Color defaultColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source defaultGlyph Declaration [Header(\"Styling Defaults\")] [Tooltip(\"Default shape/color for glyphs in the Glyph layer\")] public GameObject defaultGlyph Field Value Type Description UnityEngine.GameObject | Improve this Doc View Source defaultNanColor Declaration [Tooltip(\"Default color for NaN values\")] public Color defaultNanColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source defaultNanLine Declaration [Tooltip(\"Default line texture for NaN values on ribbons\")] public Texture2D defaultNanLine Field Value Type Description UnityEngine.Texture2D | Improve this Doc View Source defaultNanTexture Declaration [Tooltip(\"Default texture for NaN values on surfaces\")] public Texture2D defaultNanTexture Field Value Type Description UnityEngine.Texture2D | Improve this Doc View Source loadStateOnStart Load a state from resources on ABREngine startup Declaration [Tooltip(\"Load a state from Resources or StreamingAssets folder on ABREngine startup. Example: `testState.json` Leave blank for no startup state.\")] public string loadStateOnStart Field Value Type Description String | Improve this Doc View Source mediaPath Declaration [Header(\"Common Configuration Options (hover for more info)\")] [Tooltip(\"Location on this computer where VisAssets and Datasets are located. Relative paths (e.g. `../media`) are also acceptable.\")] public string mediaPath Field Value Type Description String | Improve this Doc View Source serverUrl What server to connect to, if any. If provided, ABR will try to register with the server immediately upon startup. Default: null Declaration [Tooltip(\"Full URL of the ABR server / visualization manager that this app should connect to. Leave blank for no server.\")] public string serverUrl Field Value Type Description String | Improve this Doc View Source visAssetServerUrl Declaration [Header(\"Network-Based VisAssets and Data Configuration\")] [Tooltip(\"Server to load VisAssets from (e.g. `http://192.168.137.1:8000/media/visassets`\")] public string visAssetServerUrl Field Value Type Description String Properties | Improve this Doc View Source Schema The Json Schema to use for validation of ABR states Declaration public JSchema Schema { get; } Property Value Type Description Newtonsoft.Json.Schema.JSchema | Improve this Doc View Source SchemaJson Schema to use for internally grabbing default values Declaration public JObject SchemaJson { get; } Property Value Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source ServerUrl Actual URI-ified URL of the server that ABR should connect to Declaration public Uri ServerUrl { get; } Property Value Type Description Uri Methods | Improve this Doc View Source GetInputNames(String) Obtain a full list of all inputs available to this plate Declaration public string[] GetInputNames(string plateName) Parameters Type Name Description String plateName Returns Type Description String [] | Improve this Doc View Source GetInputValueDefault<T>(String, String) Get the default primitive value for a particular data impression's parameter Declaration public T GetInputValueDefault<T>(string plateName, string inputName) where T : IPrimitive Parameters Type Name Description String plateName String inputName Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides UnityEngine.Object.ToString()"
  },
  "api/IVLab.ABREngine.ABREngine.html": {
    "href": "api/IVLab.ABREngine.ABREngine.html",
    "title": "Class ABREngine | ABREngine",
    "keywords": "Class ABREngine The ABREngine class is the main operational MonoBehaviour Singleton for the ABREngine-UnityPackage. It is in charge of kicking off all startup processes for ABR, including setting up connections with the server, the data listener, VisAssets and Data managers, etc. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour IVLab.Utilities.Singleton < ABREngine > ABREngine Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ABREngine : Singleton<ABREngine> Examples Most methods of the ABREngine can be accessed through its singleton Instance without needing to do a GetComponent : string mediaPath = ABREngine.Instance.MediaPath; This example shows how to quickly get up and running with a custom-defined dataset and building your own data impressions. The general process for making a visualization programmatically with ABR is: Define your data in some List s. Use the RawDatasetAdapter to convert the List into an ABR RawDataset , or import an existing ABR RawDataset using LoadRawDataset<T>(String) . Import that RawDataset into ABR using ImportRawDataset(RawDataset) (optionally, giving the dataset a data path identifier for easier semantic access later). Optionally, import any VisAsset s you want to use using GetVisAsset<T>(Guid) . Create a DataImpression to combine the data and visuals together. Use RegisterDataImpression(IDataImpression, DataImpressionGroup, Boolean) to add the impression to the engine. Render the data and visuals to the screen using Render() . using System; using System.Threading.Tasks; using UnityEngine; using IVLab.ABREngine; using IVLab.Utilities; public class SimpleABRExample : MonoBehaviour { void Start() { // STEP 1: Define data // 9 points in 3D space List<Vector3> vertices = new List<Vector3> { new Vector3(0.0f, 0.5f, 0.0f), new Vector3(0.0f, 0.6f, 0.1f), new Vector3(0.0f, 0.4f, 0.2f), new Vector3(0.1f, 0.3f, 0.0f), new Vector3(0.1f, 0.2f, 0.1f), new Vector3(0.1f, 0.3f, 0.2f), new Vector3(0.2f, 0.0f, 0.0f), new Vector3(0.2f, 0.3f, 0.1f), new Vector3(0.2f, 0.1f, 0.2f), }; // Data values for those points List<float> data = new List<float>(); for (int i = 0; i < vertices.Count; i++) data.Add(i); // Named scalar variable Dictionary<string, List<float>> scalarVars = new Dictionary<string, List<float>> {{ \"someData\", data }}; // Define some generous bounds Bounds b = new Bounds(Vector3.zero, Vector3.one); // STEP 2: Convert the point list into ABR Format RawDataset abrPoints = RawDatasetAdapter.PointsToPoints(vertices, b, scalarVars, null); // STEP 3: Import the point data into ABR so we can use it KeyData pointsKD = ABREngine.Instance.Data.ImportRawDataset(abrPoints); // STEP 4: Import a colormap visasset ColormapVisAsset cmap = ABREngine.Instance.VisAssets.LoadVisAsset<ColormapVisAsset>(new System.Guid(\"66b3cde4-034d-11eb-a7e6-005056bae6d8\")); // STEP 5: Create a Data Impression (layer) for the points, and assign some key data and styling SimpleGlyphDataImpression di = new SimpleGlyphDataImpression(); di.keyData = pointsInfo; // Assign key data (point geometry) di.colorVariable = pointsInfo.GetScalarVariables()[0]; // Assign scalar variable \"someData\" di.colormap = cmap; // Apply colormap di.glyphSize = 0.002f; // Apply glyph size styling // STEP 6: Register impression with the engine ABREngine.Instance.RegisterDataImpression(di); // STEP 7: Render the visualization ABREngine.Instance.Render(); } } You may also wish to create a data impression but place in a different position than the original one (e.g., to create a side-by-side visualization). This example shows how to use the CreateDataImpressionGroup(String, Vector3) and the DuplicateDataImpression(IDataImpression) method to create a side-by-side visualization. public class ABREngineExample { void Start() { // Let's say we've imported some fancy point data that we want to compare KeyData fancyData1 = // ... some import KeyData fancyData2 = // ... some import // We can construct a data impression for the first data. Maybe we've // applied a bunch of styling to this that we want to copy... SimpleGlyphDataImpression di = new SimpleGlyphDataImpression(); di.keyData = fancyData1; di.colorVariable = fancyData1.GetScalarVariables()[0]; di.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; di.glyphSize = 0.002f; // Register the first impression ABREngine.Instance.RegisterDataImpression(di); // Then, duplicate the data impression: SimpleGlyphDataImpression other = ABREngine.Instance.DuplicateDataImpression(di) as SimpleGlyphDataImpression; // Change the data and a little styling other.keyData = fancyData2; other.glyphSize = 0.5f; // Create a new impression group centered just to the right of the first one DataImpressionGroup newGroup = ABREngine.Instance.CreateDataImpressionGroup(\"OffsetGroup\", new Vector3(0.5f, 0.0f, 0.0f)); // And, register the impression with the new group ABREngine.Instance.RegisterDataImpression(other, newGroup); } } Fields | Improve this Doc View Source configPrototype Declaration [SerializeField] public ABRConfig configPrototype Field Value Type Description ABRConfig | Improve this Doc View Source OnStateChanged Delegate that is called whenever ABRState is updated. Declaration public ABREngine.StateChangeDelegate OnStateChanged Field Value Type Description ABREngine.StateChangeDelegate Examples Developers may need to use this if they want to know when the state has been updated: using UnityEngine; using IVLab.ABREngine; public class ABRStateExample : MonoBehaviour { void Start() { ABREngine.Instance.OnStateChanged += ExampleOnStateChanged; } void ExampleOnStateChanged(JObject state) { Debug.Log(state[\"version\"]); } } Properties | Improve this Doc View Source ABRTransform Cached, readonly version of the ABREngine transform so it can be accessed in a non-main thread Declaration public Transform ABRTransform { get; } Property Value Type Description UnityEngine.Transform | Improve this Doc View Source Config Provides access to all of the ABRConfig options that were loaded in at startup Declaration public ABRConfig Config { get; } Property Value Type Description ABRConfig | Improve this Doc View Source Data System-wide manager for Data (the geometry and variables that make up the visualization) Declaration public DataManager Data { get; } Property Value Type Description DataManager | Improve this Doc View Source DataListener A listener for data connections (e.g., Send2ABR from ParaView) Declaration public SocketDataListener DataListener { get; } Property Value Type Description SocketDataListener | Improve this Doc View Source IsInitialized True if the ABREngine is set up and completely ready to begin rendering. Only returns true once all setup has finished, including: Loading the ABRConfig Connecting to the server (if applicable) Loading any initial state specified by the programmer, or the remote state from the server Declaration public bool IsInitialized { get; } Property Value Type Description Boolean | Improve this Doc View Source MediaPath Media path where all datasets and visassets are located. If the media path is provided in the ABRConfig, use that media path. Otherwise, use Unity's Application.persistentDataPath . Declaration public string MediaPath { get; } Property Value Type Description String | Improve this Doc View Source State JSON representation of the state that has been previously loaded into ABR Declaration public JObject State { get; } Property Value Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source VisAssets System-wide manager for VisAssets (visual elements used in the visualization) Declaration public VisAssetManager VisAssets { get; } Property Value Type Description VisAssetManager Methods | Improve this Doc View Source Awake() Declaration protected override void Awake() Overrides IVLab.Utilities.Singleton<IVLab.ABREngine.ABREngine>.Awake() | Improve this Doc View Source ClearState() Remove all data impression groups from the ABR scene (and in turn, remove all data impressions). Declaration public void ClearState() Remarks This method does remove all data impressions, but it does not clean up other state values like custom colormaps, lighting, and gradients. | Improve this Doc View Source CreateDataImpressionGroup(String) Add a bare data impression group into the ABR scene. The group bounds defaults to the bounds found in ABRConfig.defaultBounds , and the position/rotation default to zero. Declaration public DataImpressionGroup CreateDataImpressionGroup(string name) Parameters Type Name Description String name Name of the new data impression group that will be created Returns Type Description DataImpressionGroup The group that has been added. | Improve this Doc View Source CreateDataImpressionGroup(String, Guid) Add a new data impression group with a particular UUID. The group bounds defaults to the bounds found in ABRConfig.defaultBounds , and the position/rotation default to zero. Declaration public DataImpressionGroup CreateDataImpressionGroup(string name, Guid uuid) Parameters Type Name Description String name Name of the new data impression group that will be created Guid uuid UUID to use for the new data impression group Returns Type Description DataImpressionGroup The group that has been added. | Improve this Doc View Source CreateDataImpressionGroup(String, Guid, Bounds, Vector3, Quaternion) Add a new data impression group with a particular UUID, bounds, position, and rotation. Declaration public DataImpressionGroup CreateDataImpressionGroup(string name, Guid uuid, Bounds bounds, Vector3 position, Quaternion rotation) Parameters Type Name Description String name Name of the new data impression group that will be created Guid uuid UUID to use for the new data impression group UnityEngine.Bounds bounds Default bounds to use for this data impression group. Data will be \"squished\" inside this bounding box. UnityEngine.Vector3 position Default position (in Unity coordinates) to use for the data impression group. UnityEngine.Quaternion rotation Default rotation (in Unity angles) to use for the data impression group. Returns Type Description DataImpressionGroup The group that has been added. | Improve this Doc View Source CreateDataImpressionGroup(String, Vector3) Add a bare data impression group into the ABR scene. The group bounds defaults to the bounds found in ABRConfig.defaultBounds , and the position is defined by the user. Declaration public DataImpressionGroup CreateDataImpressionGroup(string name, Vector3 position) Parameters Type Name Description String name Name of the new data impression group that will be created UnityEngine.Vector3 position Where to place the data impression in space Returns Type Description DataImpressionGroup The group that has been added. | Improve this Doc View Source DuplicateDataImpression(IDataImpression) Create and return a duplicate copy of the given data impression. All inputs in the new data impression are identical to the one being copied. By default duplicate data impressions will be placed in their default groups (grouped by dataset). Declaration public IDataImpression DuplicateDataImpression(IDataImpression impression) Parameters Type Name Description IDataImpression impression The data impression that should be duplicated. Returns Type Description IDataImpression The new data impression. | Improve this Doc View Source DuplicateDataImpression(IDataImpression, DataImpressionGroup) Create and return a duplicate copy of the given data impression. The data impression will be placed within the specified DataImpressionGroup group . If group is null, the default group will be used (either conforming to the input dataset that the data impression has, or the default empty group) Declaration public IDataImpression DuplicateDataImpression(IDataImpression dataImpression, DataImpressionGroup group) Parameters Type Name Description IDataImpression dataImpression The data impression that should be duplicated. DataImpressionGroup group The DataImpressionGroup that the new data impression should be placed into. Returns Type Description IDataImpression The new data impression. | Improve this Doc View Source DuplicateDataImpression(IDataImpression, Boolean) Create and return a duplicate copy of the given data impression, but ensure that the copy is within the same data impression group as its source. Declaration public IDataImpression DuplicateDataImpression(IDataImpression dataImpression, bool retainGroup = true) Parameters Type Name Description IDataImpression dataImpression The data impression that should be duplicated. Boolean retainGroup Ensure the copy of the data impression will exist within the same group as the original, regardless of whether different data have been applied. Returns Type Description IDataImpression The new data impression. | Improve this Doc View Source DuplicateDataImpression(Guid) Create and return a duplicate copy of the data impression with a given UUID. All inputs in the new data impression are identical to the one being copied. By default duplicate data impressions will be placed in their default groups (grouped by dataset). Declaration public IDataImpression DuplicateDataImpression(Guid uuid) Parameters Type Name Description Guid uuid UUID of the data impression that should be duplicated. Returns Type Description IDataImpression The new data impression. | Improve this Doc View Source GetAllDataImpressions() Retrieve ALL data impressions that currently exist within the Engine, over ALL data impression groups. Declaration public List<IDataImpression> GetAllDataImpressions() Returns Type Description List < IDataImpression > All data impressions that exist in the ABREngine | Improve this Doc View Source GetDataImpression(Func<IDataImpression, Boolean>) Retreive the first data impression found with a particular function crieteria (similar to a \"filter\" or Linq-esque \"where\" operation). Declaration public IDataImpression GetDataImpression(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Function that takes each data impression of any type and returns a boolean. Returns Type Description IDataImpression The first data impression of any type that matches criteria, null otherwise. | Improve this Doc View Source GetDataImpression(Guid) Retreive a particular data impression from the Engine Declaration public IDataImpression GetDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Unique identifier (UUID) of the data impression to be fetched from the engine Returns Type Description IDataImpression A data impression if found, null otherwise. Remarks It is often more useful to use the GetDataImpression<T>(Func<T, Boolean>) method since it returns an actual data impression instead of a IDataImpression . | Improve this Doc View Source GetDataImpression<T>() Retreive the first data impression found with a particular type Declaration public T GetDataImpression<T>() where T : IDataImpression Returns Type Description T The first data impression of matching type T , null otherwise. Type Parameters Name Description T Any data impression type implementing IDataImpression | Improve this Doc View Source GetDataImpression<T>(Func<T, Boolean>) Retreive the first data impression found with a particular type AND function crieteria (similar to a \"filter\" or Linq-esque \"where\" operation). Declaration public T GetDataImpression<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Function that takes each data impression matching type T and returns a boolean. Returns Type Description T The first data impression of type T that matches criteria, null otherwise. Type Parameters Name Description T Any data impression type implementing IDataImpression | Improve this Doc View Source GetDataImpressionGroup(Guid) Retrieve a particular data impression group from the scene Declaration public DataImpressionGroup GetDataImpressionGroup(Guid uuid) Parameters Type Name Description Guid uuid UUID of the data impression group that should be retrieved. Returns Type Description DataImpressionGroup A data impression with a given UUID | Improve this Doc View Source GetDataImpressionGroupByDataset(Dataset) Retrieve the first data impression group found that is associated with a particular Dataset . Declaration public DataImpressionGroup GetDataImpressionGroupByDataset(Dataset ds) Parameters Type Name Description Dataset ds Dataset that should be matched with Returns Type Description DataImpressionGroup A data impression with the given dataset. | Improve this Doc View Source GetDataImpressionGroups() Retrieve all data impression groups that currently exist in the Unity ABR scene. Declaration public Dictionary<Guid, DataImpressionGroup> GetDataImpressionGroups() Returns Type Description Dictionary < Guid , DataImpressionGroup > Dictionary mapping of (uuid => DataImpressionGroup ) | Improve this Doc View Source GetDataImpressions(Func<IDataImpression, Boolean>) Retreive the all data impressions found of any type matching function crieteria (similar to a \"filter\" or Linq-esque \"where\" operation). Declaration public List<IDataImpression> GetDataImpressions(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Function that takes each data impression and returns a boolean. Returns Type Description List < IDataImpression > All data impressions of any type that matches criteria, null otherwise. | Improve this Doc View Source GetDataImpressions<T>() Retreive the all data impressions found of a particular type Declaration public List<T> GetDataImpressions<T>() where T : IDataImpression Returns Type Description List <T> All data impressions of type T . Type Parameters Name Description T Any data impression type implementing IDataImpression | Improve this Doc View Source GetDataImpressions<T>(Func<T, Boolean>) Retreive the all data impressions found of a particular type matching function crieteria (similar to a \"filter\" or Linq-esque \"where\" operation). Declaration public List<T> GetDataImpressions<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Function that takes each data impression of type T and returns a boolean. Returns Type Description List <T> All data impressions of type T that match the criteria. Type Parameters Name Description T Any data impression type implementing IDataImpression | Improve this Doc View Source GetDataImpressionsOfType<T>() Retrieve all data impressions in an ABR state of a given impression type (e.g., all SimpleSurfaceDataImpression s) Declaration [Obsolete(\"GetDataImpressionsOfType<T> is obsolete, use GetDataImpressions<T> instead\")] public List<T> GetDataImpressionsOfType<T>() where T : IDataImpression Returns Type Description List <T> A list of data impressions that have a particular type Type Parameters Name Description T | Improve this Doc View Source GetDataImpressionsWithTag(String) Retrieve all data impressions in an ABR scene that have a particular tag. Note that the ABREngine does not do anything with tags; these exist solely for application developers. Declaration public List<IDataImpression> GetDataImpressionsWithTag(string tag) Parameters Type Name Description String tag The tag to check for Returns Type Description List < IDataImpression > A list of data impressions with a particular tag | Improve this Doc View Source GetEncodedGameObject(Guid) Retrieve the encoded game object in the Unity scene associated with a particular data impression, identified by its guid. Declaration public EncodedGameObject GetEncodedGameObject(Guid impressionGuid) Parameters Type Name Description Guid impressionGuid Unique identifier (UUID) of the data impression to get the GameObject for Returns Type Description EncodedGameObject An EncodedGameObject (MonoBehaviour) of the Data Impression as it exists in the Unity Scene, or null if no such impression exists. | Improve this Doc View Source GetGroupFromImpression(IDataImpression) Get the data impression group a particular data impression Declaration public DataImpressionGroup GetGroupFromImpression(IDataImpression dataImpression) Parameters Type Name Description IDataImpression dataImpression Data impression to find out the group of Returns Type Description DataImpressionGroup The data impression group dataImpression belongs to, otherwise null. | Improve this Doc View Source HasDataImpression(Guid) Check to see if the data impression with a given uuid exists Declaration public bool HasDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Unique identifier (UUID) of the requisite data impression Returns Type Description Boolean A boolean whether or not this data impression is present in this ABR state | Improve this Doc View Source HasDataImpressionGroup(Guid) Check if a particular data impression group exists. Declaration public bool HasDataImpressionGroup(Guid uuid) Parameters Type Name Description Guid uuid UUID to check existence of Returns Type Description Boolean Boolean - true if the given group exists in the current ABR state, false otherwise. | Improve this Doc View Source LoadState<T>(String) Load a state into ABR. This includes the following steps: All Data and VisAssets from the state have been loaded. The ABR scene has been rendered with all updates (including data impressions, lighting, etc.). The OnStateChanged callback has been fired. Declaration public void LoadState<T>(string stateName) where T : IABRStateLoader, new() Parameters Type Name Description String stateName Type Parameters Name Description T Remarks Data impressions that have not changed will not be re-rendered. Examples A state may be loaded from any of the following places: // A Resources folder (in Assets or in a Package) ABREngine.Instance.LoadState<ResourceStateFileLoader>(\"exampleState.json\"); // A local file ABREngine.Instance.LoadState<PathStateFileLoader>(\"C:/Users/VRDemo/Desktop/test.json\"); // A JSON string ABREngine.Instance.LoadState<ResourceStateFileLoader>(\"{\\\"version\\\": \\\"0.2.0\\\", \\\"name\\\": \\\"test\\\"}\"); // A web resource ABREngine.Instance.LoadState<HttpStateFileLoader>(\"http://localhost:8000/api/state\"); | Improve this Doc View Source MoveImpressionToGroup(IDataImpression, DataImpressionGroup, Boolean) Move a data impression from its current group to a new group. Declaration public void MoveImpressionToGroup(IDataImpression dataImpression, DataImpressionGroup newGroup, bool allowOverwrite = true) Parameters Type Name Description IDataImpression dataImpression The data impression that should be moved. DataImpressionGroup newGroup The group to place the data impression into. Boolean allowOverwrite Should we destroy any existing data impressions with this UUID within the newGroup ? | Improve this Doc View Source RegisterDataImpression(IDataImpression, DataImpressionGroup, Boolean) Register a new data impression with the ABREngine and add it to a specific DataImpressionGroup . Declaration public void RegisterDataImpression(IDataImpression dataImpression, DataImpressionGroup newGroup, bool allowOverwrite = true) Parameters Type Name Description IDataImpression dataImpression The data impression to register with the engine DataImpressionGroup newGroup Group to add this data impression to Boolean allowOverwrite Should we destroy any existing data impressions that have this UUID already? | Improve this Doc View Source RegisterDataImpression(IDataImpression, Boolean) Register a new data impression, or replace an existing one. If the data impression has a dataset, defaults to placing it inside the existing group with the same dataset, or creating a new DataImpressionGroup with that dataset if no group exists yet. Declaration public void RegisterDataImpression(IDataImpression dataImpression, bool allowOverwrite = true) Parameters Type Name Description IDataImpression dataImpression The data impression to register with the engine Boolean allowOverwrite Should we destroy any existing data impressions that have this UUID already? | Improve this Doc View Source RemoveDataImpressionGroup(Guid) Remove a given data impression group from the scene, destroying all of the data impressions within the group. Declaration public void RemoveDataImpressionGroup(Guid uuid) Parameters Type Name Description Guid uuid UUID of the data impression group that should be removed. | Improve this Doc View Source Render() Go through every data impression group's impressions and render them. Each impression intelligently decides if the entire geometry needs to be recomputed (slow), or if only the style has changed (fast). Declaration public void Render() | Improve this Doc View Source SaveState<T>(String) Save a state from the ABR Unity scene back to a particular JSON destination. Declaration public void SaveState<T>(string overrideStateName = null) where T : IABRStateLoader, new() Parameters Type Name Description String overrideStateName Type Parameters Name Description T Remarks The SaveState functionality is only implemented in a few IABRStateLoader classes, namely PathStateFileLoader and HttpStateFileLoader . This method generally takes a long time so should not be called frequently. Also, since this method manually looks through GameObjects in the scene to reverse-engineer a JSON state, so the resulting JSON state may not always be complete. Examples ABR states can be saved like this: // Save the current state to a file on your computer ABREngine.Instance.SaveState<PathStateFileLoader>(\"C:/Users/VRDemo/Desktop/exampleState.json\"); // Save the current state to a web resource ABREngine.Instance.SaveState<HttpStateFileLoader>(\"http://localhost:8000/api/state\"); | Improve this Doc View Source UnregisterDataImpression(Guid) Remove a data impression from the ABR state. Declaration public void UnregisterDataImpression(Guid uuid) Parameters Type Name Description Guid uuid The UUID data impression to remove (unregister) from the ABREngine | Improve this Doc View Source WaitUntilInitialized() Wait until the Engine is fully initialized before proceeding to use it. Declaration public async Task WaitUntilInitialized() Returns Type Description Task Examples For example, if we want to do some ABREngine-dependant tasks in a MonoBehaviour Start(): using UnityEngine; using IVLab.ABREngine; public class ABRInitializerExample : MonoBehaviour { void Start() { // Wait for the engine to initialize... while (!ABREngine.Instance.IsInitialized); // ... then print out some very important information that // depends on ABR being initialized Debug.Log(ABREngine.Instance.Config.defaultBounds); } }"
  },
  "api/IVLab.ABREngine.ABREngine.StateChangeDelegate.html": {
    "href": "api/IVLab.ABREngine.ABREngine.StateChangeDelegate.html",
    "title": "Delegate ABREngine.StateChangeDelegate | ABREngine",
    "keywords": "Delegate ABREngine.StateChangeDelegate Delegate callback that is called whenever the ABRState is updated. This is useful for applications that build on ABR and need to know when the state has been updated. OnStateChanged for usage. Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public delegate void StateChangeDelegate(JObject state); Parameters Type Name Description Newtonsoft.Json.Linq.JObject state"
  },
  "api/IVLab.ABREngine.ABRInputAttribute.html": {
    "href": "api/IVLab.ABREngine.ABRInputAttribute.html",
    "title": "Class ABRInputAttribute | ABREngine",
    "keywords": "Class ABRInputAttribute Input attribute used for annotating an ABR input to a data impression (VisAsset, DataVariable, etc.) Inheritance Object Attribute ABRInputAttribute Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [AttributeUsage(AttributeTargets.Field)] public class ABRInputAttribute : Attribute Constructors | Improve this Doc View Source ABRInputAttribute(String, String, UpdateLevel) Declaration public ABRInputAttribute(string inputName, string parameterName, UpdateLevel updateLevel) Parameters Type Name Description String inputName String parameterName UpdateLevel updateLevel Fields | Improve this Doc View Source inputName Declaration public string inputName Field Value Type Description String | Improve this Doc View Source parameterName Declaration public string parameterName Field Value Type Description String | Improve this Doc View Source updateLevel Declaration public UpdateLevel updateLevel Field Value Type Description UpdateLevel"
  },
  "api/IVLab.ABREngine.ABRInputGenre.html": {
    "href": "api/IVLab.ABREngine.ABRInputGenre.html",
    "title": "Enum ABRInputGenre | ABREngine",
    "keywords": "Enum ABRInputGenre Possible genres of a visualization input Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public enum ABRInputGenre Fields Name Description KeyData Primitive PrimitiveGradient Variable VisAsset"
  },
  "api/IVLab.ABREngine.ABRInputIndexerModule.html": {
    "href": "api/IVLab.ABREngine.ABRInputIndexerModule.html",
    "title": "Class ABRInputIndexerModule | ABREngine",
    "keywords": "Class ABRInputIndexerModule Convenience class to avoid having to repeatedly manage reflection when adjusting ABR inputs to Data Impressions. Inheritance Object ABRInputIndexerModule Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ABRInputIndexerModule Constructors | Improve this Doc View Source ABRInputIndexerModule(DataImpression) Declaration public ABRInputIndexerModule(DataImpression target) Parameters Type Name Description DataImpression target Properties | Improve this Doc View Source ABRInputFields Declaration protected FieldInfo[] ABRInputFields { get; } Property Value Type Description FieldInfo [] | Improve this Doc View Source ABRInputIndicesByName Declaration protected Dictionary<string, int> ABRInputIndicesByName { get; } Property Value Type Description Dictionary < String , Int32 > | Improve this Doc View Source InputCount Declaration public int InputCount { get; } Property Value Type Description Int32 | Improve this Doc View Source InputNames Declaration public string[] InputNames { get; } Property Value Type Description String [] Methods | Improve this Doc View Source AssignInput(Int32, IABRInput) Declaration public void AssignInput(int inputIndex, IABRInput value) Parameters Type Name Description Int32 inputIndex IABRInput value | Improve this Doc View Source AssignInput(FieldInfo, IABRInput) Declaration protected void AssignInput(FieldInfo inputField, IABRInput value) Parameters Type Name Description FieldInfo inputField IABRInput value | Improve this Doc View Source AssignInput(String, IABRInput) Declaration public void AssignInput(string inputName, IABRInput value) Parameters Type Name Description String inputName IABRInput value | Improve this Doc View Source CanAssignInput(Int32, IABRInput) Declaration public bool CanAssignInput(int inputIndex, IABRInput value) Parameters Type Name Description Int32 inputIndex IABRInput value Returns Type Description Boolean | Improve this Doc View Source CanAssignInput(String, IABRInput) Declaration public bool CanAssignInput(string inputName, IABRInput value) Parameters Type Name Description String inputName IABRInput value Returns Type Description Boolean | Improve this Doc View Source CatalogABRInputNames(FieldInfo[]) Declaration protected static string[] CatalogABRInputNames(FieldInfo[] abrInputs) Parameters Type Name Description FieldInfo [] abrInputs Returns Type Description String [] | Improve this Doc View Source GetABRInputFields(Object) Declaration protected static FieldInfo[] GetABRInputFields(object target) Parameters Type Name Description Object target Returns Type Description FieldInfo [] | Improve this Doc View Source GetInputField(Int32) Declaration public FieldInfo GetInputField(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description FieldInfo | Improve this Doc View Source GetInputField(String) Declaration public FieldInfo GetInputField(string inputName) Parameters Type Name Description String inputName Returns Type Description FieldInfo | Improve this Doc View Source GetInputIndex(String) Declaration public int GetInputIndex(string inputName) Parameters Type Name Description String inputName Returns Type Description Int32 | Improve this Doc View Source GetInputName(Int32) Declaration public string GetInputName(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description String | Improve this Doc View Source GetInputType(Int32) Declaration public Type GetInputType(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description Type | Improve this Doc View Source GetInputType(String) Declaration public Type GetInputType(string inputName) Parameters Type Name Description String inputName Returns Type Description Type | Improve this Doc View Source GetInputValue(Int32) Declaration public IABRInput GetInputValue(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description IABRInput | Improve this Doc View Source GetInputValue(String) Declaration public IABRInput GetInputValue(string inputName) Parameters Type Name Description String inputName Returns Type Description IABRInput | Improve this Doc View Source IndexABRInputsByName(FieldInfo[]) Declaration protected static Dictionary<string, int> IndexABRInputsByName(FieldInfo[] abrInputs) Parameters Type Name Description FieldInfo [] abrInputs Returns Type Description Dictionary < String , Int32 >"
  },
  "api/IVLab.ABREngine.ABRPlateType.html": {
    "href": "api/IVLab.ABREngine.ABRPlateType.html",
    "title": "Class ABRPlateType | ABREngine",
    "keywords": "Class ABRPlateType Attribute to match up this class with the string plate name from the ABR Schema Inheritance Object Attribute ABRPlateType Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ABRPlateType : Attribute Constructors | Improve this Doc View Source ABRPlateType(String) Declaration public ABRPlateType(string plateType) Parameters Type Name Description String plateType Fields | Improve this Doc View Source plateType Declaration public string plateType Field Value Type Description String"
  },
  "api/IVLab.ABREngine.ABRStateParser.html": {
    "href": "api/IVLab.ABREngine.ABRStateParser.html",
    "title": "Class ABRStateParser | ABREngine",
    "keywords": "Class ABRStateParser The ABRStateParser takes a (text) ABR state from JSON and loads its components into Unity, or takes the current state of objects in the Unity scene and translates it back into text. Inheritance Object ABRStateParser Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ABRStateParser Methods | Improve this Doc View Source LoadState<T>(String, JObject) The LoadState method, the workhorse of this class, has side effects that range from populating new GameObjects for data impressions, to loading new data, to loading in VisAssets. By the end of LoadState , the visualization should be complete in the Unity scene. Declaration public JObject LoadState<T>(string stateText, JObject previousState) where T : IABRStateLoader, new() Parameters Type Name Description String stateText Newtonsoft.Json.Linq.JObject previousState Returns Type Description Newtonsoft.Json.Linq.JObject Type Parameters Name Description T | Improve this Doc View Source SerializeState(JObject) The SerializeState method takes the current state of the ABR unity scene and attempts to put it back into JSON form. There are several fields that aren't stored anywhere in the ABREngine, and must thus rely on the JSON version of the previous state. Declaration public string SerializeState(JObject previousState) Parameters Type Name Description Newtonsoft.Json.Linq.JObject previousState Returns Type Description String"
  },
  "api/IVLab.ABREngine.AnglePrimitive.html": {
    "href": "api/IVLab.ABREngine.AnglePrimitive.html",
    "title": "Class AnglePrimitive | ABREngine",
    "keywords": "Class AnglePrimitive Inheritance Object FloatPrimitive AnglePrimitive Implements IFloatPrimitive IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class AnglePrimitive : FloatPrimitive, IFloatPrimitive, IPrimitive, IABRInput Constructors | Improve this Doc View Source AnglePrimitive(Single) Declaration public AnglePrimitive(float value) Parameters Type Name Description Single value | Improve this Doc View Source AnglePrimitive(String) Declaration public AnglePrimitive(string value) Parameters Type Name Description String value Properties | Improve this Doc View Source ParsingRegex Declaration public override Regex ParsingRegex { get; } Property Value Type Description Regex Overrides FloatPrimitive.ParsingRegex | Improve this Doc View Source Units Declaration public override string Units { get; } Property Value Type Description String Overrides FloatPrimitive.Units Operators | Improve this Doc View Source Implicit(Single to AnglePrimitive) Declaration public static implicit operator AnglePrimitive(float f) Parameters Type Name Description Single f Returns Type Description AnglePrimitive Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.BooleanPrimitive.html": {
    "href": "api/IVLab.ABREngine.BooleanPrimitive.html",
    "title": "Class BooleanPrimitive | ABREngine",
    "keywords": "Class BooleanPrimitive Inheritance Object BooleanPrimitive Implements IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class BooleanPrimitive : IPrimitive, IABRInput Constructors | Improve this Doc View Source BooleanPrimitive() Declaration public BooleanPrimitive() | Improve this Doc View Source BooleanPrimitive(Boolean) Declaration public BooleanPrimitive(bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source BooleanPrimitive(String) Declaration public BooleanPrimitive(string value) Parameters Type Name Description String value Properties | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source ParsingRegex Declaration public Regex ParsingRegex { get; } Property Value Type Description Regex | Improve this Doc View Source Value Declaration public bool Value { get; protected set; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Implicit(Boolean to BooleanPrimitive) Declaration public static implicit operator BooleanPrimitive(bool b) Parameters Type Name Description Boolean b Returns Type Description BooleanPrimitive Implements IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.ColormapVisAsset.html": {
    "href": "api/IVLab.ABREngine.ColormapVisAsset.html",
    "title": "Class ColormapVisAsset | ABREngine",
    "keywords": "Class ColormapVisAsset Inheritance Object VisAsset ColormapVisAsset Implements IColormapVisAsset IVisAsset IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ColormapVisAsset : VisAsset, IColormapVisAsset, IVisAsset, IABRInput Constructors | Improve this Doc View Source ColormapVisAsset() Declaration public ColormapVisAsset() | Improve this Doc View Source ColormapVisAsset(Guid, Texture2D) Declaration public ColormapVisAsset(Guid uuid, Texture2D colormap) Parameters Type Name Description Guid uuid UnityEngine.Texture2D colormap | Improve this Doc View Source ColormapVisAsset(Texture2D) Declaration public ColormapVisAsset(Texture2D colormap) Parameters Type Name Description UnityEngine.Texture2D colormap Properties | Improve this Doc View Source Colormap Declaration public Texture2D Colormap { get; } Property Value Type Description UnityEngine.Texture2D | Improve this Doc View Source VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetColorGradient() Declaration public Texture2D GetColorGradient() Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetColorInterp(Single) Declaration public Color GetColorInterp(float interpAmount) Parameters Type Name Description Single interpAmount Returns Type Description UnityEngine.Color | Improve this Doc View Source SolidColor(Color) Declaration public static ColormapVisAsset SolidColor(Color fillColor) Parameters Type Name Description UnityEngine.Color fillColor Returns Type Description ColormapVisAsset Implements IColormapVisAsset IVisAsset IABRInput"
  },
  "api/IVLab.ABREngine.DataImpression.html": {
    "href": "api/IVLab.ABREngine.DataImpression.html",
    "title": "Class DataImpression | ABREngine",
    "keywords": "Class DataImpression Private data for a single data impression Should contain properties with attributes for all of the inputs Inheritance Object DataImpression InstancedSurfaceDataImpression SimpleGlyphDataImpression SimpleLineDataImpression SimpleSurfaceDataImpression SimpleVolumeDataImpression Implements IDataImpression IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public abstract class DataImpression : IDataImpression, IHasDataset Constructors | Improve this Doc View Source DataImpression() Declaration public DataImpression() | Improve this Doc View Source DataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID - if you override this constructor bad things might happen. Declaration public DataImpression(string uuid) Parameters Type Name Description String uuid Properties | Improve this Doc View Source ImpressionMaterials Slot to load the material into at runtime Declaration protected virtual Material[] ImpressionMaterials { get; } Property Value Type Description UnityEngine.Material [] | Improve this Doc View Source InputIndexer Declaration public ABRInputIndexerModule InputIndexer { get; set; } Property Value Type Description ABRInputIndexerModule | Improve this Doc View Source KeyDataRenderInfo Cache of current KeyData rendering information Declaration protected virtual IKeyDataRenderInfo KeyDataRenderInfo { get; set; } Property Value Type Description IKeyDataRenderInfo | Improve this Doc View Source LayerName The layer to put this data impression in Warning: layer must exist in the Unity project! Declaration protected virtual string LayerName { get; } Property Value Type Description String | Improve this Doc View Source MaterialNames Name of the material to use to render this DataImpression Declaration protected virtual string[] MaterialNames { get; } Property Value Type Description String [] | Improve this Doc View Source MatPropBlock Storage for the rendering data to be sent to the shader Declaration protected virtual MaterialPropertyBlock MatPropBlock { get; set; } Property Value Type Description UnityEngine.MaterialPropertyBlock | Improve this Doc View Source RenderHints Declaration public RenderHints RenderHints { get; set; } Property Value Type Description RenderHints | Improve this Doc View Source RenderInfo Cache of current rendering information Declaration protected virtual IDataImpressionRenderInfo RenderInfo { get; set; } Property Value Type Description IDataImpressionRenderInfo | Improve this Doc View Source Tags A list of tags that this data impression has - solely used for external purposes (the engine does nothing with them) Declaration public List<string> Tags { get; set; } Property Value Type Description List < String > | Improve this Doc View Source Uuid Declaration public Guid Uuid { get; set; } Property Value Type Description Guid Methods | Improve this Doc View Source Cleanup(EncodedGameObject) Declaration public virtual void Cleanup(EncodedGameObject encodedGameObject) Parameters Type Name Description EncodedGameObject encodedGameObject | Improve this Doc View Source ComputeGeometry() Declaration public virtual void ComputeGeometry() | Improve this Doc View Source Copy() Unknown why it's necessary to copy each input individually, but here we are. Declaration public virtual IDataImpression Copy() Returns Type Description IDataImpression | Improve this Doc View Source CopyExisting(IDataImpression) Update this data impression from an existing (possibly temporary) one. Declaration public virtual void CopyExisting(IDataImpression other) Parameters Type Name Description IDataImpression other | Improve this Doc View Source GetDataset() By default, there's no dataset. DataImpressions should only have one dataset, and it's up to them individually to enforce that they correctly implement this. Declaration public virtual Dataset GetDataset() Returns Type Description Dataset | Improve this Doc View Source HasTag(String) Declaration public bool HasTag(string tag) Parameters Type Name Description String tag Returns Type Description Boolean | Improve this Doc View Source SetupGameObject(EncodedGameObject) Declaration public virtual void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject | Improve this Doc View Source UpdateStyling(EncodedGameObject) Declaration public virtual void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject | Improve this Doc View Source UpdateVisibility(EncodedGameObject) Declaration public virtual void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.DataImpressionGroup.html": {
    "href": "api/IVLab.ABREngine.DataImpressionGroup.html",
    "title": "Class DataImpressionGroup | ABREngine",
    "keywords": "Class DataImpressionGroup A DataImpressionGroup is, as the name suggests, a group of data impressions within ABR. DataImpressionGroups are contained within a defined bounding box, and automatically rescale all of their data to stay within this container. Each time a new key data object is loaded into a data impression in this group, the GroupToDataMatrix and GroupBounds are updated. Inheritance Object DataImpressionGroup Implements IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class DataImpressionGroup : IHasDataset Remarks DataImpressionGroups cannot be constructed directly, you MUST use the a variation of the CreateDataImpressionGroup(String) method. Fields | Improve this Doc View Source GroupBounds The actual bounds (contained within DataContainer) of the group-scale dataset Declaration public Bounds GroupBounds Field Value Type Description UnityEngine.Bounds | Improve this Doc View Source GroupToDataMatrix Transformation from the original data space into the room-scale bounds. Multiply by a vector to go from group-space into data-space. Declaration public Matrix4x4 GroupToDataMatrix Field Value Type Description UnityEngine.Matrix4x4 Properties | Improve this Doc View Source GroupContainer Room-scale (Unity rendering space) bounds that all data should be contained within Declaration public Bounds GroupContainer { get; set; } Property Value Type Description UnityEngine.Bounds | Improve this Doc View Source GroupRoot GameObject to place all Data Impressions under Declaration public GameObject GroupRoot { get; } Property Value Type Description UnityEngine.GameObject | Improve this Doc View Source Name Human-readable name for the data impression group Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Uuid Unique identifier for this group Declaration public Guid Uuid { get; } Property Value Type Description Guid Methods | Improve this Doc View Source AddDataImpression(IDataImpression, Boolean) Add a data impression to this group. All data impressions in the same group NEED to have the same dataset, error will be displayed otherwise. Declaration public void AddDataImpression(IDataImpression impression, bool allowOverwrite = true) Parameters Type Name Description IDataImpression impression Boolean allowOverwrite | Improve this Doc View Source Clear() Remove all data impressions from this DataImpressionGroup Declaration public void Clear() | Improve this Doc View Source GetDataImpression(Func<IDataImpression, Boolean>) Get a data impression matching a particular criteria Declaration public IDataImpression GetDataImpression(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Returns Type Description IDataImpression The data impression, if found, otherwise null Examples This method can be used to access data impressions in a functional manner, for example checking if the impression has a particular colormap assigned. DataImpressionGroup group; group.GetDataImpression((di) => { try { SimpleSurfaceDataImpression sdi = di as SimpleSurfaceDataImpression; return sdi.colormap.Uuid == new Guid(\"5a761a72-8bcb-11ea-9265-005056bae6d8\"); } catch { return null; } }); | Improve this Doc View Source GetDataImpression(Guid) Get a data impression by its UUID Declaration public IDataImpression GetDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description IDataImpression The data impression, if found, otherwise null | Improve this Doc View Source GetDataImpression<T>() Get a data impression matching a type Declaration public T GetDataImpression<T>() where T : IDataImpression Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetDataImpression<T>(Func<T, Boolean>) Get a data impression matching a type AND a particular criteria Declaration public T GetDataImpression<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Returns Type Description T Type Parameters Name Description T Examples This method can be used as a more elegant way to access individual types of data impressions. DataImpressionGroup group; group.GetDataImpression<SimpleSurfaceDataImpression>((di) => { // di is already a SimpleSurfaceDataImpression return sdi.colormap.Uuid == new Guid(\"5a761a72-8bcb-11ea-9265-005056bae6d8\"); }); | Improve this Doc View Source GetDataImpressions() Return all data impressions inside this data impression group Declaration public Dictionary<Guid, IDataImpression> GetDataImpressions() Returns Type Description Dictionary < Guid , IDataImpression > | Improve this Doc View Source GetDataImpressions(Func<IDataImpression, Boolean>) Return all data impressions that match a particular criteria Declaration public List<IDataImpression> GetDataImpressions(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Returns Type Description List < IDataImpression > | Improve this Doc View Source GetDataImpressions<T>() Return all data impressions that have a particular type Declaration public List<T> GetDataImpressions<T>() where T : IDataImpression Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source GetDataImpressions<T>(Func<T, Boolean>) Return all data impressions that match a particular criteria AND have a particular type Declaration public List<T> GetDataImpressions<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source GetDataImpressionsOfType<T>() Get all data impressions in this group that match a particular type (e.g. get all SimpleSurfaceDataImpression s). Declaration [Obsolete(\"GetDataImpressionsOfType<T> is obsolete, use GetDataImpressions<T> instead\")] public List<T> GetDataImpressionsOfType<T>() where T : IDataImpression Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source GetDataImpressionsWithTag(String) Get all data impressions that have a particular tag. Tags can be any string value. They are not used internally to the engine but can be useful for keeping track of data impressions in applications that use ABR. Declaration public List<IDataImpression> GetDataImpressionsWithTag(string tag) Parameters Type Name Description String tag Returns Type Description List < IDataImpression > | Improve this Doc View Source GetDataset() Get the dataset that all impressions in this DataImpressionGroup are associated with. All DataImpressionGroups MUST have only one dataset. Declaration public Dataset GetDataset() Returns Type Description Dataset | Improve this Doc View Source GetEncodedGameObject(Guid) Return the Unity GameObject associated with this particular UUID. Declaration public EncodedGameObject GetEncodedGameObject(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description EncodedGameObject | Improve this Doc View Source HasDataImpression(Guid) Return whether or not the data impression with a given UUID is present in this DataImpressionGroup Declaration public bool HasDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean | Improve this Doc View Source HasEncodedGameObject(Guid) Check to see if a data impression with a particular UUID has a GameObject yet Declaration public bool HasEncodedGameObject(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean | Improve this Doc View Source RecalculateBounds() From scratch, recalculate the bounds of this DataImpressionGroup. Start with a zero-size bounding box and expand until it encapsulates all datasets. Declaration public bool RecalculateBounds() Returns Type Description Boolean Returns a boolean whether or not the bounds have changed since last recalculation | Improve this Doc View Source RemoveDataImpression(Guid) Remove data impression, returning true if this data impression group is empty after the removal of such impression. Declaration public bool RemoveDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean | Improve this Doc View Source RenderImpressions() Render every data impression inside this data impression group. Three levels of \"update\" are provided for each data impression (see RenderHints for more information): Recompute everything if the data source has changed (geometry, style, visibility) Only recompute style if only the style (variables, visassets, etc.) has changed Only toggle visibility if only that has changed Declaration public void RenderImpressions() Implements IHasDataset"
  },
  "api/IVLab.ABREngine.DataManager.html": {
    "href": "api/IVLab.ABREngine.DataManager.html",
    "title": "Class DataManager | ABREngine",
    "keywords": "Class DataManager Manager where all datasets, key data, and variables live. This class makes the connection between Datasets and RawDatasets. This class is useful for obtaining any KeyData and Variables needed to apply to Data Impressions. Inheritance Object DataManager Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class DataManager Examples When constructing a custom dataset, you can load it directly into the engine and access its imported contents via the KeyData object returned by ImportRawDataset(RawDataset) . public class DataManagerExample : MonoBehaviour { void Start() { // Generate 100 random points with \"data\" values List<Vector3> points = new List<Vector3>(); List<float> dataValues = new List<float>(); for (int i = 0; i < 100; i++) { points.Add(Random.insideUnitSphere); dataValues.Add(i); } // Create some bounds Bounds b = new Bounds(Vector3.zero, Vector3.one); // Create a dictionary to name the scalar values Dictionary<string, List<float>> scalarVars = new Dictionary<string, List<float>> {{ \"someData\", dataValues }}; // Create an ABR-formatted dataset RawDataset abrPoints = RawDatasetAdapter.PointsToPoints(points, b, scalarVars, null); // AND, import these data to ABR KeyData pointsKD = ABREngine.Instance.Data.ImportRawDataset(abrPoints); // From here, we can access the keyData, scalarVariables, and vectorVariables Debug.Log(pointsKD); // the key data (point geometry) we just imported Debug.Log(pointsKD.GetScalarVariables().Length); // length of 1 Debug.Log(pointsKD.GetScalarVariables()[0]); // the 'someData' variable we declared above Debug.Log(pointsKD.GetVectorVariables().Length); // length of 0 -- we didn't declare any vector vars here. } } Additionally, the actual raw data can be loaded from the data manager. Generally this is not necessary, simply using the high-level variables above in conjunction with Data Impressions is usually sufficient. RawDataset rds = null; if (ABREngine.Instance.Data.TryGetRawDataset(\"Test/Test/KeyData/Example\", out rds)) { float[] var = rds.GetScalarArray(\"ExampleVar\"); } Constructors | Improve this Doc View Source DataManager(String) Declaration public DataManager(string datasetPath) Parameters Type Name Description String datasetPath Methods | Improve this Doc View Source CacheRawDataset(String, RawDataset) Save a copy of a RawDataset into the media folder. Declaration public void CacheRawDataset(string dataPath, RawDataset rds) Parameters Type Name Description String dataPath RawDataset rds | Improve this Doc View Source CacheRawDataset(String, in String, in Byte[]) Save a copy of the RawDataset described by json and data to the media folder. Declaration public void CacheRawDataset(string dataPath, in string json, in byte[] data) Parameters Type Name Description String dataPath String json Byte [] data | Improve this Doc View Source GetDatasets() Retrieve all datasets that are currently loaded into the ABR Engine Declaration public List<Dataset> GetDatasets() Returns Type Description List < Dataset > List of currently loaded Datasets | Improve this Doc View Source ImportRawDataset(RawDataset) Import a raw dataset into ABR. This method makes the dataset available as a key data object and makes all of its scalar and vector variables available across ABR. Declaration public KeyData ImportRawDataset(RawDataset importing) Parameters Type Name Description RawDataset importing Returns Type Description KeyData Returns the Key Data and variables that were just imported to this data path. | Improve this Doc View Source ImportRawDataset(String, RawDataset) Import a raw dataset into ABR. This method makes the dataset available as a key data object and makes all of its scalar and vector variables available across ABR. Declaration public KeyData ImportRawDataset(string dataPath, RawDataset importing) Parameters Type Name Description String dataPath RawDataset importing Returns Type Description KeyData Returns the Key Data and variables that were just imported to this data path. | Improve this Doc View Source LoadRawDataset<T>(String) Load a raw dataset into a RawDataset object by its data path and return the rawdataset after it has been successfully imported. Declaration public RawDataset LoadRawDataset<T>(string dataPath) where T : IDataLoader, new() Parameters Type Name Description String dataPath Data path to load. If loading from the media directory, you can use the relative path inside that folder (but exclude the .bin/.json extension) Returns Type Description RawDataset Returns the actual RawDataset if the dataset was found, null if not found. Type Parameters Name Description T Any IDataLoader type Examples If you're working with a pre-existing dataset (i.e., one that already exists in ABR raw data format in your media folder), you can use LoadRawDataset<T>(String) to obtain a RawDataset . // Load from a .bin/.json file pair in the datasets folder in the // media directory. Most of the time when you're fetching an existing // dataset, this is what you'll want to do. Just make sure the // dataset actually exists in the media folder! RawDataset ds1 = ABREngine.Instance.Data.LoadRawDataset<MediaDataLoader>(\"Test/Test/KeyData/Example\"); // You can also load an ABR raw dataset from a web resource. This requires setting up an ABR data server. RawDataset ds2 = ABREngine.Instance.Data.LoadRawDataset<HttpDataLoader>(\"Test/Test/KeyData/Example\"); | Improve this Doc View Source TryGetDataset(String, out Dataset) Attempt to get a lightweight dataset by its data path. Declaration public bool TryGetDataset(string dataPath, out Dataset dataset) Parameters Type Name Description String dataPath Dataset dataset Returns Type Description Boolean Returns true if the dataset was found, and populates the out Dataset dataset accordingly. | Improve this Doc View Source TryGetRawDataset(String, out RawDataset) Attempt to get a RawDataset at a particular data path. Declaration public bool TryGetRawDataset(string dataPath, out RawDataset dataset) Parameters Type Name Description String dataPath RawDataset dataset Returns Type Description Boolean Returns true if the raw dataset was found, false if not, and populates the out RawDataset dataset accordingly. | Improve this Doc View Source UnloadRawDataset(String) Entirely remove a RawDataset from ABR memory. Declaration public void UnloadRawDataset(string dataPath) Parameters Type Name Description String dataPath The data path / key data to be unloaded Remarks This method does not check if the dataset is currently in use , so utilize this method with care!"
  },
  "api/IVLab.ABREngine.DataPath.DataPathType.html": {
    "href": "api/IVLab.ABREngine.DataPath.DataPathType.html",
    "title": "Enum DataPath.DataPathType | ABREngine",
    "keywords": "Enum DataPath.DataPathType Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public enum DataPathType Fields Name Description Dataset KeyData ScalarVar VectorVar"
  },
  "api/IVLab.ABREngine.DataPath.html": {
    "href": "api/IVLab.ABREngine.DataPath.html",
    "title": "Class DataPath | ABREngine",
    "keywords": "Class DataPath A path to a data source, be it a KeyData object, a Scalar Variable, a Vector Variable, or something else. Should take the form of Organization/DatasetName/* Example: TACC/GulfOfMexico/KeyData/bathymetry Example: TACC/GulfOfMexico/ScalarVar/temperature Inheritance Object DataPath Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public static class DataPath Methods | Improve this Doc View Source FollowsConvention(String, DataPath.DataPathType) Declaration public static bool FollowsConvention(string label, DataPath.DataPathType pathType = DataPath.DataPathType.KeyData) Parameters Type Name Description String label DataPath.DataPathType pathType Returns Type Description Boolean | Improve this Doc View Source GetConvention(DataPath.DataPathType) Declaration public static string GetConvention(DataPath.DataPathType pathType) Parameters Type Name Description DataPath.DataPathType pathType Returns Type Description String | Improve this Doc View Source GetDataset(String) Declaration public static string GetDataset(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source GetDatasetPath(String) Declaration public static string GetDatasetPath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source GetName(String) Declaration public static string GetName(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source GetNamePath(String) Declaration public static string GetNamePath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source GetOrganization(String) Declaration public static string GetOrganization(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source GetOrganizationPath(String) Declaration public static string GetOrganizationPath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source GetPathType(String) Declaration public static string GetPathType(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source GetPathTypePath(String) Declaration public static string GetPathTypePath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String | Improve this Doc View Source Join(String, DataPath.DataPathType) Declaration public static string Join(string path1, DataPath.DataPathType pathType) Parameters Type Name Description String path1 DataPath.DataPathType pathType Returns Type Description String | Improve this Doc View Source Join(String, String) Declaration public static string Join(string path1, string path2) Parameters Type Name Description String path1 String path2 Returns Type Description String | Improve this Doc View Source WarnOnDataPathFormat(String, DataPath.DataPathType) Declaration public static void WarnOnDataPathFormat(string dataPath, DataPath.DataPathType dataPathType) Parameters Type Name Description String dataPath DataPath.DataPathType dataPathType"
  },
  "api/IVLab.ABREngine.DataRange-1.html": {
    "href": "api/IVLab.ABREngine.DataRange-1.html",
    "title": "Class DataRange<T> | ABREngine",
    "keywords": "Class DataRange<T> Range descriptor for a variable, including a min and max. Inheritance Object DataRange<T> Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class DataRange<T> Type Parameters Name Description T Fields | Improve this Doc View Source max Declaration public T max Field Value Type Description T | Improve this Doc View Source min Declaration public T min Field Value Type Description T Methods | Improve this Doc View Source Equals(DataRange<T>) Declaration public bool Equals(DataRange<T> other) Parameters Type Name Description DataRange <T> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/IVLab.ABREngine.Dataset.html": {
    "href": "api/IVLab.ABREngine.Dataset.html",
    "title": "Class Dataset | ABREngine",
    "keywords": "Class Dataset Lightweight container for a collection of KeyData objects and variables that share a common coordinate space. Its bounding box contains all of data, and the rendered objects are children of this object's GameObject. Inheritance Object Dataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class Dataset Constructors | Improve this Doc View Source Dataset(String, Bounds, Transform) Declaration public Dataset(string dataPath, Bounds bounds, Transform parent) Parameters Type Name Description String dataPath UnityEngine.Bounds bounds UnityEngine.Transform parent Fields | Improve this Doc View Source DataSpaceBounds The bounds of the original, data-scale dataset, which grow as we add more datasets Declaration public Bounds DataSpaceBounds Field Value Type Description UnityEngine.Bounds Properties | Improve this Doc View Source Path Path of this dataset (should conform to DataPath ) Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source AddKeyData(IKeyData) Declaration public void AddKeyData(IKeyData keyData) Parameters Type Name Description IKeyData keyData | Improve this Doc View Source AddScalarVariable(ScalarDataVariable) Declaration public void AddScalarVariable(ScalarDataVariable scalarVar) Parameters Type Name Description ScalarDataVariable scalarVar | Improve this Doc View Source AddVectorVariable(VectorDataVariable) Declaration public void AddVectorVariable(VectorDataVariable vectorVar) Parameters Type Name Description VectorDataVariable vectorVar | Improve this Doc View Source GetAllKeyData() Declaration public Dictionary<string, IKeyData> GetAllKeyData() Returns Type Description Dictionary < String , IKeyData > | Improve this Doc View Source GetAllScalarVars() Declaration public Dictionary<string, ScalarDataVariable> GetAllScalarVars() Returns Type Description Dictionary < String , ScalarDataVariable > | Improve this Doc View Source GetAllVectorVars() Declaration public Dictionary<string, VectorDataVariable> GetAllVectorVars() Returns Type Description Dictionary < String , VectorDataVariable > | Improve this Doc View Source GetKeyData() All IKeyData objects within this dataset Declaration public IKeyData[] GetKeyData() Returns Type Description IKeyData [] | Improve this Doc View Source GetScalarVariables() Declaration public ScalarDataVariable[] GetScalarVariables() Returns Type Description ScalarDataVariable [] | Improve this Doc View Source GetScalarVariables(IKeyData) All ScalarDataVariable objects within this dataset. NOTE: Not every ScalarDataVariable applies to every KeyData object! Declaration public ScalarDataVariable[] GetScalarVariables(IKeyData associatedWith) Parameters Type Name Description IKeyData associatedWith Returns Type Description ScalarDataVariable [] | Improve this Doc View Source GetVectorVariables() Declaration public VectorDataVariable[] GetVectorVariables() Returns Type Description VectorDataVariable [] | Improve this Doc View Source GetVectorVariables(IKeyData) All VectorDataVariable objects within this dataset. NOTE: Not every VectorDataVariable applies to every KeyData object! Declaration public VectorDataVariable[] GetVectorVariables(IKeyData associatedWith) Parameters Type Name Description IKeyData associatedWith Returns Type Description VectorDataVariable [] | Improve this Doc View Source TryGetKeyData(String, out IKeyData) Declaration public bool TryGetKeyData(string dataPath, out IKeyData keyData) Parameters Type Name Description String dataPath IKeyData keyData Returns Type Description Boolean | Improve this Doc View Source TryGetScalarVar(String, out ScalarDataVariable) Declaration public bool TryGetScalarVar(string dataPath, out ScalarDataVariable scalarVar) Parameters Type Name Description String dataPath ScalarDataVariable scalarVar Returns Type Description Boolean | Improve this Doc View Source TryGetVectorVar(String, out VectorDataVariable) Declaration public bool TryGetVectorVar(string dataPath, out VectorDataVariable vectorVar) Parameters Type Name Description String dataPath VectorDataVariable vectorVar Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.DataTopology.html": {
    "href": "api/IVLab.ABREngine.DataTopology.html",
    "title": "Enum DataTopology | ABREngine",
    "keywords": "Enum DataTopology Extension of Unity's MeshTopology enum that defines more generic \"data\" topology, including voxels. Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public enum DataTopology Fields Name Description Lines LineStrip Points Quads Triangles Voxels"
  },
  "api/IVLab.ABREngine.EncodedGameObject.html": {
    "href": "api/IVLab.ABREngine.EncodedGameObject.html",
    "title": "Class EncodedGameObject | ABREngine",
    "keywords": "Class EncodedGameObject An EncodedGameObject connects a DataImpression with a Unity Game Object. Look under the ABREngine main GameObject, find the data impression group your impression exists in, and inspect the Data Impression GameObject to find the EncodedGameObject. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EncodedGameObject Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class EncodedGameObject : MonoBehaviour Remarks While this little class seems unobtrusive and unimportant, this is the class that connects all of the underlying rendering work ABR is doing with the Unity scene and geometry rendering! Properties | Improve this Doc View Source Uuid The UUID of the data impression this GameObject is encoding. Declaration public Guid Uuid { get; set; } Property Value Type Description Guid"
  },
  "api/IVLab.ABREngine.FilePathVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.FilePathVisAssetFetcher.html",
    "title": "Class FilePathVisAssetFetcher | ABREngine",
    "keywords": "Class FilePathVisAssetFetcher Fetch VisAsset from somewhere on local disk Inheritance Object FilePathVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class FilePathVisAssetFetcher : IVisAssetFetcher Constructors | Improve this Doc View Source FilePathVisAssetFetcher(String) Declaration public FilePathVisAssetFetcher(string appDataPath) Parameters Type Name Description String appDataPath Properties | Improve this Doc View Source VisAssetJson Declaration public string VisAssetJson { get; } Property Value Type Description String Methods | Improve this Doc View Source GetArtifactJson(Guid) Declaration public JObject GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String | Improve this Doc View Source GetColormapTexture(Guid) Declaration public Texture2D GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetGlyphGameObject(Guid, JObject) Declaration public GameObject GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description UnityEngine.GameObject | Improve this Doc View Source GetGlyphNormalMapTexture(Guid, JObject) Declaration public Texture2D GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetLineTexture(Guid) Declaration public Texture2D GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetSurfaceNormalMap(Guid) Declaration public Texture2D GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetSurfaceTexture(Guid) Declaration public Texture2D GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.FloatPrimitive.html": {
    "href": "api/IVLab.ABREngine.FloatPrimitive.html",
    "title": "Class FloatPrimitive | ABREngine",
    "keywords": "Class FloatPrimitive Inheritance Object FloatPrimitive AnglePrimitive LengthPrimitive PercentPrimitive Implements IFloatPrimitive IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class FloatPrimitive : IFloatPrimitive, IPrimitive, IABRInput Constructors | Improve this Doc View Source FloatPrimitive() Declaration public FloatPrimitive() | Improve this Doc View Source FloatPrimitive(Single) Declaration public FloatPrimitive(float value) Parameters Type Name Description Single value | Improve this Doc View Source FloatPrimitive(String) Declaration public FloatPrimitive(string value) Parameters Type Name Description String value Properties | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source ParsingRegex Declaration public virtual Regex ParsingRegex { get; } Property Value Type Description Regex | Improve this Doc View Source Units Declaration public virtual string Units { get; } Property Value Type Description String | Improve this Doc View Source Value Declaration public float Value { get; protected set; } Property Value Type Description Single Methods | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.GlyphGradient.html": {
    "href": "api/IVLab.ABREngine.GlyphGradient.html",
    "title": "Class GlyphGradient | ABREngine",
    "keywords": "Class GlyphGradient Inheritance Object VisAsset VisAssetGradient GlyphGradient Implements IGlyphVisAsset IVisAssetGradient < GlyphVisAsset > IVisAsset IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class GlyphGradient : VisAssetGradient, IGlyphVisAsset, IVisAssetGradient<GlyphVisAsset>, IVisAsset, IABRInput Properties | Improve this Doc View Source Stops Declaration public List<float> Stops { get; } Property Value Type Description List < Single > | Improve this Doc View Source VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 | Improve this Doc View Source VisAssets Declaration public List<GlyphVisAsset> VisAssets { get; } Property Value Type Description List < GlyphVisAsset > Methods | Improve this Doc View Source GetMesh(Int32) Declaration public Mesh GetMesh(int lod) Parameters Type Name Description Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetMesh(Int32, Int32) Declaration public Mesh GetMesh(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetMesh(Single, Int32) Declaration public Mesh GetMesh(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetNormalMap(Int32) Declaration public Texture2D GetNormalMap(int lod) Parameters Type Name Description Int32 lod Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetNormalMap(Int32, Int32) Declaration public Texture2D GetNormalMap(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetNormalMap(Single, Int32) Declaration public Texture2D GetNormalMap(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source Initialize(Guid, List<GlyphVisAsset>, List<Single>) Declaration public void Initialize(Guid uuid, List<GlyphVisAsset> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List < GlyphVisAsset > visAssets List < Single > stops Implements IGlyphVisAsset IVisAssetGradient<T> IVisAsset IABRInput"
  },
  "api/IVLab.ABREngine.GlyphVisAsset.html": {
    "href": "api/IVLab.ABREngine.GlyphVisAsset.html",
    "title": "Class GlyphVisAsset | ABREngine",
    "keywords": "Class GlyphVisAsset Inheritance Object VisAsset GlyphVisAsset Implements IGlyphVisAsset IVisAsset IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class GlyphVisAsset : VisAsset, IGlyphVisAsset, IVisAsset, IABRInput Constructors | Improve this Doc View Source GlyphVisAsset() Declaration public GlyphVisAsset() | Improve this Doc View Source GlyphVisAsset(List<Mesh>, List<Texture2D>) Declaration public GlyphVisAsset(List<Mesh> meshLods, List<Texture2D> normalMapLods) Parameters Type Name Description List < UnityEngine.Mesh > meshLods List < UnityEngine.Texture2D > normalMapLods | Improve this Doc View Source GlyphVisAsset(Guid, List<Mesh>, List<Texture2D>) Declaration public GlyphVisAsset(Guid uuid, List<Mesh> meshLods, List<Texture2D> normalMapLods) Parameters Type Name Description Guid uuid List < UnityEngine.Mesh > meshLods List < UnityEngine.Texture2D > normalMapLods Properties | Improve this Doc View Source MeshLods Declaration public List<Mesh> MeshLods { get; } Property Value Type Description List < UnityEngine.Mesh > | Improve this Doc View Source NormalMapLods Declaration public List<Texture2D> NormalMapLods { get; } Property Value Type Description List < UnityEngine.Texture2D > | Improve this Doc View Source VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetMesh(Int32) Declaration public Mesh GetMesh(int lod) Parameters Type Name Description Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetMesh(Int32, Int32) Declaration public Mesh GetMesh(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetMesh(Single, Int32) Declaration public Mesh GetMesh(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetNormalMap(Int32) Declaration public Texture2D GetNormalMap(int lod) Parameters Type Name Description Int32 lod Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetNormalMap(Int32, Int32) Declaration public Texture2D GetNormalMap(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetNormalMap(Single, Int32) Declaration public Texture2D GetNormalMap(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description UnityEngine.Texture2D Implements IGlyphVisAsset IVisAsset IABRInput"
  },
  "api/IVLab.ABREngine.GradientBlendMap.html": {
    "href": "api/IVLab.ABREngine.GradientBlendMap.html",
    "title": "Class GradientBlendMap | ABREngine",
    "keywords": "Class GradientBlendMap Collection of essential textures for making texture-based VisAsset gradients happen. The blend maps are controlled via the and texture arrays. Inheritance Object GradientBlendMap Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class GradientBlendMap Constructors | Improve this Doc View Source GradientBlendMap(List<Texture2D>, List<Single>, List<Single>) Declaration public GradientBlendMap(List<Texture2D> textures, List<float> stops, List<float> blendWidths) Parameters Type Name Description List < Texture2D > textures List < Single > stops List < Single > blendWidths | Improve this Doc View Source GradientBlendMap(List<Texture2D>, List<Single>, Single) Declaration public GradientBlendMap(List<Texture2D> textures, List<float> stops, float blendWidth) Parameters Type Name Description List < Texture2D > textures List < Single > stops Single blendWidth | Improve this Doc View Source GradientBlendMap(Texture2D) Declaration public GradientBlendMap(Texture2D texture) Parameters Type Name Description Texture2D texture Fields | Improve this Doc View Source MaxSupportedTextures Maximum number of supported textures in a texture gradient Declaration public const int MaxSupportedTextures = 16 Field Value Type Description Int32 Properties | Improve this Doc View Source AspectRatios Array of aspect ratios (width / height) of each texture Declaration public float[] AspectRatios { get; } Property Value Type Description Single [] | Improve this Doc View Source BlendMaps Red/Green/Blue/Alpha texture that describes the blending between Stops . For a gradient with 3 elements, this texture will look red on the left, green in the middle, and blue on the right. For a gradient with 12 elements, this texture will have 3 rows with red, green, blue, and alpha. The transition blend is defined by blendWidth . For a gradient with 5 elements, the BlendMap looks something like this: Declaration public Texture2D BlendMaps { get; } Property Value Type Description Texture2D | Improve this Doc View Source HeightWidthAspectRatios Array of aspect ratios (height / width) of each texture Declaration public float[] HeightWidthAspectRatios { get; } Property Value Type Description Single [] | Improve this Doc View Source StopMaps Red/green/blue/alpha texture that describes how far along in the current stop we are, matching up with BlendMap . For a gradient with 3 elements, this texture will look like 3 black-to-white colormaps smooshed together. For a gradient with 5 elements, the StopMap looks something like this: Declaration public Texture2D StopMaps { get; } Property Value Type Description Texture2D | Improve this Doc View Source Textures The actual combined texture that contains all visassets, stacked together vertically. For a gradient with 5 line texture elements, it might look something like this: Declaration public Texture2D Textures { get; } Property Value Type Description Texture2D"
  },
  "api/IVLab.ABREngine.html": {
    "href": "api/IVLab.ABREngine.html",
    "title": "Namespace IVLab.ABREngine | ABREngine",
    "keywords": "Namespace IVLab.ABREngine Classes ABRConfig This Scriptable Object controls the ABR configuration before startup. On engine startup, a copy is instantiated for use at runtime. ABRConfig.Consts Global access to constants in the ABR Engine ABREngine The ABREngine class is the main operational MonoBehaviour Singleton for the ABREngine-UnityPackage. It is in charge of kicking off all startup processes for ABR, including setting up connections with the server, the data listener, VisAssets and Data managers, etc. ABRInputAttribute Input attribute used for annotating an ABR input to a data impression (VisAsset, DataVariable, etc.) ABRInputIndexerModule Convenience class to avoid having to repeatedly manage reflection when adjusting ABR inputs to Data Impressions. ABRPlateType Attribute to match up this class with the string plate name from the ABR Schema ABRStateParser The ABRStateParser takes a (text) ABR state from JSON and loads its components into Unity, or takes the current state of objects in the Unity scene and translates it back into text. AnglePrimitive BooleanPrimitive ColormapVisAsset DataImpression Private data for a single data impression Should contain properties with attributes for all of the inputs DataImpressionGroup A DataImpressionGroup is, as the name suggests, a group of data impressions within ABR. DataImpressionGroups are contained within a defined bounding box, and automatically rescale all of their data to stay within this container. Each time a new key data object is loaded into a data impression in this group, the GroupToDataMatrix and GroupBounds are updated. DataManager Manager where all datasets, key data, and variables live. This class makes the connection between Datasets and RawDatasets. This class is useful for obtaining any KeyData and Variables needed to apply to Data Impressions. DataPath A path to a data source, be it a KeyData object, a Scalar Variable, a Vector Variable, or something else. Should take the form of Organization/DatasetName/* Example: TACC/GulfOfMexico/KeyData/bathymetry Example: TACC/GulfOfMexico/ScalarVar/temperature DataRange<T> Range descriptor for a variable, including a min and max. Dataset Lightweight container for a collection of KeyData objects and variables that share a common coordinate space. Its bounding box contains all of data, and the rendered objects are children of this object's GameObject. EncodedGameObject An EncodedGameObject connects a DataImpression with a Unity Game Object. Look under the ABREngine main GameObject, find the data impression group your impression exists in, and inspect the Data Impression GameObject to find the EncodedGameObject. FilePathVisAssetFetcher Fetch VisAsset from somewhere on local disk FloatPrimitive GlyphGradient GlyphVisAsset GradientBlendMap Collection of essential textures for making texture-based VisAsset gradients happen. The blend maps are controlled via the and texture arrays. HttpDataLoader Load data from a remote source HttpStateFileLoader Save/Load a state from a web URL HttpVisAssetFetcher Fetch VisAssets from a URL via HTTP InstancedMeshRenderer Custom-tailored Instanced Mesh Renderer for rendering glyphs in ABR. When using this, developers should make sure that \"Use Instanced\" is checked on the material that these glyphs are using. InstancedSurfaceDataImpression An Instanced Surface data impression (very similar to glyphs, except geometries are specified from data rather than VisAssets) IntegerPrimitive KeyData Lightweight container for a data object. From Key Data objects, scalar and vector variables can be obtained (see the example below). KeyDataMapping Mapping between topologies / types of geometry and actual key data LengthPrimitive LineKeyData LineTextureGradient LineTextureVisAsset MediaDataLoader Load data from the ABREngine Media directory (specified in ABRConfig) Notifier Notifier for ABR state / cache updates, based on WebSockets. PathStateFileLoader Save/Load a state to a JSON file somewhere on disk PercentPrimitive PointKeyData PrimitiveGradient A simple gradient of points associated with values. RawABRInput Raw string values from a state JSON being passed to ABR Matches InputValue definition from ABR State Schema Parameters can have one or more inputs RawDataset The raw variable arrays and geometry for a Data Object. RawDatasets can be loaded from a pair of .json and .bin files (JsonHeader and BinaryData, respectively). This RawDataset defines the specification for each of these files. RawDataset is not to be confused with Dataset , which represents a collection of RawDatasets which share a coordinate space, key data, and variables. RawDataset.BinaryData Actual geometric representation of the data to load from a file / socket RawDataset.JsonHeader Header that contains metadata for a particular RawDataset RawDatasetAdapter Adapter for converting other formats to ABRDataFormat. For example, lists of points => ribbons, or lists of points => glyphs. See the examples below for usage of each of these methods. RawPrimitiveGradient RawVisAssetGradient Serializable version of the VisAsset gradients that interacts with state/schema. Each VisAsset type should be responsible for implementing their own conversion to/from this. RenderHints Hints for rendering, such as whether a data impression should be hidden ResourcesDataLoader Load data from resources folder. NOTE: The actual data files (.bin) must have their file extension changed to .txt in order to be recognized. When data are imported, the identity of each is lost so we must guess which is which - currently guessing the larger of the two files is the \"Data\" and the smaller is \"Metadata\". ResourceStateFileLoader Load a state from any Resources folder within Unity (within any Package or Asset) ResourceVisAssetFetcher Fetch VisAsset from a Resources folder (in an Asset or Package) ScalarDataVariable SerializableFloatArray SerializableVectorArray SimpleGlyphDataImpression A \"Glyphs\" data impression that uses hand-sculpted geometry to depict point data. SimpleLineDataImpression A \"Lines\" data impression that uses hand-drawn line textures to depict line/flow data. SimpleSurfaceDataImpression A \"Surfaces\" data impression that uses hand-drawn textures and color to show surface data. SimpleVolumeDataImpression A \"Volumes\" data impression that uses a user-defined transfer (opacity) map and a colormap to show volumetric data. SocketDataListener Listener for incoming upstream data, for example, from a Send2ABR plugin for ParaView. Operation of this class is controlled by the ABRConfig option dataListenerPort . StateLocalVisAssetFetcher Fetch a VisAsset from the currently loaded ABR state. Currently only valid for ColormapVisAssets. SurfaceKeyData SurfaceTextureGradient SurfaceTextureVisAsset TextStateFileLoader Load a state from a serialized JSON string TypeExtentions UnityObjectSerializer Custom converter to allow less verbose Newtonsoft serialization of Unity builtin objects. This converter manually handles several cases, add more as they become necessary. VectorDataVariable VisAsset Generic type for all VisAssets to inherit from VisAssetGradient Concrete implementation of a VisAsset Gradient, which is a collection of VisAssets that also counts as a single VisAsset. VisAssetLoader Use a particular fetcher to try and get the VisAsset from its source, and construct the requisite Unity objects and IVisAsset to add. VisAssetManager The VisAssetManager is where all VisAssets are stored within the ABREngine. VisAssets can be loaded and fetched from various sources defined in VisAssetFetchers . Currently, VisAssets may be loaded from any of the following: The state itself ( localVisAssets ) The media directory on the machine ABR is running on Any Resources folder (in Assets or in any Package) A VisAsset server VolumeKeyData VolumeLightManager Transfer any lights in the ABR scene to variables in the volume rendering shader. Structs SocketTextData Interfaces IABRInput Interface that includes every input to a data impression. Every type of ABR input should fit into a specific ABRInputGenre. IABRStateLoader Generic state loader for ABR. Implementations should allow both retrieving a state ( GetState ) and saving a state ( SaveState ). IColormapVisAsset IDataImpression Public interface for a single ABR visualization layer IDataImpressionRenderInfo IDataLoader Generic interface to fetch a RawDataset from somewhere IDataVariable<T> Lightweight / high level container for a data variable. Variables keep track of their ranges and path, but the actual Data Arrays are preserved within the original RawDataset. IFloatPrimitive Represents a numeric primitive value (e.g. 10deg, 96cm, or 4.6) IGlyphVisAsset IHasDataset Should be assigned to anything that is associated with a dataset (e.g. KeyData, Variables, and even DataImpressions once they have valid KeyData) IIntegerPrimitive Represents an integer primitive value IKeyData IKeyDataRenderInfo ILineTextureVisAsset IPrimitive Representative of a primitive element (usually used in ABR Inputs). These should match the primitive input types in the schema. IPrimitiveGradient ISurfaceTextureVisAsset ITextureGradient A VisAsset gradient described by a texture (or, series of textures) IVisAsset IVisAssetFetcher Generic fetcher that supports fetching all types of VisAssets from a particular source. IVisAssetGradient<T> A gradient consisting of VisAssets of any type. NOTE: Texture-based gradients (Surface/Line textures and colormaps) must have 4 or fewer elements. Enums ABRInputGenre Possible genres of a visualization input DataPath.DataPathType DataTopology Extension of Unity's MeshTopology enum that defines more generic \"data\" topology, including voxels. UpdateLevel How \"deep\" a particular update needs to go to fully address this ABR Input Delegates ABREngine.StateChangeDelegate Delegate callback that is called whenever the ABRState is updated. This is useful for applications that build on ABR and need to know when the state has been updated. OnStateChanged for usage."
  },
  "api/IVLab.ABREngine.HttpDataLoader.html": {
    "href": "api/IVLab.ABREngine.HttpDataLoader.html",
    "title": "Class HttpDataLoader | ABREngine",
    "keywords": "Class HttpDataLoader Load data from a remote source Inheritance Object HttpDataLoader Implements IDataLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class HttpDataLoader : IDataLoader Methods | Improve this Doc View Source LoadData(String) Declaration public RawDataset LoadData(string dataPath) Parameters Type Name Description String dataPath Returns Type Description RawDataset Implements IDataLoader"
  },
  "api/IVLab.ABREngine.HttpStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.HttpStateFileLoader.html",
    "title": "Class HttpStateFileLoader | ABREngine",
    "keywords": "Class HttpStateFileLoader Save/Load a state from a web URL Inheritance Object HttpStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class HttpStateFileLoader : IABRStateLoader Constructors | Improve this Doc View Source HttpStateFileLoader() Declaration public HttpStateFileLoader() Methods | Improve this Doc View Source GetState(String) Declaration public JObject GetState(string url) Parameters Type Name Description String url Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source SaveState(String, String) Declaration public void SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.HttpVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.HttpVisAssetFetcher.html",
    "title": "Class HttpVisAssetFetcher | ABREngine",
    "keywords": "Class HttpVisAssetFetcher Fetch VisAssets from a URL via HTTP Inheritance Object HttpVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class HttpVisAssetFetcher : IVisAssetFetcher Constructors | Improve this Doc View Source HttpVisAssetFetcher(String, String) Declaration public HttpVisAssetFetcher(string serverUrl, string appDataPath) Parameters Type Name Description String serverUrl String appDataPath Properties | Improve this Doc View Source VisAssetJson Declaration public string VisAssetJson { get; } Property Value Type Description String Methods | Improve this Doc View Source GetArtifactJson(Guid) Declaration public JObject GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String | Improve this Doc View Source GetArtifactPath(Guid) Declaration public string GetArtifactPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String | Improve this Doc View Source GetColormapTexture(Guid) Declaration public Texture2D GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetGlyphGameObject(Guid, JObject) Declaration public GameObject GetGlyphGameObject(Guid uuid, JObject lodInfo) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodInfo Returns Type Description UnityEngine.GameObject | Improve this Doc View Source GetGlyphNormalMapTexture(Guid, JObject) Declaration public Texture2D GetGlyphNormalMapTexture(Guid uuid, JObject lodInfo) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodInfo Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetLineTexture(Guid) Declaration public Texture2D GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetLocalArtifactJsonPath(Guid) Declaration public string GetLocalArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String | Improve this Doc View Source GetSurfaceNormalMap(Guid) Declaration public Texture2D GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetSurfaceTexture(Guid) Declaration public Texture2D GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.IABRInput.html": {
    "href": "api/IVLab.ABREngine.IABRInput.html",
    "title": "Interface IABRInput | ABREngine",
    "keywords": "Interface IABRInput Interface that includes every input to a data impression. Every type of ABR input should fit into a specific ABRInputGenre. Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IABRInput Properties | Improve this Doc View Source Genre Declaration ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre Methods | Improve this Doc View Source GetRawABRInput() Declaration RawABRInput GetRawABRInput() Returns Type Description RawABRInput"
  },
  "api/IVLab.ABREngine.IABRStateLoader.html": {
    "href": "api/IVLab.ABREngine.IABRStateLoader.html",
    "title": "Interface IABRStateLoader | ABREngine",
    "keywords": "Interface IABRStateLoader Generic state loader for ABR. Implementations should allow both retrieving a state ( GetState ) and saving a state ( SaveState ). Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IABRStateLoader Methods | Improve this Doc View Source GetState(String) Load a state based on some text (perhaps a JSON string, a file path, or URL) Declaration JObject GetState(string stateText) Parameters Type Name Description String stateText Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source SaveState(String, String) Save a serialized JSON state with a particular name Declaration void SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState"
  },
  "api/IVLab.ABREngine.IColormapVisAsset.html": {
    "href": "api/IVLab.ABREngine.IColormapVisAsset.html",
    "title": "Interface IColormapVisAsset | ABREngine",
    "keywords": "Interface IColormapVisAsset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IColormapVisAsset : IVisAsset, IABRInput Methods | Improve this Doc View Source GetColorGradient() Declaration Texture2D GetColorGradient() Returns Type Description UnityEngine.Texture2D"
  },
  "api/IVLab.ABREngine.IDataImpression.html": {
    "href": "api/IVLab.ABREngine.IDataImpression.html",
    "title": "Interface IDataImpression | ABREngine",
    "keywords": "Interface IDataImpression Public interface for a single ABR visualization layer Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IDataImpression : IHasDataset Properties | Improve this Doc View Source InputIndexer Used for getting/setting ABRInputs on this DataImpression Declaration ABRInputIndexerModule InputIndexer { get; } Property Value Type Description ABRInputIndexerModule | Improve this Doc View Source RenderHints Any hints to provide the rendering engine, such as if the impression should be hidden Declaration RenderHints RenderHints { get; set; } Property Value Type Description RenderHints | Improve this Doc View Source Uuid Unique identifier for this Data Impression Assigned on object creation Declaration Guid Uuid { get; set; } Property Value Type Description Guid Methods | Improve this Doc View Source Cleanup(EncodedGameObject) When this data impression is done being used, clean up after itself if necessary. This method may need access to the GameObject the data impression is applied to. Declaration void Cleanup(EncodedGameObject encodedGameObject) Parameters Type Name Description EncodedGameObject encodedGameObject | Improve this Doc View Source ComputeGeometry() Populate rendering information (Geometry) for the DataImpression. This is triggered by the DataImpressionGroup when an UpdateLevel.Data happens. This step is generally expensive . Declaration void ComputeGeometry() | Improve this Doc View Source Copy() Copy a data impression, giving a new Uuid Declaration IDataImpression Copy() Returns Type Description IDataImpression | Improve this Doc View Source CopyExisting(IDataImpression) Update this data impression from an existing (possibly temporary) one. Declaration void CopyExisting(IDataImpression other) Parameters Type Name Description IDataImpression other | Improve this Doc View Source HasTag(String) Return if this data impression has a particular string tag (for external purposes only, the engine currently does nothing with tags) Declaration bool HasTag(string tagName) Parameters Type Name Description String tagName Returns Type Description Boolean | Improve this Doc View Source SetupGameObject(EncodedGameObject) Take geometric rendering information computed in ComputeGeometry() and sets up proper game object(s) and components for this Data Impression. Transfers geometry into Unity format (e.g. a Mesh ). No geometric computations should happen in this method, and it should generally be lightweight . Declaration void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject | Improve this Doc View Source UpdateStyling(EncodedGameObject) Update the \"styling\" of an impression by sending each styling parameter to the shader. Occasionally will need to set per-vertex items like transforms. This method should generally be lightweight . Declaration void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject | Improve this Doc View Source UpdateVisibility(EncodedGameObject) Update the visibility of an impression (hidden or shown) Declaration void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject"
  },
  "api/IVLab.ABREngine.IDataImpressionRenderInfo.html": {
    "href": "api/IVLab.ABREngine.IDataImpressionRenderInfo.html",
    "title": "Interface IDataImpressionRenderInfo | ABREngine",
    "keywords": "Interface IDataImpressionRenderInfo Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IDataImpressionRenderInfo"
  },
  "api/IVLab.ABREngine.IDataLoader.html": {
    "href": "api/IVLab.ABREngine.IDataLoader.html",
    "title": "Interface IDataLoader | ABREngine",
    "keywords": "Interface IDataLoader Generic interface to fetch a RawDataset from somewhere Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IDataLoader Methods | Improve this Doc View Source LoadData(String) Load data specified by dataPath from a particular source Declaration RawDataset LoadData(string dataPath) Parameters Type Name Description String dataPath Returns Type Description RawDataset"
  },
  "api/IVLab.ABREngine.IDataVariable-1.html": {
    "href": "api/IVLab.ABREngine.IDataVariable-1.html",
    "title": "Interface IDataVariable<T> | ABREngine",
    "keywords": "Interface IDataVariable<T> Lightweight / high level container for a data variable. Variables keep track of their ranges and path, but the actual Data Arrays are preserved within the original RawDataset. Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IDataVariable<T> : IHasDataset, IABRInput Type Parameters Name Description T Properties | Improve this Doc View Source CustomizedRange Have this var's ranges been customized? Declaration bool CustomizedRange { get; set; } Property Value Type Description Boolean | Improve this Doc View Source OriginalRange Save the original range in case the user wants to reset it later. Declaration DataRange<T> OriginalRange { get; set; } Property Value Type Description DataRange <T> | Improve this Doc View Source Path The DataPath that represents this variable Declaration string Path { get; } Property Value Type Description String | Improve this Doc View Source Range Range is calculated by the DataManager when it imports a new dataset. Range is calculated from the smallest/largest values encountered across every instance of this variable, across all datasets. Declaration DataRange<T> Range { get; set; } Property Value Type Description DataRange <T> | Improve this Doc View Source SpecificRanges Dictionary of keyData paths that have specific ranges for this variable Declaration Dictionary<string, DataRange<T>> SpecificRanges { get; set; } Property Value Type Description Dictionary < String , DataRange <T>> Methods | Improve this Doc View Source GetArray(IKeyData) Get the actual data values in the context of this particular Key Data object Declaration T[] GetArray(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description T[] | Improve this Doc View Source IsPartOf(IKeyData) Determine if this variable is a part of the key data Declaration bool IsPartOf(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.IFloatPrimitive.html": {
    "href": "api/IVLab.ABREngine.IFloatPrimitive.html",
    "title": "Interface IFloatPrimitive | ABREngine",
    "keywords": "Interface IFloatPrimitive Represents a numeric primitive value (e.g. 10deg, 96cm, or 4.6) Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IFloatPrimitive : IPrimitive, IABRInput Properties | Improve this Doc View Source Units Declaration string Units { get; } Property Value Type Description String | Improve this Doc View Source Value Declaration float Value { get; } Property Value Type Description Single"
  },
  "api/IVLab.ABREngine.IGlyphVisAsset.html": {
    "href": "api/IVLab.ABREngine.IGlyphVisAsset.html",
    "title": "Interface IGlyphVisAsset | ABREngine",
    "keywords": "Interface IGlyphVisAsset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IGlyphVisAsset : IVisAsset, IABRInput Methods | Improve this Doc View Source GetMesh(Int32) Get the mesh at an LOD for a single glyph visasset Declaration Mesh GetMesh(int lod) Parameters Type Name Description Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetMesh(Int32, Int32) Get the mesh at a particular index of the gradient Declaration Mesh GetMesh(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetMesh(Single, Int32) Get the mesh at a particular percentage (t-value) through the gradient Declaration Mesh GetMesh(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description UnityEngine.Mesh | Improve this Doc View Source GetNormalMap(Int32) Get the normal map at an LOD for a single glyph visasset Declaration Texture2D GetNormalMap(int lod) Parameters Type Name Description Int32 lod Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetNormalMap(Int32, Int32) Get the normal map at a particular index of the gradient Declaration Texture2D GetNormalMap(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetNormalMap(Single, Int32) Get the normal map at a particular percentage (t-value) through the gradient Declaration Texture2D GetNormalMap(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description UnityEngine.Texture2D"
  },
  "api/IVLab.ABREngine.IHasDataset.html": {
    "href": "api/IVLab.ABREngine.IHasDataset.html",
    "title": "Interface IHasDataset | ABREngine",
    "keywords": "Interface IHasDataset Should be assigned to anything that is associated with a dataset (e.g. KeyData, Variables, and even DataImpressions once they have valid KeyData) Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IHasDataset Methods | Improve this Doc View Source GetDataset() Declaration Dataset GetDataset() Returns Type Description Dataset"
  },
  "api/IVLab.ABREngine.IIntegerPrimitive.html": {
    "href": "api/IVLab.ABREngine.IIntegerPrimitive.html",
    "title": "Interface IIntegerPrimitive | ABREngine",
    "keywords": "Interface IIntegerPrimitive Represents an integer primitive value Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IIntegerPrimitive : IPrimitive, IABRInput Properties | Improve this Doc View Source Units Declaration string Units { get; } Property Value Type Description String | Improve this Doc View Source Value Declaration int Value { get; } Property Value Type Description Int32"
  },
  "api/IVLab.ABREngine.IKeyData.html": {
    "href": "api/IVLab.ABREngine.IKeyData.html",
    "title": "Interface IKeyData | ABREngine",
    "keywords": "Interface IKeyData Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IKeyData : IABRInput Properties | Improve this Doc View Source Path The DataPath that represents this KeyData Declaration string Path { get; } Property Value Type Description String"
  },
  "api/IVLab.ABREngine.IKeyDataRenderInfo.html": {
    "href": "api/IVLab.ABREngine.IKeyDataRenderInfo.html",
    "title": "Interface IKeyDataRenderInfo | ABREngine",
    "keywords": "Interface IKeyDataRenderInfo Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IKeyDataRenderInfo"
  },
  "api/IVLab.ABREngine.ILineTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.ILineTextureVisAsset.html",
    "title": "Interface ILineTextureVisAsset | ABREngine",
    "keywords": "Interface ILineTextureVisAsset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface ILineTextureVisAsset : IVisAsset, IABRInput, ITextureGradient Methods | Improve this Doc View Source GetTexture() Obtain the first (or, only) texture in a multi-visasset gradient Declaration Texture2D GetTexture() Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Int32) Obtain the texture at a specific index within a multi-visasset gradient Declaration Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Single) Obtain the texture at a specific t-value (percentage) within a multi-visasset gradient Declaration Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description UnityEngine.Texture2D"
  },
  "api/IVLab.ABREngine.InstancedMeshRenderer.html": {
    "href": "api/IVLab.ABREngine.InstancedMeshRenderer.html",
    "title": "Class InstancedMeshRenderer | ABREngine",
    "keywords": "Class InstancedMeshRenderer Custom-tailored Instanced Mesh Renderer for rendering glyphs in ABR. When using this, developers should make sure that \"Use Instanced\" is checked on the material that these glyphs are using. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour InstancedMeshRenderer Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class InstancedMeshRenderer : MonoBehaviour Fields | Improve this Doc View Source block Declaration public MaterialPropertyBlock block Field Value Type Description UnityEngine.MaterialPropertyBlock | Improve this Doc View Source bounds Declaration public Bounds bounds Field Value Type Description UnityEngine.Bounds | Improve this Doc View Source cachedInstanceCount Declaration public int cachedInstanceCount Field Value Type Description Int32 | Improve this Doc View Source instanceCount Declaration public int instanceCount Field Value Type Description Int32 | Improve this Doc View Source instanceDensity Declaration public float instanceDensity Field Value Type Description Single | Improve this Doc View Source instanceLocalTransforms Declaration public Matrix4x4[] instanceLocalTransforms Field Value Type Description UnityEngine.Matrix4x4 [] | Improve this Doc View Source instanceMaterial Declaration public Material instanceMaterial Field Value Type Description UnityEngine.Material | Improve this Doc View Source instanceMesh Declaration public Mesh instanceMesh Field Value Type Description UnityEngine.Mesh | Improve this Doc View Source renderInfo Declaration public Vector4[] renderInfo Field Value Type Description Vector4 [] | Improve this Doc View Source subMeshIndex Declaration public int subMeshIndex Field Value Type Description Int32 | Improve this Doc View Source useInstanced Declaration public bool useInstanced Field Value Type Description Boolean"
  },
  "api/IVLab.ABREngine.InstancedSurfaceDataImpression.html": {
    "href": "api/IVLab.ABREngine.InstancedSurfaceDataImpression.html",
    "title": "Class InstancedSurfaceDataImpression | ABREngine",
    "keywords": "Class InstancedSurfaceDataImpression An Instanced Surface data impression (very similar to glyphs, except geometries are specified from data rather than VisAssets) Inheritance Object DataImpression InstancedSurfaceDataImpression Implements IDataImpression IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [ABRPlateType(\"Instanced Surface\")] public class InstancedSurfaceDataImpression : DataImpression, IDataImpression, IHasDataset Constructors | Improve this Doc View Source InstancedSurfaceDataImpression() Declaration public InstancedSurfaceDataImpression() | Improve this Doc View Source InstancedSurfaceDataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public InstancedSurfaceDataImpression(string uuid) Parameters Type Name Description String uuid Fields | Improve this Doc View Source colormap Colormap applied to the colorVariable . This example switches between a linear white-to-green colormap and a linear black-to-white colormap. Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset | Improve this Doc View Source colorVariable Scalar color variable applied to each point of this data impression. This example switches between X-axis monotonically increasing and Y-axis monotonically increasing. Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Style)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source forceOutlineColor Force the use of outlineColor even if there's a colormap applied to the data. This example alternates between a white-to-green linear colormap (false) and a solid purple-blue (true) Declaration public BooleanPrimitive forceOutlineColor Field Value Type Description BooleanPrimitive | Improve this Doc View Source instanceMesh The mesh to populate across all \"instanced transforms\" supplied by key data. Declaration public Mesh instanceMesh Field Value Type Description UnityEngine.Mesh | Improve this Doc View Source keyData KeyData for InstancedSurfaceDataImpression is an \"unofficial\" 5th type of - instanced matrices. These key data have no geometry, only a single variable that is a series of 4x4 matrices. Key data can be changed by modifying a RawDataset 's matrixArrays and matrixArrayNames . The key data transforms (like every other key data in ABR) can be updated frame-by-frame so long as <xref href=\"IVLab.ABREngine.RenderHints.DataChanged\" data-throw-if-not-resolved=\"false\"></xref>= true is specified. For example, here we are spinning the transforms along the y axis. Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public KeyData keyData Field Value Type Description KeyData | Improve this Doc View Source nanColor Override the color used for NaN values in this data impression. If not supplied, will use the defaultNanColor . Declaration public IColormapVisAsset nanColor Field Value Type Description IColormapVisAsset | Improve this Doc View Source outlineColor Color of the outline (when forceOutlineColor is true or there's no colormap / colorVariable ) Declaration public Color outlineColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source outlineWidth Width (in Unity world coords) of the outline Declaration public LengthPrimitive outlineWidth Field Value Type Description LengthPrimitive | Improve this Doc View Source showOutline Show/hide outline on this data impression Declaration public BooleanPrimitive showOutline Field Value Type Description BooleanPrimitive Properties | Improve this Doc View Source LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName | Improve this Doc View Source MaterialNames Declaration protected override string[] MaterialNames { get; } Property Value Type Description String [] Overrides DataImpression.MaterialNames Methods | Improve this Doc View Source Cleanup(EncodedGameObject) Declaration public override void Cleanup(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.Cleanup(EncodedGameObject) | Improve this Doc View Source ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() | Improve this Doc View Source GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() | Improve this Doc View Source SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) | Improve this Doc View Source UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) | Improve this Doc View Source UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.IntegerPrimitive.html": {
    "href": "api/IVLab.ABREngine.IntegerPrimitive.html",
    "title": "Class IntegerPrimitive | ABREngine",
    "keywords": "Class IntegerPrimitive Inheritance Object IntegerPrimitive Implements IIntegerPrimitive IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class IntegerPrimitive : IIntegerPrimitive, IPrimitive, IABRInput Constructors | Improve this Doc View Source IntegerPrimitive() Declaration public IntegerPrimitive() | Improve this Doc View Source IntegerPrimitive(Int32) Declaration public IntegerPrimitive(int value) Parameters Type Name Description Int32 value | Improve this Doc View Source IntegerPrimitive(String) Declaration public IntegerPrimitive(string value) Parameters Type Name Description String value Properties | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source ParsingRegex Declaration public virtual Regex ParsingRegex { get; } Property Value Type Description Regex | Improve this Doc View Source Units Declaration public virtual string Units { get; } Property Value Type Description String | Improve this Doc View Source Value Declaration public int Value { get; protected set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Implicit(Int32 to IntegerPrimitive) Declaration public static implicit operator IntegerPrimitive(int i) Parameters Type Name Description Int32 i Returns Type Description IntegerPrimitive Implements IIntegerPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.IPrimitive.html": {
    "href": "api/IVLab.ABREngine.IPrimitive.html",
    "title": "Interface IPrimitive | ABREngine",
    "keywords": "Interface IPrimitive Representative of a primitive element (usually used in ABR Inputs). These should match the primitive input types in the schema. Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IPrimitive : IABRInput Properties | Improve this Doc View Source ParsingRegex The regex to use to convert this from a string. Group named \"value\" should be the floating point number, group named \"units\" should be the units, if any. Declaration Regex ParsingRegex { get; } Property Value Type Description Regex Methods | Improve this Doc View Source ToString() Convert the primitive to a string so it can be sent along with the state Declaration string ToString() Returns Type Description String"
  },
  "api/IVLab.ABREngine.IPrimitiveGradient.html": {
    "href": "api/IVLab.ABREngine.IPrimitiveGradient.html",
    "title": "Interface IPrimitiveGradient | ABREngine",
    "keywords": "Interface IPrimitiveGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IPrimitiveGradient : IABRInput Properties | Improve this Doc View Source InputValue Declaration Guid InputValue { get; } Property Value Type Description Guid | Improve this Doc View Source Points Declaration float[] Points { get; } Property Value Type Description Single [] | Improve this Doc View Source Values Declaration string[] Values { get; } Property Value Type Description String []"
  },
  "api/IVLab.ABREngine.ISurfaceTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.ISurfaceTextureVisAsset.html",
    "title": "Interface ISurfaceTextureVisAsset | ABREngine",
    "keywords": "Interface ISurfaceTextureVisAsset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface ISurfaceTextureVisAsset : IVisAsset, IABRInput, ITextureGradient Methods | Improve this Doc View Source GetTexture() Obtain the first (or, only) texture in a multi-visasset gradient Declaration Texture2D GetTexture() Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Int32) Obtain the texture at a specific index within a multi-visasset gradient Declaration Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Single) Obtain the texture at a specific t-value (percentage) within a multi-visasset gradient Declaration Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description UnityEngine.Texture2D"
  },
  "api/IVLab.ABREngine.ITextureGradient.html": {
    "href": "api/IVLab.ABREngine.ITextureGradient.html",
    "title": "Interface ITextureGradient | ABREngine",
    "keywords": "Interface ITextureGradient A VisAsset gradient described by a texture (or, series of textures) Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface ITextureGradient Properties | Improve this Doc View Source BlendMaps Internal calculations for blend maps used for rendering Declaration GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap"
  },
  "api/IVLab.ABREngine.IVisAsset.html": {
    "href": "api/IVLab.ABREngine.IVisAsset.html",
    "title": "Interface IVisAsset | ABREngine",
    "keywords": "Interface IVisAsset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IVisAsset : IABRInput Properties | Improve this Doc View Source ImportTime (currently unused) The time that this VisAsset was imported into ABR Declaration DateTime ImportTime { get; set; } Property Value Type Description DateTime | Improve this Doc View Source Uuid Globally-unique identifier for this VisAsset Declaration Guid Uuid { get; set; } Property Value Type Description Guid | Improve this Doc View Source VisAssetCount How many VisAssets are in the gradient? (1 if it's not a gradient) Declaration int VisAssetCount { get; } Property Value Type Description Int32"
  },
  "api/IVLab.ABREngine.IVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.IVisAssetFetcher.html",
    "title": "Interface IVisAssetFetcher | ABREngine",
    "keywords": "Interface IVisAssetFetcher Generic fetcher that supports fetching all types of VisAssets from a particular source. Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IVisAssetFetcher Methods | Improve this Doc View Source GetArtifactJson(Guid) Declaration JObject GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source GetArtifactJsonPath(Guid) Declaration string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String | Improve this Doc View Source GetColormapTexture(Guid) Declaration Texture2D GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Texture2D | Improve this Doc View Source GetGlyphGameObject(Guid, JObject) Declaration GameObject GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description GameObject | Improve this Doc View Source GetGlyphNormalMapTexture(Guid, JObject) Declaration Texture2D GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description Texture2D | Improve this Doc View Source GetLineTexture(Guid) Declaration Texture2D GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Texture2D | Improve this Doc View Source GetSurfaceNormalMap(Guid) Declaration Texture2D GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Texture2D | Improve this Doc View Source GetSurfaceTexture(Guid) Declaration Texture2D GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Texture2D"
  },
  "api/IVLab.ABREngine.IVisAssetGradient-1.html": {
    "href": "api/IVLab.ABREngine.IVisAssetGradient-1.html",
    "title": "Interface IVisAssetGradient<T> | ABREngine",
    "keywords": "Interface IVisAssetGradient<T> A gradient consisting of VisAssets of any type. NOTE: Texture-based gradients (Surface/Line textures and colormaps) must have 4 or fewer elements. Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public interface IVisAssetGradient<T> : IVisAsset, IABRInput where T : IVisAsset Type Parameters Name Description T Properties | Improve this Doc View Source Stops List of gradient stops (length of VisAssets - 1) Declaration List<float> Stops { get; } Property Value Type Description List < Single > | Improve this Doc View Source VisAssets List of all VisAssets inside this gradient Declaration List<T> VisAssets { get; } Property Value Type Description List <T> Methods | Improve this Doc View Source Initialize(Guid, List<T>, List<Single>) Initialize this gradient with a UUID, some VisAssets, and some Stops. This is used instead of a constructor because it is much more flexible. Declaration void Initialize(Guid uuid, List<T> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List <T> visAssets List < Single > stops"
  },
  "api/IVLab.ABREngine.KeyData.html": {
    "href": "api/IVLab.ABREngine.KeyData.html",
    "title": "Class KeyData | ABREngine",
    "keywords": "Class KeyData Lightweight container for a data object. From Key Data objects, scalar and vector variables can be obtained (see the example below). Inheritance Object KeyData LineKeyData PointKeyData SurfaceKeyData VolumeKeyData Implements IKeyData IABRInput IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class KeyData : IKeyData, IABRInput, IHasDataset Examples KeyData can be used to easily get ScalarDataVariable s and VectorDataVariable s from a dataset. public class KeyDataExample : MonoBehaviour { void Start() { // Load some point data string dataPath = \"Demo/Wavelet/KeyData/Points\"; RawDataset rds = ABREngine.Instance.Data.LoadRawDataset<ResourcesDataLoader>(dataPath); // Import the dataset and name it accordingly KeyData kd = ABREngine.Instance.Data.ImportRawDataset(dataPath, rds); // Then, we can fetch variables: // ALL the variables kd.GetScalarVariables(); kd.GetVectorVariables(); // Only the names of the variables kd.GetScalarVariableNames(); kd.GetVectorVariableNames(); // Fetch a specific scalar or vector variable by its name kd.GetScalarVariable(\"XAxis\"); kd.GetVectorVariable(\"Inward\"); } } Constructors | Improve this Doc View Source KeyData(String) Declaration public KeyData(string path) Parameters Type Name Description String path Properties | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source Path Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source GetDataset() Declaration public Dataset GetDataset() Returns Type Description Dataset | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput | Improve this Doc View Source GetScalarVariable(String) Get a specific scalar variable that exists within this key data object Declaration public ScalarDataVariable GetScalarVariable(string varName) Parameters Type Name Description String varName Returns Type Description ScalarDataVariable | Improve this Doc View Source GetScalarVariableNames() Get the names of every scalar variable associated with this key data object Declaration public string[] GetScalarVariableNames() Returns Type Description String [] | Improve this Doc View Source GetScalarVariables() Get all of the scalar data variables associated with this key data object Declaration public ScalarDataVariable[] GetScalarVariables() Returns Type Description ScalarDataVariable [] | Improve this Doc View Source GetVectorVariable(String) Get a specific vector variable that exists within this key data object Declaration public VectorDataVariable GetVectorVariable(string varName) Parameters Type Name Description String varName Returns Type Description VectorDataVariable | Improve this Doc View Source GetVectorVariableNames() Get the names of every vector variable associated with this key data object Declaration public string[] GetVectorVariableNames() Returns Type Description String [] | Improve this Doc View Source GetVectorVariables() Get all of the vector data variables associated with this key data object Declaration public VectorDataVariable[] GetVectorVariables() Returns Type Description VectorDataVariable [] Implements IKeyData IABRInput IHasDataset"
  },
  "api/IVLab.ABREngine.KeyDataMapping.html": {
    "href": "api/IVLab.ABREngine.KeyDataMapping.html",
    "title": "Class KeyDataMapping | ABREngine",
    "keywords": "Class KeyDataMapping Mapping between topologies / types of geometry and actual key data Inheritance Object KeyDataMapping Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public static class KeyDataMapping Fields | Improve this Doc View Source typeMap Declaration public static Dictionary<DataTopology, Type> typeMap Field Value Type Description Dictionary < DataTopology , Type >"
  },
  "api/IVLab.ABREngine.Legends.ABRLegend.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegend.html",
    "title": "Class ABRLegend | ABREngine",
    "keywords": "Class ABRLegend Generate geometry, encodings, and legend images/GameObjects for ABR states Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ABRLegend Namespace : IVLab.ABREngine.Legends Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ABRLegend : MonoBehaviour Fields | Improve this Doc View Source entryOffset Declaration [Tooltip(\"Offset for each entry of the legend\")] public Vector3 entryOffset Field Value Type Description UnityEngine.Vector3 | Improve this Doc View Source legendEntry2DPrefab Declaration [Tooltip(\"Prefab for 2D (2 variable) legend entries\")] public GameObject legendEntry2DPrefab Field Value Type Description UnityEngine.GameObject | Improve this Doc View Source updateOnABRStateChange Declaration [Tooltip(\"Should the legend be updated whenever the ABR state is updated?\")] public bool updateOnABRStateChange Field Value Type Description Boolean Methods | Improve this Doc View Source CreateGlyphLegendEntry(SimpleGlyphDataImpression) Construct a glyph data impression for a glyph legend entry Declaration public static SimpleGlyphDataImpression CreateGlyphLegendEntry(SimpleGlyphDataImpression i) Parameters Type Name Description SimpleGlyphDataImpression i Returns Type Description SimpleGlyphDataImpression | Improve this Doc View Source CreateRibbonLegendEntry(SimpleLineDataImpression) Construct a ribbon data impression for a line legend entry Declaration public static SimpleLineDataImpression CreateRibbonLegendEntry(SimpleLineDataImpression i) Parameters Type Name Description SimpleLineDataImpression i Returns Type Description SimpleLineDataImpression | Improve this Doc View Source CreateSurfaceLegendEntry(SimpleSurfaceDataImpression) Construct a surface data impression for legend entry Declaration public static SimpleSurfaceDataImpression CreateSurfaceLegendEntry(SimpleSurfaceDataImpression i) Parameters Type Name Description SimpleSurfaceDataImpression i Returns Type Description SimpleSurfaceDataImpression | Improve this Doc View Source CreateVolumeLegendEntry(SimpleVolumeDataImpression) Construct a volume data impression for legend entry Declaration public static SimpleVolumeDataImpression CreateVolumeLegendEntry(SimpleVolumeDataImpression i) Parameters Type Name Description SimpleVolumeDataImpression i Returns Type Description SimpleVolumeDataImpression | Improve this Doc View Source UpdateLegend(JObject) Update the legend display in Unity from the current ABR state Declaration public void UpdateLegend(JObject state) Parameters Type Name Description Newtonsoft.Json.Linq.JObject state"
  },
  "api/IVLab.ABREngine.Legends.ABRLegendEntry.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegendEntry.html",
    "title": "Class ABRLegendEntry | ABREngine",
    "keywords": "Class ABRLegendEntry Controller for 3D GameObject-based legends for ABR Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ABRLegendEntry Namespace : IVLab.ABREngine.Legends Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ABRLegendEntry : MonoBehaviour Methods | Improve this Doc View Source SetTextLabel(ABRLegendEntry.Label, String) Declaration public void SetTextLabel(ABRLegendEntry.Label labelName, string text) Parameters Type Name Description ABRLegendEntry.Label labelName String text"
  },
  "api/IVLab.ABREngine.Legends.ABRLegendEntry.Label.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegendEntry.Label.html",
    "title": "Enum ABRLegendEntry.Label | ABREngine",
    "keywords": "Enum ABRLegendEntry.Label Namespace : IVLab.ABREngine.Legends Assembly : IVLab.ABREngine.Runtime.dll Syntax public enum Label Fields Name Description TextLabels Title XAxis XAxisMax XAxisMin YAxis YAxisMax YAxisMin"
  },
  "api/IVLab.ABREngine.Legends.ABRLegendGeometry.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegendGeometry.html",
    "title": "Class ABRLegendGeometry | ABREngine",
    "keywords": "Class ABRLegendGeometry Generate legend geometry for each data impression type defined in ABR. Methods in this class can generate the following variables and ranges: XAxis [0, 1] YAxis [0, 1] ZAxis [0, 1] Forward Up Inheritance Object ABRLegendGeometry Namespace : IVLab.ABREngine.Legends Assembly : IVLab.ABREngine.Runtime.dll Syntax public static class ABRLegendGeometry Methods | Improve this Doc View Source Glyphs(Int32) Generate a set of n glyphs to show a legend. Declaration public static RawDataset Glyphs(int variables) Parameters Type Name Description Int32 variables Number of variables to provide (1 var, 2 var) Returns Type Description RawDataset | Improve this Doc View Source Ribbons(Int32) Generate a set of ribbons to show in a legend. Declaration public static RawDataset Ribbons(int variables) Parameters Type Name Description Int32 variables Number of variables to provide (1 var, 2 var) Returns Type Description RawDataset | Improve this Doc View Source Surface() Generate a surface to show a legend Declaration public static RawDataset Surface() Returns Type Description RawDataset | Improve this Doc View Source Volume() Generate a \"spherical\" volume for legends Declaration public static RawDataset Volume() Returns Type Description RawDataset"
  },
  "api/IVLab.ABREngine.Legends.html": {
    "href": "api/IVLab.ABREngine.Legends.html",
    "title": "Namespace IVLab.ABREngine.Legends | ABREngine",
    "keywords": "Namespace IVLab.ABREngine.Legends Classes ABRLegend Generate geometry, encodings, and legend images/GameObjects for ABR states ABRLegendEntry Controller for 3D GameObject-based legends for ABR ABRLegendGeometry Generate legend geometry for each data impression type defined in ABR. Methods in this class can generate the following variables and ranges: XAxis [0, 1] YAxis [0, 1] ZAxis [0, 1] Forward Up Enums ABRLegendEntry.Label"
  },
  "api/IVLab.ABREngine.LengthPrimitive.html": {
    "href": "api/IVLab.ABREngine.LengthPrimitive.html",
    "title": "Class LengthPrimitive | ABREngine",
    "keywords": "Class LengthPrimitive Inheritance Object FloatPrimitive LengthPrimitive Implements IFloatPrimitive IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class LengthPrimitive : FloatPrimitive, IFloatPrimitive, IPrimitive, IABRInput Constructors | Improve this Doc View Source LengthPrimitive(Single) Declaration public LengthPrimitive(float value) Parameters Type Name Description Single value | Improve this Doc View Source LengthPrimitive(String) Declaration public LengthPrimitive(string value) Parameters Type Name Description String value Properties | Improve this Doc View Source ParsingRegex Declaration public override Regex ParsingRegex { get; } Property Value Type Description Regex Overrides FloatPrimitive.ParsingRegex | Improve this Doc View Source Units Declaration public override string Units { get; } Property Value Type Description String Overrides FloatPrimitive.Units Operators | Improve this Doc View Source Implicit(Single to LengthPrimitive) Declaration public static implicit operator LengthPrimitive(float f) Parameters Type Name Description Single f Returns Type Description LengthPrimitive Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.LineKeyData.html": {
    "href": "api/IVLab.ABREngine.LineKeyData.html",
    "title": "Class LineKeyData | ABREngine",
    "keywords": "Class LineKeyData Inheritance Object KeyData LineKeyData Implements IHasDataset IKeyData IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class LineKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors | Improve this Doc View Source LineKeyData(String) Declaration public LineKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "api/IVLab.ABREngine.LineTextureGradient.html": {
    "href": "api/IVLab.ABREngine.LineTextureGradient.html",
    "title": "Class LineTextureGradient | ABREngine",
    "keywords": "Class LineTextureGradient Inheritance Object VisAsset VisAssetGradient LineTextureGradient Implements ILineTextureVisAsset IVisAssetGradient < LineTextureVisAsset > IVisAsset IABRInput ITextureGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class LineTextureGradient : VisAssetGradient, ILineTextureVisAsset, IVisAssetGradient<LineTextureVisAsset>, IVisAsset, IABRInput, ITextureGradient Properties | Improve this Doc View Source BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap | Improve this Doc View Source Stops Declaration public List<float> Stops { get; } Property Value Type Description List < Single > | Improve this Doc View Source VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 | Improve this Doc View Source VisAssets Declaration public List<LineTextureVisAsset> VisAssets { get; } Property Value Type Description List < LineTextureVisAsset > Methods | Improve this Doc View Source GetTexture() Declaration public Texture2D GetTexture() Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source Initialize(Guid, List<LineTextureVisAsset>, List<Single>) Declaration public void Initialize(Guid uuid, List<LineTextureVisAsset> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List < LineTextureVisAsset > visAssets List < Single > stops Implements ILineTextureVisAsset IVisAssetGradient<T> IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.LineTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.LineTextureVisAsset.html",
    "title": "Class LineTextureVisAsset | ABREngine",
    "keywords": "Class LineTextureVisAsset Inheritance Object VisAsset LineTextureVisAsset Implements ILineTextureVisAsset IVisAsset IABRInput ITextureGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class LineTextureVisAsset : VisAsset, ILineTextureVisAsset, IVisAsset, IABRInput, ITextureGradient Constructors | Improve this Doc View Source LineTextureVisAsset() Declaration public LineTextureVisAsset() | Improve this Doc View Source LineTextureVisAsset(Guid, Texture2D) Declaration public LineTextureVisAsset(Guid uuid, Texture2D texture) Parameters Type Name Description Guid uuid UnityEngine.Texture2D texture | Improve this Doc View Source LineTextureVisAsset(Texture2D) Declaration public LineTextureVisAsset(Texture2D texture) Parameters Type Name Description UnityEngine.Texture2D texture Properties | Improve this Doc View Source BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap | Improve this Doc View Source Texture Declaration public Texture2D Texture { get; } Property Value Type Description UnityEngine.Texture2D | Improve this Doc View Source VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetTexture() Declaration public Texture2D GetTexture() Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description UnityEngine.Texture2D Implements ILineTextureVisAsset IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.MediaDataLoader.html": {
    "href": "api/IVLab.ABREngine.MediaDataLoader.html",
    "title": "Class MediaDataLoader | ABREngine",
    "keywords": "Class MediaDataLoader Load data from the ABREngine Media directory (specified in ABRConfig) Inheritance Object MediaDataLoader Implements IDataLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class MediaDataLoader : IDataLoader Methods | Improve this Doc View Source LoadData(String) Declaration public RawDataset LoadData(string dataPath) Parameters Type Name Description String dataPath Returns Type Description RawDataset Implements IDataLoader"
  },
  "api/IVLab.ABREngine.Notifier.html": {
    "href": "api/IVLab.ABREngine.Notifier.html",
    "title": "Class Notifier | ABREngine",
    "keywords": "Class Notifier Notifier for ABR state / cache updates, based on WebSockets. Inheritance Object Notifier Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class Notifier Constructors | Improve this Doc View Source Notifier(Uri) Declaration public Notifier(Uri serverPath) Parameters Type Name Description Uri serverPath Methods | Improve this Doc View Source ForceDisconnect() Declaration public void ForceDisconnect() | Improve this Doc View Source Init() Declaration public void Init() | Improve this Doc View Source Stop() Declaration public void Stop()"
  },
  "api/IVLab.ABREngine.PathStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.PathStateFileLoader.html",
    "title": "Class PathStateFileLoader | ABREngine",
    "keywords": "Class PathStateFileLoader Save/Load a state to a JSON file somewhere on disk Inheritance Object PathStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class PathStateFileLoader : IABRStateLoader Constructors | Improve this Doc View Source PathStateFileLoader() Declaration public PathStateFileLoader() Methods | Improve this Doc View Source GetState(String) Declaration public JObject GetState(string stateFilePath) Parameters Type Name Description String stateFilePath Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source SaveState(String, String) Declaration public void SaveState(string outPath, string serializedState) Parameters Type Name Description String outPath String serializedState Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.PercentPrimitive.html": {
    "href": "api/IVLab.ABREngine.PercentPrimitive.html",
    "title": "Class PercentPrimitive | ABREngine",
    "keywords": "Class PercentPrimitive Inheritance Object FloatPrimitive PercentPrimitive Implements IFloatPrimitive IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class PercentPrimitive : FloatPrimitive, IFloatPrimitive, IPrimitive, IABRInput Constructors | Improve this Doc View Source PercentPrimitive(Single) Declaration public PercentPrimitive(float value) Parameters Type Name Description Single value | Improve this Doc View Source PercentPrimitive(String) Declaration public PercentPrimitive(string value) Parameters Type Name Description String value Properties | Improve this Doc View Source ParsingRegex Declaration public override Regex ParsingRegex { get; } Property Value Type Description Regex Overrides FloatPrimitive.ParsingRegex | Improve this Doc View Source Units Declaration public override string Units { get; } Property Value Type Description String Overrides FloatPrimitive.Units Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides FloatPrimitive.ToString() Operators | Improve this Doc View Source Implicit(Single to PercentPrimitive) Declaration public static implicit operator PercentPrimitive(float f) Parameters Type Name Description Single f Returns Type Description PercentPrimitive Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.PointKeyData.html": {
    "href": "api/IVLab.ABREngine.PointKeyData.html",
    "title": "Class PointKeyData | ABREngine",
    "keywords": "Class PointKeyData Inheritance Object KeyData PointKeyData Implements IHasDataset IKeyData IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class PointKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors | Improve this Doc View Source PointKeyData(String) Declaration public PointKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "api/IVLab.ABREngine.PrimitiveGradient.html": {
    "href": "api/IVLab.ABREngine.PrimitiveGradient.html",
    "title": "Class PrimitiveGradient | ABREngine",
    "keywords": "Class PrimitiveGradient A simple gradient of points associated with values. Inheritance Object PrimitiveGradient Implements IPrimitiveGradient IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class PrimitiveGradient : IPrimitiveGradient, IABRInput Remarks At present, this class is expressly used to describe the opacitymap . In the future this may change, and when that happens this class will likely change as well. Constructors | Improve this Doc View Source PrimitiveGradient(Guid, Single[], String[]) Declaration public PrimitiveGradient(Guid inputValue, float[] points, string[] values) Parameters Type Name Description Guid inputValue Single [] points String [] values Properties | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source InputValue Declaration public Guid InputValue { get; } Property Value Type Description Guid | Improve this Doc View Source Points Declaration public float[] Points { get; } Property Value Type Description Single [] | Improve this Doc View Source Values Declaration public string[] Values { get; } Property Value Type Description String [] Methods | Improve this Doc View Source Default() Return a default 0%-100% gradient at 0.0 and 1.0 Declaration public static PrimitiveGradient Default() Returns Type Description PrimitiveGradient | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput Implements IPrimitiveGradient IABRInput"
  },
  "api/IVLab.ABREngine.RawABRInput.html": {
    "href": "api/IVLab.ABREngine.RawABRInput.html",
    "title": "Class RawABRInput | ABREngine",
    "keywords": "Class RawABRInput Raw string values from a state JSON being passed to ABR Matches InputValue definition from ABR State Schema Parameters can have one or more inputs Inheritance Object RawABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class RawABRInput Fields | Improve this Doc View Source inputGenre What type of input is it (variable, visasset, etc.) Declaration public string inputGenre Field Value Type Description String | Improve this Doc View Source inputType String representation of the C# type this ABR input is Declaration public string inputType Field Value Type Description String | Improve this Doc View Source inputValue The actual value of the input (string representation) Declaration public string inputValue Field Value Type Description String | Improve this Doc View Source parameterName The name of the parent parameter this input is associated with Declaration public string parameterName Field Value Type Description String"
  },
  "api/IVLab.ABREngine.RawDataset.BinaryData.html": {
    "href": "api/IVLab.ABREngine.RawDataset.BinaryData.html",
    "title": "Class RawDataset.BinaryData | ABREngine",
    "keywords": "Class RawDataset.BinaryData Actual geometric representation of the data to load from a file / socket Inheritance Object RawDataset.BinaryData Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class BinaryData Constructors | Improve this Doc View Source BinaryData(RawDataset.JsonHeader, Byte[]) Declaration public BinaryData(RawDataset.JsonHeader bdh, byte[] bytes) Parameters Type Name Description RawDataset.JsonHeader bdh Byte [] bytes | Improve this Doc View Source BinaryData(RawDataset.JsonHeader, String) Declaration public BinaryData(RawDataset.JsonHeader bdh, string file) Parameters Type Name Description RawDataset.JsonHeader bdh String file Properties | Improve this Doc View Source index_array Declaration public int[] index_array { get; set; } Property Value Type Description Int32 [] | Improve this Doc View Source scalar_arrays Declaration public float[][] scalar_arrays { get; set; } Property Value Type Description Single [][] | Improve this Doc View Source vector_arrays Declaration public float[][] vector_arrays { get; set; } Property Value Type Description Single [][] | Improve this Doc View Source vertices Declaration public float[] vertices { get; set; } Property Value Type Description Single [] Methods | Improve this Doc View Source Decode(RawDataset.JsonHeader, Byte[]) Declaration public void Decode(RawDataset.JsonHeader bdh, byte[] bytes) Parameters Type Name Description RawDataset.JsonHeader bdh Byte [] bytes | Improve this Doc View Source Encode(RawDataset.JsonHeader, in Vector3[], in Int32[], in Int32[], in Int32[], in SerializableFloatArray[], in SerializableVectorArray[]) Declaration public static byte[] Encode(RawDataset.JsonHeader bdh, in Vector3[] vertices, in int[] indices, in int[] cellIndexOffsets, in int[] cellIndexCounts, in SerializableFloatArray[] scalars, in SerializableVectorArray[] vectors) Parameters Type Name Description RawDataset.JsonHeader bdh Vector3 [] vertices Int32 [] indices Int32 [] cellIndexOffsets Int32 [] cellIndexCounts SerializableFloatArray [] scalars SerializableVectorArray [] vectors Returns Type Description Byte []"
  },
  "api/IVLab.ABREngine.RawDataset.html": {
    "href": "api/IVLab.ABREngine.RawDataset.html",
    "title": "Class RawDataset | ABREngine",
    "keywords": "Class RawDataset The raw variable arrays and geometry for a Data Object. RawDatasets can be loaded from a pair of .json and .bin files (JsonHeader and BinaryData, respectively). This RawDataset defines the specification for each of these files. RawDataset is not to be confused with Dataset , which represents a collection of RawDatasets which share a coordinate space, key data, and variables. Inheritance Object RawDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [Serializable] public class RawDataset Examples A simple 4-vertex plane with no variables can be created like this: RawDataset ds = new RawDataset(); ds.meshTopology = MeshTopology.Triangles; ds.bounds = new Bounds(Vector3.zero, Vector3.one * 2.0f); ds.vectorArrays = new SerializableVectorArray[0]; ds.vectorArrayNames = new string[0]; ds.scalarArrays = new SerializableFloatArray[0]; ds.scalarArrayNames = new string[0]; ds.scalarMins = new float[0]; ds.scalarMaxes = new float[0]; // Construct the vertices Vector3[] vertices = { new Vector3(-1, 0, -1), // 0 new Vector3( 1, 0, -1), // 1 new Vector3(-1, 0, 1), // 2 new Vector3( 1, 0, 1), // 3 }; ds.vertexArray = vertices; // Construct triangle indices/faces - LEFT HAND RULE, outward-facing normals int[] indices = { // Bottom face 0, 1, 3, 0, 3, 2 }; ds.indexArray = indices; // How many verts per cell are there? (each triangle is a cell) int[] cellIndexCounts = { 3, 3 }; ds.cellIndexCounts = cellIndexCounts; // Where does each cell begin? int[] cellIndexOffsets = { 0, 3 }; ds.cellIndexOffsets = cellIndexOffsets; Constructors | Improve this Doc View Source RawDataset() Declaration public RawDataset() | Improve this Doc View Source RawDataset(RawDataset.JsonHeader, RawDataset.BinaryData) Declaration public RawDataset(RawDataset.JsonHeader jh, RawDataset.BinaryData bd) Parameters Type Name Description RawDataset.JsonHeader jh RawDataset.BinaryData bd Fields | Improve this Doc View Source bounds Declaration [SerializeField] public Bounds bounds Field Value Type Description Bounds | Improve this Doc View Source cellIndexCounts Declaration [SerializeField] public int[] cellIndexCounts Field Value Type Description Int32 [] | Improve this Doc View Source cellIndexOffsets Declaration [SerializeField] public int[] cellIndexOffsets Field Value Type Description Int32 [] | Improve this Doc View Source dataTopology Declaration [SerializeField] public DataTopology dataTopology Field Value Type Description DataTopology | Improve this Doc View Source dimensions Declaration [SerializeField] public Vector3Int dimensions Field Value Type Description Vector3Int | Improve this Doc View Source indexArray Declaration [SerializeField] public int[] indexArray Field Value Type Description Int32 [] | Improve this Doc View Source matrixArrayNames Declaration public string[] matrixArrayNames Field Value Type Description String [] | Improve this Doc View Source matrixArrays Declaration public Matrix4x4[][] matrixArrays Field Value Type Description Matrix4x4 [][] | Improve this Doc View Source scalarArrayNames Declaration [SerializeField] public string[] scalarArrayNames Field Value Type Description String [] | Improve this Doc View Source scalarArrays Declaration [SerializeField] public SerializableFloatArray[] scalarArrays Field Value Type Description SerializableFloatArray [] | Improve this Doc View Source scalarMaxes Declaration [SerializeField] public float[] scalarMaxes Field Value Type Description Single [] | Improve this Doc View Source scalarMins Declaration [SerializeField] public float[] scalarMins Field Value Type Description Single [] | Improve this Doc View Source vectorArrayNames Declaration [SerializeField] public string[] vectorArrayNames Field Value Type Description String [] | Improve this Doc View Source vectorArrays Declaration [SerializeField] public SerializableVectorArray[] vectorArrays Field Value Type Description SerializableVectorArray [] | Improve this Doc View Source vertexArray Declaration [SerializeField] public Vector3[] vertexArray Field Value Type Description Vector3 [] Methods | Improve this Doc View Source GetMatrixArray(String) Declaration public Matrix4x4[] GetMatrixArray(string name) Parameters Type Name Description String name Returns Type Description Matrix4x4 [] | Improve this Doc View Source GetScalarArray(String) Declaration public float[] GetScalarArray(string name) Parameters Type Name Description String name Returns Type Description Single [] | Improve this Doc View Source GetScalarMax(String) Declaration public float GetScalarMax(string name) Parameters Type Name Description String name Returns Type Description Single | Improve this Doc View Source GetScalarMin(String) Declaration public float GetScalarMin(string name) Parameters Type Name Description String name Returns Type Description Single | Improve this Doc View Source GetVectorArray(String) Declaration public Vector3[] GetVectorArray(string name) Parameters Type Name Description String name Returns Type Description Vector3 [] | Improve this Doc View Source GetVectorMax(String) Declaration public Vector3 GetVectorMax(string name) Parameters Type Name Description String name Returns Type Description Vector3 | Improve this Doc View Source GetVectorMin(String) Declaration public Vector3 GetVectorMin(string name) Parameters Type Name Description String name Returns Type Description Vector3 | Improve this Doc View Source HasScalarArray(String) Declaration public bool HasScalarArray(string name) Parameters Type Name Description String name Returns Type Description Boolean | Improve this Doc View Source HasVectorArray(String) Declaration public bool HasVectorArray(string name) Parameters Type Name Description String name Returns Type Description Boolean | Improve this Doc View Source ToFilePair() Convert this raw dataset into a .json and .bin pair representation. Does not save the file, only returns a tuple. Declaration public Tuple<string, byte[]> ToFilePair() Returns Type Description Tuple < String , Byte []> Returns a tuple (json data header, binary data file contents)"
  },
  "api/IVLab.ABREngine.RawDataset.JsonHeader.html": {
    "href": "api/IVLab.ABREngine.RawDataset.JsonHeader.html",
    "title": "Class RawDataset.JsonHeader | ABREngine",
    "keywords": "Class RawDataset.JsonHeader Header that contains metadata for a particular RawDataset Inheritance Object RawDataset.JsonHeader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class JsonHeader Fields | Improve this Doc View Source bounds Declaration public Bounds bounds Field Value Type Description Bounds | Improve this Doc View Source dimensions Declaration public int[] dimensions Field Value Type Description Int32 [] | Improve this Doc View Source meshTopology Declaration public DataTopology meshTopology Field Value Type Description DataTopology | Improve this Doc View Source num_cell_indices Declaration public int num_cell_indices Field Value Type Description Int32 | Improve this Doc View Source num_cells Declaration public int num_cells Field Value Type Description Int32 | Improve this Doc View Source num_points Declaration public int num_points Field Value Type Description Int32 | Improve this Doc View Source scalarArrayNames Declaration public string[] scalarArrayNames Field Value Type Description String [] | Improve this Doc View Source scalarMaxes Declaration public float[] scalarMaxes Field Value Type Description Single [] | Improve this Doc View Source scalarMins Declaration public float[] scalarMins Field Value Type Description Single [] | Improve this Doc View Source vectorArrayNames Declaration public string[] vectorArrayNames Field Value Type Description String []"
  },
  "api/IVLab.ABREngine.RawDatasetAdapter.html": {
    "href": "api/IVLab.ABREngine.RawDatasetAdapter.html",
    "title": "Class RawDatasetAdapter | ABREngine",
    "keywords": "Class RawDatasetAdapter Adapter for converting other formats to ABRDataFormat. For example, lists of points => ribbons, or lists of points => glyphs. See the examples below for usage of each of these methods. Inheritance Object RawDatasetAdapter Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public static class RawDatasetAdapter Remarks Note: None of these methods will actually import your data into ABR! These are simply a convenience for converting data into ABR format. After you call one of the RawDatasetAdapter methods, you MUST import it using ABREngine.Instance.Data.ImportRawDataset(...) to be able to use it in ABR! Methods | Improve this Doc View Source GridPointsToSurface(List<Vector3>, Vector2Int, Bounds, Dictionary<String, List<Single>>) Convert a grid (2.5D) of points into an ABR surface data object. Declaration public static RawDataset GridPointsToSurface(List<Vector3> points, Vector2Int gridDimension, Bounds dataBounds, Dictionary<string, List<float>> scalarVars) Parameters Type Name Description List < Vector3 > points Vertices of the desired mesh. Points are assumed to be in reverse column-major order, i.e. starting from -x, -z and ending at +x +z. Vector2Int gridDimension Dimensions of the mesh grid that the points make up (x vertex count and z vertex count). Bounds dataBounds The bounds of the actual vertices of the data. Dictionary < String , List < Single >> scalarVars Mapping from name => float array for every scalar variable attached to the data. Float arrays are assumed to have the same ordering as points . Returns Type Description RawDataset Examples In this example, we create a surface from a Cube GameObject primitive. public class RawDatasetAdapterExample : MonoBehaviour { void Start() { // 3x3 2.5D grid of points. Note their arrangement in x-based \"columns\" // -- this is a grid in the X-Z plane where only the y-coordinate is // varying. List<Vector3> gridVertices = new List<Vector3> { // column 1 new Vector3(0.0f, 0.5f, 0.0f), new Vector3(0.0f, 0.6f, 0.1f), new Vector3(0.0f, 0.4f, 0.2f), // column 2 new Vector3(0.1f, 0.3f, 0.0f), new Vector3(0.1f, 0.2f, 0.1f), new Vector3(0.1f, 0.3f, 0.2f), // column 3 new Vector3(0.2f, 0.0f, 0.0f), new Vector3(0.2f, 0.3f, 0.1f), new Vector3(0.2f, 0.1f, 0.2f), }; // Dimenisions of the grid vertices (3x3) Vector2Int dimensions = new Vector2Int(3, 3); // Each data point corresponds with a vertex above List<float> data = new List<float> { 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 2.0f, 2.0f, 2.0f, }; // Save the var so we can use it Dictionary<string, List<float>> scalarVars = new Dictionary<string, List<float>> {{ \"someData\", data }}; // Provide a generous bounding box Bounds b = new Bounds(Vector3.zero, Vector3.one); RawDataset abrSurface = RawDatasetAdapter.GridPointsToSurface(gridVertices, dimensions, b, scalarVars); // Or, if you don't have any variables: RawDataset abrSurface2 = RawDatasetAdapter.GridPointsToSurface(gridVertices, dimensions, b, null); } } | Improve this Doc View Source MeshToSurface(Mesh, Dictionary<String, List<Single>>) Create a surfaces data object from a Unity mesh Declaration public static RawDataset MeshToSurface(Mesh mesh, Dictionary<string, List<float>> scalarVars) Parameters Type Name Description Mesh mesh The original mesh Dictionary < String , List < Single >> scalarVars Returns Type Description RawDataset Examples In this example, we load a triangle GameObject from our existing Unity scene and associate some data with it. public class RawDatasetAdapterExample : MonoBehaviour { void Start() { Mesh m = GameObject.Find(\"SomeTriangle\").GetComponent<MeshFilter>().mesh; // 3 vertices with scalar data values (assumed to have same number of vertices as the mesh, and the same order too) List<float> someVariable = new List<float> { 0.0f, 1.0f, 0.5f }; Dictionary<string, List<float>> scalarVars = new Dictionary<string, List<float>> {{ \"someVariable\", someVariable }}; RawDataset meshSurface = RawDatasetAdapter.MeshToSurface(m, scalarVars); } } | Improve this Doc View Source ObjToSurface(String) Load data from the data source. Declaration public static RawDataset ObjToSurface(string filePath) Parameters Type Name Description String filePath Data source file Returns Type Description RawDataset Examples In this example, we load in a 3D model in OBJ format and convert it into ABR format. public class RawDatasetAdapterExample : MonoBehaviour { void Start() { RawDataset objSurface = RawDatasetAdapter.ObjToSurface(\"C:/Users/me/Desktop/cube.obj\"); } } | Improve this Doc View Source PointsToLine(List<List<Vector3>>, Bounds, Dictionary<String, List<Single>>) Define a Line dataset from a bunch of points. Don't try to assume or calculate the full bounds for the imported data objects - explictly ask the user for them. Declaration public static RawDataset PointsToLine(List<List<Vector3>> lines, Bounds dataBounds, Dictionary<string, List<float>> scalarVars) Parameters Type Name Description List < List < Vector3 >> lines One, or several, lines. Each line consists of a series of points. Bounds dataBounds The center and extents of the data in the original coordinate space Dictionary < String , List < Single >> scalarVars Mapping of variable name => array of floating point numbers for each scalar variable attached to the lines. Values will be applied at each point along each segment of each line. Returns Type Description RawDataset | Improve this Doc View Source PointsToLine(List<Vector3>, Bounds, Dictionary<String, List<Single>>) Define a Line dataset from a bunch of points. Don't try to assume or calculate the full bounds for the imported data objects - explictly ask the user for them. This method is a shortcut for a single connected line. Declaration public static RawDataset PointsToLine(List<Vector3> line, Bounds dataBounds, Dictionary<string, List<float>> scalarVars) Parameters Type Name Description List < Vector3 > line Bounds dataBounds The center and extents of the data in the original coordinate space Dictionary < String , List < Single >> scalarVars Mapping of variable name => array of floating point numbers for each scalar variable attached to the lines. Values will be applied at each point along each segment of each line. Returns Type Description RawDataset Examples In this example, we create a single line from a series of vertices that have data values associated with them. public class RawDatasetAdapterExample : MonoBehaviour { void Start() { List<Vector3> points = new List<Vector3> { new Vector3(0.0f, 0.0f, 0.0f), new Vector3(0.1f, 0.1f, 0.0f), new Vector3(0.2f, 0.2f, 0.0f), new Vector3(0.3f, 0.3f, 0.0f), new Vector3(0.4f, 0.4f, 0.0f), new Vector3(0.5f, 0.5f, 0.0f) }; // Each data point corresponds with a vertex above List<float> data = new List<float> { 0.0f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f }; // Save the scalar var so we can use it Dictionary<string, List<float>> scalarVars = new Dictionary<string, List<float>> {{ \"someData\", data }}; // Provide a generous bounding box Bounds b = new Bounds(Vector3.zero, Vector3.one); RawDataset abrLine = RawDatasetAdapter.PointsToLine(points, b, scalarVars); // Or, if you don't have any variables: RawDataset abrLine2 = RawDatasetAdapter.PointsToLine(points, b, null); } } | Improve this Doc View Source PointsToPoints(List<Vector3>, Bounds, Dictionary<String, List<Single>>, Dictionary<String, List<Vector3>>) Define a Point dataset from a bunch of points. Don't try to assume or calculate the full bounds for the imported data objects - explictly ask the user for them. Declaration public static RawDataset PointsToPoints(List<Vector3> points, Bounds dataBounds, Dictionary<string, List<float>> scalarVars, Dictionary<string, List<Vector3>> vectorVars) Parameters Type Name Description List < Vector3 > points Source points in the original coordinate space Bounds dataBounds Center and extent of the data, in the original coordinate space Dictionary < String , List < Single >> scalarVars Mapping of variable name => array of floating point numbers for each scalar variable attached to these points. Values will be applied at each point of the dataset. Dictionary < String , List < Vector3 >> vectorVars Mapping of variable name => array of Vector3 for each vector variable attached to these points. Values will be applied at each point of the dataset. Returns Type Description RawDataset Examples In this example, we create a points data object from a series of vertices. public class RawDatasetAdapterExample : MonoBehaviour { void Start() { List<Vector3> points = new List<Vector3> { new Vector3(0.0f, 0.0f, 0.0f), new Vector3(0.1f, 0.1f, 0.0f), new Vector3(0.2f, 0.2f, 0.0f), new Vector3(0.3f, 0.3f, 0.0f), new Vector3(0.4f, 0.4f, 0.0f), new Vector3(0.5f, 0.5f, 0.0f) }; // Each data point corresponds with a vertex above List<float> data = new List<float> { 0.0f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f }; // Some vector data corresponding with each vertex List<Vector3> vectorData = new List<Vector3> { Vector3.up, Vector3.up, Vector3.up, Vector3.down, Vector3.down, Vector3.down, }; // Save the vars so we can use them Dictionary<string, List<float>> scalarVars = new Dictionary<string, List<float>> {{ \"someData\", data }}; Dictionary<string, List<Vector3>> vectorVars = new Dictionary<string, List<Vector3>> {{ \"someVectorData\", vectorData }}; // Provide a generous bounding box Bounds b = new Bounds(Vector3.zero, Vector3.one); RawDataset abrPoints = RawDatasetAdapter.PointsToPoints(points, b, scalarVars, vectorVars); // Or, if you don't have any variables: RawDataset abrPoints2 = RawDatasetAdapter.PointsToPoints(points, b, null, null); } } | Improve this Doc View Source UnityPrimitiveToSurface(PrimitiveType) Create a Surface data object from a Unity primitive. By default, includes XAxis, YAxis, and ZAxis scalar variables. Declaration public static RawDataset UnityPrimitiveToSurface(PrimitiveType primitive) Parameters Type Name Description PrimitiveType primitive Returns Type Description RawDataset Examples In this example, we create a surface from a Cube GameObject primitive. public class RawDatasetAdapterExample : MonoBehaviour { void Start() { RawDataset cubeSurface = RawDatasetAdapter.UnityPrimitiveToSurface(PrimitiveType.Cube); } } | Improve this Doc View Source VoxelsToVolume(Single[], String, Vector3Int, Bounds) Convert a 1D array into an ABR volume data object. There is assumed to be a single scalar variable described by the array voxels . Declaration public static RawDataset VoxelsToVolume(float[] voxels, string voxelsName, Vector3Int volumeDimensions, Bounds dataBounds) Parameters Type Name Description Single [] voxels Individual scalar values that make up the volume. All voxels are assumed to be the same size. String voxelsName Name of the variable the voxels are storing Vector3Int volumeDimensions Dimensions of the volume (number of steps in x, y, and z). Bounds dataBounds The bounds of volume in actual space. Returns Type Description RawDataset Examples In this example, we create a volume from a series of voxels public class RawDatasetAdapterExample : MonoBehaviour { void Start() { // Define a 100x100x100 volume int volX = 100; int volY = 100; int volZ = 100; float[] voxels = new float[volX * volY * volZ]; // Populate voxels with \"data\" (x * y * z) int v = 0; for (int v = 0; v < voxels.Length; v++) { int z = v / (volX * volY); int vAdjusted = v - (z * volX * volY); int x = vAdjusted % volX; int y = vAdjusted / volX; voxels[v] = x * y * z; } Bounds b = new Bounds(Vector3.zero, Vector3.one); RawDataset abrVolume = RawDatasetAdapter.VoxelsToVolume(voxels, \"someData\", new Vector3Int(volX, volY, volZ), b); } } | Improve this Doc View Source VoxelsToVolume(Single[][][], String, Vector3Int, Bounds) Convert a 3D grid into an ABR volume data object. There is assumed to be a single scalar variable described by the array voxels . Declaration public static RawDataset VoxelsToVolume(float[][][] voxels, string voxelsName, Vector3Int volumeDimensions, Bounds dataBounds) Parameters Type Name Description Single [][][] voxels 3D voxels that make up the volume. All voxels are assumed to be the same size. String voxelsName Name of the variable the voxels are storing Vector3Int volumeDimensions Dimensions of the volume (number of steps in x, y, and z). Bounds dataBounds The bounds of volume in actual space. Returns Type Description RawDataset Examples In this example, we create a volume from a series of voxels public class RawDatasetAdapterExample : MonoBehaviour { void Start() { // Define a 100x100x100 volume int volX = 100; int volY = 100; int volZ = 100; float[][][] voxels = new float[volZ][][]; // Populate voxels with \"data\" (x * y * z) for (int z = 0; z < volZ; z++) { float[][] stack = new float[volY][]; for (int y = 0; y < volY; y++) { float[] col = new float[volX]; for (int x = 0; x < volX; x++) { col[x] = x * y * z; } stack[y] = col; } voxels[z] = stack; } Bounds b = new Bounds(Vector3.zero, Vector3.one); RawDataset abrVolume = RawDatasetAdapter.VoxelsToVolume(voxels, \"someData\", new Vector3Int(volX, volY, volZ), b); } }"
  },
  "api/IVLab.ABREngine.RawPrimitiveGradient.html": {
    "href": "api/IVLab.ABREngine.RawPrimitiveGradient.html",
    "title": "Class RawPrimitiveGradient | ABREngine",
    "keywords": "Class RawPrimitiveGradient Inheritance Object RawPrimitiveGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class RawPrimitiveGradient Fields | Improve this Doc View Source points Declaration public List<float> points Field Value Type Description List < Single > | Improve this Doc View Source values Declaration public List<string> values Field Value Type Description List < String >"
  },
  "api/IVLab.ABREngine.RawVisAssetGradient.html": {
    "href": "api/IVLab.ABREngine.RawVisAssetGradient.html",
    "title": "Class RawVisAssetGradient | ABREngine",
    "keywords": "Class RawVisAssetGradient Serializable version of the VisAsset gradients that interacts with state/schema. Each VisAsset type should be responsible for implementing their own conversion to/from this. Inheritance Object RawVisAssetGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class RawVisAssetGradient Fields | Improve this Doc View Source gradientScale Declaration public string gradientScale Field Value Type Description String | Improve this Doc View Source gradientType Declaration public string gradientType Field Value Type Description String | Improve this Doc View Source points Declaration public float[] points Field Value Type Description Single [] | Improve this Doc View Source uuid Declaration public string uuid Field Value Type Description String | Improve this Doc View Source visAssets Declaration public string[] visAssets Field Value Type Description String [] Methods | Improve this Doc View Source ToRaw<T>(IVisAssetGradient<T>) Convert from a regular VisAssetGradient to raw gradient for serialization/import/export/interfacing with other apps. Declaration public static RawVisAssetGradient ToRaw<T>(IVisAssetGradient<T> gradient) where T : IVisAsset Parameters Type Name Description IVisAssetGradient <T> gradient Returns Type Description RawVisAssetGradient Type Parameters Name Description T"
  },
  "api/IVLab.ABREngine.RenderHints.html": {
    "href": "api/IVLab.ABREngine.RenderHints.html",
    "title": "Class RenderHints | ABREngine",
    "keywords": "Class RenderHints Hints for rendering, such as whether a data impression should be hidden Inheritance Object RenderHints Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class RenderHints Properties | Improve this Doc View Source DataChanged Has the impression been changed since the last render (needs to be re-rendered?) Declaration public bool DataChanged { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PerIndexVisibility Index-level toggle to control visibility of individual parts of a data impression (e.g., points, lines). Declaration public BitArray PerIndexVisibility { get; set; } Property Value Type Description BitArray Remarks Index-level visibility may not be implemented for every data impression. Examples The following example shows basic usage of per-index visibility on a simple glyph data impression: public class IndexVisibilityExample : MonoBehaviour { void Start() { // Let's say the key data has 42 points. KeyData pointsKd = // some data we've imported // Create a layer for \"before\" points (blue) SimpleGlyphDataImpression di = new SimpleGlyphDataImpression(); di.keyData = // some key data we've loaded previously // Default everything to invisible (visible = false) di.RenderHints.PerIndexVisibility = new BitArray(42, false); // Register impression with the engine and render ABREngine.Instance.RegisterDataImpression(di); ABREngine.Instance.Render(); // Then, if we wanted to set some index to visible: di.RenderHints.PerIndexVisibility[10] = true; // Note: we need to tell the impression that its style has changed and // call Render() again di.RenderHints.StyleChanged = true; ABREngine.Instance.Render(); } } | Improve this Doc View Source StyleChanged Has the style of the impression been changed Declaration public bool StyleChanged { get; set; } Property Value Type Description Boolean | Improve this Doc View Source VisibilityChanged Has the visibility of the impression been changed (mesh renderer needs to be toggled) Declaration public bool VisibilityChanged { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Visible Whether or not the impression is visible Declaration public bool Visible { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Copy() Declaration public RenderHints Copy() Returns Type Description RenderHints | Improve this Doc View Source HasPerIndexVisibility() Whether or not the impression currently has per-index visibility Declaration public bool HasPerIndexVisibility() Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.ResourcesDataLoader.html": {
    "href": "api/IVLab.ABREngine.ResourcesDataLoader.html",
    "title": "Class ResourcesDataLoader | ABREngine",
    "keywords": "Class ResourcesDataLoader Load data from resources folder. NOTE: The actual data files (.bin) must have their file extension changed to .txt in order to be recognized. When data are imported, the identity of each is lost so we must guess which is which - currently guessing the larger of the two files is the \"Data\" and the smaller is \"Metadata\". Inheritance Object ResourcesDataLoader Implements IDataLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ResourcesDataLoader : IDataLoader Methods | Improve this Doc View Source LoadData(String) Declaration public RawDataset LoadData(string dataPath) Parameters Type Name Description String dataPath Returns Type Description RawDataset Implements IDataLoader"
  },
  "api/IVLab.ABREngine.ResourceStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.ResourceStateFileLoader.html",
    "title": "Class ResourceStateFileLoader | ABREngine",
    "keywords": "Class ResourceStateFileLoader Load a state from any Resources folder within Unity (within any Package or Asset) Inheritance Object ResourceStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ResourceStateFileLoader : IABRStateLoader Constructors | Improve this Doc View Source ResourceStateFileLoader() Declaration public ResourceStateFileLoader() Methods | Improve this Doc View Source GetState(String) Declaration public JObject GetState(string fileName) Parameters Type Name Description String fileName Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source SaveState(String, String) Declaration public void SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.ResourceVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.ResourceVisAssetFetcher.html",
    "title": "Class ResourceVisAssetFetcher | ABREngine",
    "keywords": "Class ResourceVisAssetFetcher Fetch VisAsset from a Resources folder (in an Asset or Package) Inheritance Object ResourceVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ResourceVisAssetFetcher : IVisAssetFetcher Constructors | Improve this Doc View Source ResourceVisAssetFetcher() Declaration public ResourceVisAssetFetcher() Properties | Improve this Doc View Source ResourcePath Declaration public string ResourcePath { get; } Property Value Type Description String | Improve this Doc View Source VisAssetJson Declaration public string VisAssetJson { get; } Property Value Type Description String Methods | Improve this Doc View Source GetArtifactJson(Guid) Declaration public JObject GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String | Improve this Doc View Source GetColormapTexture(Guid) Declaration public Texture2D GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetGlyphGameObject(Guid, JObject) Declaration public GameObject GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description UnityEngine.GameObject | Improve this Doc View Source GetGlyphNormalMapTexture(Guid, JObject) Declaration public Texture2D GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetLineTexture(Guid) Declaration public Texture2D GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetSurfaceNormalMap(Guid) Declaration public Texture2D GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetSurfaceTexture(Guid) Declaration public Texture2D GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.ScalarDataVariable.html": {
    "href": "api/IVLab.ABREngine.ScalarDataVariable.html",
    "title": "Class ScalarDataVariable | ABREngine",
    "keywords": "Class ScalarDataVariable Inheritance Object ScalarDataVariable Implements IDataVariable < Single > IABRInput IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class ScalarDataVariable : IDataVariable<float>, IABRInput, IHasDataset Properties | Improve this Doc View Source CustomizedRange Declaration public bool CustomizedRange { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source OriginalRange Declaration public DataRange<float> OriginalRange { get; set; } Property Value Type Description DataRange < Single > | Improve this Doc View Source Path Declaration public string Path { get; } Property Value Type Description String | Improve this Doc View Source Range Declaration public DataRange<float> Range { get; set; } Property Value Type Description DataRange < Single > | Improve this Doc View Source SpecificRanges Declaration public Dictionary<string, DataRange<float>> SpecificRanges { get; set; } Property Value Type Description Dictionary < String , DataRange < Single >> Methods | Improve this Doc View Source GetArray(IKeyData) Declaration public float[] GetArray(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Single [] | Improve this Doc View Source GetDataset() Declaration public Dataset GetDataset() Returns Type Description Dataset | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput | Improve this Doc View Source IsPartOf(IKeyData) Declaration public bool IsPartOf(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Boolean Implements IDataVariable<T> IABRInput IHasDataset"
  },
  "api/IVLab.ABREngine.SerializableFloatArray.html": {
    "href": "api/IVLab.ABREngine.SerializableFloatArray.html",
    "title": "Class SerializableFloatArray | ABREngine",
    "keywords": "Class SerializableFloatArray Inheritance Object SerializableFloatArray Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [Serializable] public class SerializableFloatArray Fields | Improve this Doc View Source array Declaration [SerializeField] public float[] array Field Value Type Description Single []"
  },
  "api/IVLab.ABREngine.SerializableVectorArray.html": {
    "href": "api/IVLab.ABREngine.SerializableVectorArray.html",
    "title": "Class SerializableVectorArray | ABREngine",
    "keywords": "Class SerializableVectorArray Inheritance Object SerializableVectorArray Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [Serializable] public class SerializableVectorArray Fields | Improve this Doc View Source array Declaration [SerializeField] public Vector3[] array Field Value Type Description Vector3 []"
  },
  "api/IVLab.ABREngine.SimpleGlyphDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleGlyphDataImpression.html",
    "title": "Class SimpleGlyphDataImpression | ABREngine",
    "keywords": "Class SimpleGlyphDataImpression A \"Glyphs\" data impression that uses hand-sculpted geometry to depict point data. Inheritance Object DataImpression SimpleGlyphDataImpression Implements IDataImpression IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [ABRPlateType(\"Glyphs\")] public class SimpleGlyphDataImpression : DataImpression, IDataImpression, IHasDataset Examples An example of creating a single glyph data impression and setting its colormap, color variable, and glyph could be: SimpleGlyphDataImpression gi = new SimpleGlyphDataImpression(); gi.keyData = points; gi.colorVariable = yAxis; gi.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; gi.glyph = glyph; ABREngine.Instance.RegisterDataImpression(gi); Constructors | Improve this Doc View Source SimpleGlyphDataImpression() Declaration public SimpleGlyphDataImpression() | Improve this Doc View Source SimpleGlyphDataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleGlyphDataImpression(string uuid) Parameters Type Name Description String uuid Fields | Improve this Doc View Source colormap Colormap applied to the colorVariable . This example switches between a linear white-to-green colormap and a linear black-to-white colormap. Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset | Improve this Doc View Source colorVariable Scalar color variable applied to each point of this data impression. This example switches between X-axis monotonically increasing and Y-axis monotonically increasing. Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Style)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source forceOutlineColor Force the use of outlineColor even if there's a colormap applied to the data. This example alternates between a white-to-green linear colormap (false) and a solid purple-blue (true) Declaration public BooleanPrimitive forceOutlineColor Field Value Type Description BooleanPrimitive | Improve this Doc View Source forwardVariable \"Forward\" direction that glyphs should point in. Declaration [ABRInput(\"Forward Variable\", \"Direction\", UpdateLevel.Data)] public VectorDataVariable forwardVariable Field Value Type Description VectorDataVariable | Improve this Doc View Source glyph What glyph(s) to apply to the dataset. This can also take a GlyphGradient . This example alternates between spherical and thin cylindrical glyphs. Declaration [ABRInput(\"Glyph\", \"Glyph\", UpdateLevel.Data)] public IGlyphVisAsset glyph Field Value Type Description IGlyphVisAsset | Improve this Doc View Source glyphDensity Tweak the density of glyphs - subsamples the existing glyphs uniformly. Declaration [ABRInput(\"Glyph Density\", \"Glyph\", UpdateLevel.Style)] public PercentPrimitive glyphDensity Field Value Type Description PercentPrimitive | Improve this Doc View Source glyphLod Level of detail to use for glyph rendering (higher number = lower level of detail; most glyphs have 3 LODs) Declaration public int glyphLod Field Value Type Description Int32 | Improve this Doc View Source glyphSize Adjust the size of the glyphs (in Unity-space meters). Declaration [ABRInput(\"Glyph Size\", \"Glyph\", UpdateLevel.Style)] public LengthPrimitive glyphSize Field Value Type Description LengthPrimitive | Improve this Doc View Source glyphVariable Variable used to determine which glyph to render at which data values. This only has any effect if glyph is a GlyphGradient . Declaration [ABRInput(\"Glyph Variable\", \"Glyph\", UpdateLevel.Style)] public ScalarDataVariable glyphVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public KeyData keyData Field Value Type Description KeyData | Improve this Doc View Source nanColor Override the color used for NaN values in this data impression. If not supplied, will use the defaultNanColor . Declaration public IColormapVisAsset nanColor Field Value Type Description IColormapVisAsset | Improve this Doc View Source outlineColor Color of the outline Declaration public Color outlineColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source outlineWidth Width (in Unity world coords) of the outline Declaration public LengthPrimitive outlineWidth Field Value Type Description LengthPrimitive | Improve this Doc View Source showOutline Show/hide outline on this data impression Declaration public BooleanPrimitive showOutline Field Value Type Description BooleanPrimitive | Improve this Doc View Source upVariable \"Up\" direction that glyphs should point in. Declaration [ABRInput(\"Up Variable\", \"Direction\", UpdateLevel.Data)] public VectorDataVariable upVariable Field Value Type Description VectorDataVariable | Improve this Doc View Source useRandomOrientation Use random forward/up directions when no Vector variables are applied for forward/up. Declaration public bool useRandomOrientation Field Value Type Description Boolean Properties | Improve this Doc View Source LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName | Improve this Doc View Source MaterialNames Declaration protected override string[] MaterialNames { get; } Property Value Type Description String [] Overrides DataImpression.MaterialNames Methods | Improve this Doc View Source Cleanup(EncodedGameObject) Declaration public override void Cleanup(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.Cleanup(EncodedGameObject) | Improve this Doc View Source ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() | Improve this Doc View Source GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() | Improve this Doc View Source SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) | Improve this Doc View Source UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) | Improve this Doc View Source UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SimpleLineDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleLineDataImpression.html",
    "title": "Class SimpleLineDataImpression | ABREngine",
    "keywords": "Class SimpleLineDataImpression A \"Lines\" data impression that uses hand-drawn line textures to depict line/flow data. Inheritance Object DataImpression SimpleLineDataImpression Implements IDataImpression IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [ABRPlateType(\"Ribbons\")] public class SimpleLineDataImpression : DataImpression, IDataImpression, IHasDataset Examples An example of creating a single line data impression and setting its colormap, color variable, and line texture could be: SimpleLineDataImpression gi = new SimpleLineDataImpression(); gi.keyData = lines; gi.colorVariable = yAxis; gi.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; gi.lineTexture = line; ABREngine.Instance.RegisterDataImpression(gi); Constructors | Improve this Doc View Source SimpleLineDataImpression() Declaration public SimpleLineDataImpression() | Improve this Doc View Source SimpleLineDataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleLineDataImpression(string uuid) Parameters Type Name Description String uuid Fields | Improve this Doc View Source averageCount Number of \"averaging\" samples taken across the line for a smoothing effect. This example ranges from 0 to 50. Declaration [ABRInput(\"Ribbon Smooth\", \"Ribbon\", UpdateLevel.Data)] public IntegerPrimitive averageCount Field Value Type Description IntegerPrimitive | Improve this Doc View Source colormap Colormap applied to the colorVariable . This example switches between a linear white-to-green colormap and a linear black-to-white colormap. Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset | Improve this Doc View Source colorVariable Scalar color variable applied to each point on the line of this data impression. This example switches between X-axis monotonically increasing and Y-axis monotonically increasing. Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Style)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source defaultCurveDirection Change the default curvature axis (if there are no existing tangents on the curve, this axis will be used) Declaration public Vector3 defaultCurveDirection Field Value Type Description UnityEngine.Vector3 Remarks NOTE: This input mostly changes behaviour at the ends of ribbons, unless your ribbon is perfectly straight. (This setting exists because of perfectly straight ribbons which the existing ribbon has trouble with). | Improve this Doc View Source keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public KeyData keyData Field Value Type Description KeyData | Improve this Doc View Source lineTexture Texture applied to the line. Light areas on the texture are discarded, dark areas are kept. Can also be a LineTextureGradient Declaration [ABRInput(\"Texture\", \"Texture\", UpdateLevel.Style)] public ILineTextureVisAsset lineTexture Field Value Type Description ILineTextureVisAsset | Improve this Doc View Source lineTextureVariable Scalar variable used to vary the line texture across its length. Declaration [ABRInput(\"Texture Variable\", \"Texture\", UpdateLevel.Style)] public ScalarDataVariable lineTextureVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source lineWidth Width of the line, in Unity world units. Declaration [ABRInput(\"Ribbon Width\", \"Ribbon\", UpdateLevel.Data)] public LengthPrimitive lineWidth Field Value Type Description LengthPrimitive | Improve this Doc View Source nanColor Override the color used for NaN values in this data impression. If not supplied, will use the defaultNanColor . Declaration public IColormapVisAsset nanColor Field Value Type Description IColormapVisAsset | Improve this Doc View Source nanLineTexture Override the line texture used for NaN values in this data impression. If not supplied, will use the defaultNanLine . Declaration public ILineTextureVisAsset nanLineTexture Field Value Type Description ILineTextureVisAsset | Improve this Doc View Source ribbonBrightness Manually adjust the brightness of the ribbon regardless of lighting in the scene. Declaration [ABRInput(\"Ribbon Brightness\", \"Ribbon\", UpdateLevel.Style)] public PercentPrimitive ribbonBrightness Field Value Type Description PercentPrimitive | Improve this Doc View Source ribbonCurveAngle Subtly adjust the lighting by varying the lighting normal of the ribbon Declaration [ABRInput(\"Ribbon Curve\", \"Ribbon\", UpdateLevel.Data)] public AnglePrimitive ribbonCurveAngle Field Value Type Description AnglePrimitive | Improve this Doc View Source ribbonRotationAngle Rotate the ribbon along its central axis. This example goes from 0 degrees to 90 degrees. Declaration [ABRInput(\"Ribbon Rotation\", \"Ribbon\", UpdateLevel.Data)] public AnglePrimitive ribbonRotationAngle Field Value Type Description AnglePrimitive | Improve this Doc View Source textureCutoff \"Cutoff\" point for discarding portions of the line. The cutoff is between 0% (fully light) and 100% (fully dark). In practice, this is performing a threshold filter. Declaration [ABRInput(\"Texture Cutoff\", \"Texture\", UpdateLevel.Style)] public PercentPrimitive textureCutoff Field Value Type Description PercentPrimitive Remarks NOTE: This input will have no effect if there's no lineTexture applied. It has the most effect on textures that are not fully black/white. Properties | Improve this Doc View Source LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName | Improve this Doc View Source MaterialNames Declaration protected override string[] MaterialNames { get; } Property Value Type Description String [] Overrides DataImpression.MaterialNames Methods | Improve this Doc View Source ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() | Improve this Doc View Source GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() | Improve this Doc View Source SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) | Improve this Doc View Source UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) | Improve this Doc View Source UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SimpleSurfaceDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleSurfaceDataImpression.html",
    "title": "Class SimpleSurfaceDataImpression | ABREngine",
    "keywords": "Class SimpleSurfaceDataImpression A \"Surfaces\" data impression that uses hand-drawn textures and color to show surface data. Inheritance Object DataImpression SimpleSurfaceDataImpression Implements IDataImpression IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [ABRPlateType(\"Surfaces\")] public class SimpleSurfaceDataImpression : DataImpression, IDataImpression, IHasDataset Examples An example of creating a single surface data impression and setting its colormap, color variable, and texture could be: SimpleSurfaceDataImpression gi = new SimpleSurfaceDataImpression(); gi.keyData = surfs; gi.colorVariable = yAxis; gi.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; gi.lineTexture = tex; ABREngine.Instance.RegisterDataImpression(gi); Constructors | Improve this Doc View Source SimpleSurfaceDataImpression() Declaration public SimpleSurfaceDataImpression() | Improve this Doc View Source SimpleSurfaceDataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleSurfaceDataImpression(string uuid) Parameters Type Name Description String uuid Fields | Improve this Doc View Source colormap Colormap applied to the colorVariable . This example switches between a linear white-to-green colormap and a linear black-to-white colormap. Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset | Improve this Doc View Source colorVariable Scalar color variable applied to each point of this data impression. This example switches between X-axis monotonically increasing and Y-axis monotonically increasing. Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Style)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public KeyData keyData Field Value Type Description KeyData | Improve this Doc View Source nanColor Override the color used for NaN values in this data impression. If not supplied, will use the defaultNanColor . Declaration public IColormapVisAsset nanColor Field Value Type Description IColormapVisAsset | Improve this Doc View Source nanPattern Override the pattern/texture used for NaN values in this data impression. If not supplied, will use the defaultNanTexture . Declaration public ISurfaceTextureVisAsset nanPattern Field Value Type Description ISurfaceTextureVisAsset | Improve this Doc View Source onlyOutline ONLY show the outline (don't show the actual surface) Declaration public BooleanPrimitive onlyOutline Field Value Type Description BooleanPrimitive | Improve this Doc View Source opacity Opacity of the surface - how see-through the surface is. Declaration public PercentPrimitive opacity Field Value Type Description PercentPrimitive | Improve this Doc View Source outlineColor Color of the outline Declaration public Color outlineColor Field Value Type Description UnityEngine.Color | Improve this Doc View Source outlineWidth Width (in Unity world coords) of the outline Declaration public LengthPrimitive outlineWidth Field Value Type Description LengthPrimitive | Improve this Doc View Source pattern The pattern/texture applied to the surface - can also be a SurfaceTextureGradient . Declaration [ABRInput(\"Pattern\", \"Pattern\", UpdateLevel.Style)] public ISurfaceTextureVisAsset pattern Field Value Type Description ISurfaceTextureVisAsset | Improve this Doc View Source patternIntensity Edit the intensity which the pattern is overlaid on the surface. 0% is not present at all, 10% is very faint, and 100% is full overlay. Declaration [ABRInput(\"Pattern Intensity\", \"Pattern\", UpdateLevel.Style)] public PercentPrimitive patternIntensity Field Value Type Description PercentPrimitive | Improve this Doc View Source patternSaturation Edit the saturation of the pattern(s) - 100% is full color, 0% is full grayscale. Declaration [ABRInput(\"Pattern Saturation\", \"Pattern\", UpdateLevel.Style)] public PercentPrimitive patternSaturation Field Value Type Description PercentPrimitive | Improve this Doc View Source patternSeamBlend Percentage to \"blend\" textures together at the seams to minimize the tiling effect. This example goes from 0% seam blend to 20% seam blend. Declaration [ABRInput(\"Pattern Seam Blend\", \"Pattern\", UpdateLevel.Style)] public PercentPrimitive patternSeamBlend Field Value Type Description PercentPrimitive | Improve this Doc View Source patternSize How large, in Unity meters, to make each \"tile\" of the texture/pattern on the surface. This example goes from 0.5m to 1m. Declaration [ABRInput(\"Pattern Size\", \"Pattern\", UpdateLevel.Style)] public LengthPrimitive patternSize Field Value Type Description LengthPrimitive | Improve this Doc View Source patternVariable Scalar variable used to vary the pattern across the surface. Declaration [ABRInput(\"Pattern Variable\", \"Pattern\", UpdateLevel.Style)] public ScalarDataVariable patternVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source showOutline Show/hide outline on this data impression (show the outline AND the actual surface) Declaration public BooleanPrimitive showOutline Field Value Type Description BooleanPrimitive Remarks NOTE: Outlines work best on convex objects. The wavelet in this example shows some artifacts due to its concavity. Properties | Improve this Doc View Source LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName | Improve this Doc View Source MaterialNames Declaration protected override string[] MaterialNames { get; } Property Value Type Description String [] Overrides DataImpression.MaterialNames Methods | Improve this Doc View Source ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() | Improve this Doc View Source GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() | Improve this Doc View Source SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) | Improve this Doc View Source UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) | Improve this Doc View Source UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SimpleVolumeDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleVolumeDataImpression.html",
    "title": "Class SimpleVolumeDataImpression | ABREngine",
    "keywords": "Class SimpleVolumeDataImpression A \"Volumes\" data impression that uses a user-defined transfer (opacity) map and a colormap to show volumetric data. Inheritance Object DataImpression SimpleVolumeDataImpression Implements IDataImpression IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax [ABRPlateType(\"Volumes\")] public class SimpleVolumeDataImpression : DataImpression, IDataImpression, IHasDataset Examples An example of creating a single volume data impression and setting its colormap and opacity map could be: SimpleVolumeDataImpression gi = new SimpleVolumeDataImpression(); gi.keyData = volume; gi.colorVariable = yAxis; gi.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; gi.opacityMap = PrimitiveGradient.Default(); ABREngine.Instance.RegisterDataImpression(gi); Constructors | Improve this Doc View Source SimpleVolumeDataImpression() Declaration public SimpleVolumeDataImpression() | Improve this Doc View Source SimpleVolumeDataImpression(String) Construct a data impression with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleVolumeDataImpression(string uuid) Parameters Type Name Description String uuid Fields | Improve this Doc View Source colormap Colormap applied to the colorVariable . This example switches between a linear white-to-green colormap and a linear black-to-white colormap. Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset | Improve this Doc View Source colorVariable Scalar color variable applied to each voxel of this data impression affects both the colormap and the opacitymap . Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Data)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable | Improve this Doc View Source keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public KeyData keyData Field Value Type Description KeyData | Improve this Doc View Source nanColor Override the color used for NaN values in this data impression. If not supplied, will use the defaultNanColor . Declaration public IColormapVisAsset nanColor Field Value Type Description IColormapVisAsset | Improve this Doc View Source nanOpacity Override the color used for NaN values in this data impression. If not supplied, will be 0% opacity. Declaration public PercentPrimitive nanOpacity Field Value Type Description PercentPrimitive | Improve this Doc View Source opacitymap The real power of volume rendering is in the opacity map, or transfer function. For example, with a \"spike\" transfer function changing over time like this, we can achieve a sort of contour or isosurface scanning through the volume. Declaration [ABRInput(\"Opacitymap\", \"Color\", UpdateLevel.Style)] public PrimitiveGradient opacitymap Field Value Type Description PrimitiveGradient | Improve this Doc View Source volumeBrightness Brightness multiplier for the entire volume, irrespective of lighting. Declaration [ABRInput(\"Volume Brightness\", \"Volume\", UpdateLevel.Style)] public PercentPrimitive volumeBrightness Field Value Type Description PercentPrimitive | Improve this Doc View Source volumeLighting Should the current scene's lighting affect the volume or not? Declaration [ABRInput(\"Volume Lighting\", \"Volume\", UpdateLevel.Style)] public BooleanPrimitive volumeLighting Field Value Type Description BooleanPrimitive Remarks Lighting is often useful for understanding 3D structures and creating atmospheric effects, but may not be useful for nitty-gritty data interpretation. | Improve this Doc View Source volumeOpacityMultiplier Opacity multiplier for the entire volume; gets multiplied on top of the opacitymap . Declaration [ABRInput(\"Volume Opacity Multiplier\", \"Volume\", UpdateLevel.Style)] public PercentPrimitive volumeOpacityMultiplier Field Value Type Description PercentPrimitive Properties | Improve this Doc View Source LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName | Improve this Doc View Source MaterialNames Declaration protected override string[] MaterialNames { get; } Property Value Type Description String [] Overrides DataImpression.MaterialNames Methods | Improve this Doc View Source ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() | Improve this Doc View Source GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() | Improve this Doc View Source SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) | Improve this Doc View Source UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) | Improve this Doc View Source UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SocketDataListener.html": {
    "href": "api/IVLab.ABREngine.SocketDataListener.html",
    "title": "Class SocketDataListener | ABREngine",
    "keywords": "Class SocketDataListener Listener for incoming upstream data, for example, from a Send2ABR plugin for ParaView. Operation of this class is controlled by the ABRConfig option dataListenerPort . Inheritance Object SocketDataListener Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class SocketDataListener Constructors | Improve this Doc View Source SocketDataListener(Int32) Declaration public SocketDataListener(int port) Parameters Type Name Description Int32 port Fields | Improve this Doc View Source listener Declaration [SerializeField] public TcpListener listener Field Value Type Description TcpListener | Improve this Doc View Source port Declaration public int port Field Value Type Description Int32 Methods | Improve this Doc View Source DoAcceptSocketCallback(IAsyncResult) Declaration public void DoAcceptSocketCallback(IAsyncResult ar) Parameters Type Name Description IAsyncResult ar | Improve this Doc View Source StartServer() Declaration public void StartServer() | Improve this Doc View Source StopServer() Declaration public void StopServer()"
  },
  "api/IVLab.ABREngine.SocketTextData.html": {
    "href": "api/IVLab.ABREngine.SocketTextData.html",
    "title": "Struct SocketTextData | ABREngine",
    "keywords": "Struct SocketTextData Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public struct SocketTextData Fields | Improve this Doc View Source bindata Declaration public byte[] bindata Field Value Type Description Byte [] | Improve this Doc View Source data Declaration public string data Field Value Type Description String | Improve this Doc View Source json Declaration public string json Field Value Type Description String | Improve this Doc View Source label Declaration public string label Field Value Type Description String"
  },
  "api/IVLab.ABREngine.StateLocalVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.StateLocalVisAssetFetcher.html",
    "title": "Class StateLocalVisAssetFetcher | ABREngine",
    "keywords": "Class StateLocalVisAssetFetcher Fetch a VisAsset from the currently loaded ABR state. Currently only valid for ColormapVisAssets. Inheritance Object StateLocalVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class StateLocalVisAssetFetcher : IVisAssetFetcher Fields | Improve this Doc View Source ARTIFACT_DATA Declaration public const string ARTIFACT_DATA = \"artifactDataContents\" Field Value Type Description String | Improve this Doc View Source VISASSET_JSON Declaration public const string VISASSET_JSON = \"artifactJson\" Field Value Type Description String | Improve this Doc View Source VISASSET_STATE Declaration public const string VISASSET_STATE = \"localVisAssets\" Field Value Type Description String Methods | Improve this Doc View Source GetArtifactJson(Guid) Declaration public JObject GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String | Improve this Doc View Source GetColormapTexture(Guid) Declaration public Texture2D GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetGlyphGameObject(Guid, JObject) Declaration public GameObject GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description UnityEngine.GameObject | Improve this Doc View Source GetGlyphNormalMapTexture(Guid, JObject) Declaration public Texture2D GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid Newtonsoft.Json.Linq.JObject lodJson Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetLineTexture(Guid) Declaration public Texture2D GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetSurfaceNormalMap(Guid) Declaration public Texture2D GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetSurfaceTexture(Guid) Declaration public Texture2D GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description UnityEngine.Texture2D Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.SurfaceKeyData.html": {
    "href": "api/IVLab.ABREngine.SurfaceKeyData.html",
    "title": "Class SurfaceKeyData | ABREngine",
    "keywords": "Class SurfaceKeyData Inheritance Object KeyData SurfaceKeyData Implements IHasDataset IKeyData IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class SurfaceKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors | Improve this Doc View Source SurfaceKeyData(String) Declaration public SurfaceKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "api/IVLab.ABREngine.SurfaceTextureGradient.html": {
    "href": "api/IVLab.ABREngine.SurfaceTextureGradient.html",
    "title": "Class SurfaceTextureGradient | ABREngine",
    "keywords": "Class SurfaceTextureGradient Inheritance Object VisAsset VisAssetGradient SurfaceTextureGradient Implements ISurfaceTextureVisAsset IVisAssetGradient < SurfaceTextureVisAsset > IVisAsset IABRInput ITextureGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class SurfaceTextureGradient : VisAssetGradient, ISurfaceTextureVisAsset, IVisAssetGradient<SurfaceTextureVisAsset>, IVisAsset, IABRInput, ITextureGradient Properties | Improve this Doc View Source BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap | Improve this Doc View Source Stops Declaration public List<float> Stops { get; } Property Value Type Description List < Single > | Improve this Doc View Source VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 | Improve this Doc View Source VisAssets Declaration public List<SurfaceTextureVisAsset> VisAssets { get; } Property Value Type Description List < SurfaceTextureVisAsset > Methods | Improve this Doc View Source GetTexture() Declaration public Texture2D GetTexture() Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source Initialize(Guid, List<SurfaceTextureVisAsset>, List<Single>) Declaration public void Initialize(Guid uuid, List<SurfaceTextureVisAsset> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List < SurfaceTextureVisAsset > visAssets List < Single > stops Implements ISurfaceTextureVisAsset IVisAssetGradient<T> IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.SurfaceTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.SurfaceTextureVisAsset.html",
    "title": "Class SurfaceTextureVisAsset | ABREngine",
    "keywords": "Class SurfaceTextureVisAsset Inheritance Object VisAsset SurfaceTextureVisAsset Implements ISurfaceTextureVisAsset IVisAsset IABRInput ITextureGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class SurfaceTextureVisAsset : VisAsset, ISurfaceTextureVisAsset, IVisAsset, IABRInput, ITextureGradient Constructors | Improve this Doc View Source SurfaceTextureVisAsset() Declaration public SurfaceTextureVisAsset() | Improve this Doc View Source SurfaceTextureVisAsset(Guid, Texture2D, Texture2D) Declaration public SurfaceTextureVisAsset(Guid uuid, Texture2D texture, Texture2D normalMap) Parameters Type Name Description Guid uuid UnityEngine.Texture2D texture UnityEngine.Texture2D normalMap | Improve this Doc View Source SurfaceTextureVisAsset(Texture2D, Texture2D) Declaration public SurfaceTextureVisAsset(Texture2D texture, Texture2D normalMap) Parameters Type Name Description UnityEngine.Texture2D texture UnityEngine.Texture2D normalMap Properties | Improve this Doc View Source BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap | Improve this Doc View Source NormalMap Declaration public Texture2D NormalMap { get; } Property Value Type Description UnityEngine.Texture2D | Improve this Doc View Source Texture Declaration public Texture2D Texture { get; } Property Value Type Description UnityEngine.Texture2D | Improve this Doc View Source VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetTexture() Declaration public Texture2D GetTexture() Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description UnityEngine.Texture2D | Improve this Doc View Source GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description UnityEngine.Texture2D Implements ISurfaceTextureVisAsset IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.TextStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.TextStateFileLoader.html",
    "title": "Class TextStateFileLoader | ABREngine",
    "keywords": "Class TextStateFileLoader Load a state from a serialized JSON string Inheritance Object TextStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class TextStateFileLoader : IABRStateLoader Constructors | Improve this Doc View Source TextStateFileLoader() Declaration public TextStateFileLoader() Methods | Improve this Doc View Source GetState(String) Declaration public JObject GetState(string jsonText) Parameters Type Name Description String jsonText Returns Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source SaveState(String, String) Declaration public void SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.TypeExtentions.html": {
    "href": "api/IVLab.ABREngine.TypeExtentions.html",
    "title": "Class TypeExtentions | ABREngine",
    "keywords": "Class TypeExtentions Inheritance Object TypeExtentions Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public static class TypeExtentions Methods | Improve this Doc View Source ImplicitlyConvertsTo(Type, Type) Check if a type implicitly converts to another. Source: https://stackoverflow.com/a/2075975 Declaration public static bool ImplicitlyConvertsTo(this Type type, Type destinationType) Parameters Type Name Description Type type Type destinationType Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.UnityObjectSerializer.html": {
    "href": "api/IVLab.ABREngine.UnityObjectSerializer.html",
    "title": "Class UnityObjectSerializer | ABREngine",
    "keywords": "Class UnityObjectSerializer Custom converter to allow less verbose Newtonsoft serialization of Unity builtin objects. This converter manually handles several cases, add more as they become necessary. Inheritance Object Newtonsoft.Json.JsonConverter UnityObjectSerializer Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class UnityObjectSerializer : JsonConverter Constructors | Improve this Doc View Source UnityObjectSerializer() Build the custom converter and define both the types that are allowed to be serialized and the string keys that are allowed to exist post-serialization Declaration public UnityObjectSerializer() Properties | Improve this Doc View Source CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Newtonsoft.Json.JsonConverter.CanRead Methods | Improve this Doc View Source CanConvert(Type) We only provide serializers for these types Declaration public override bool CanConvert(Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader Type objectType Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/IVLab.ABREngine.UpdateLevel.html": {
    "href": "api/IVLab.ABREngine.UpdateLevel.html",
    "title": "Enum UpdateLevel | ABREngine",
    "keywords": "Enum UpdateLevel How \"deep\" a particular update needs to go to fully address this ABR Input Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public enum UpdateLevel Fields Name Description Data Data updates generally need to address geometric information and/or populate data on a per-vertex basis, hence they are usually slow/expensive. Style Style updates are generally lightweight and only consist of updating uniforms on the GPU, for example changing the colormap or glyph size."
  },
  "api/IVLab.ABREngine.VectorDataVariable.html": {
    "href": "api/IVLab.ABREngine.VectorDataVariable.html",
    "title": "Class VectorDataVariable | ABREngine",
    "keywords": "Class VectorDataVariable Inheritance Object VectorDataVariable Implements IDataVariable < UnityEngine.Vector3 > IABRInput IHasDataset Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class VectorDataVariable : IDataVariable<Vector3>, IABRInput, IHasDataset Properties | Improve this Doc View Source CustomizedRange Declaration public bool CustomizedRange { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source OriginalRange Declaration public DataRange<Vector3> OriginalRange { get; set; } Property Value Type Description DataRange < UnityEngine.Vector3 > | Improve this Doc View Source Path Declaration public string Path { get; } Property Value Type Description String | Improve this Doc View Source Range Declaration public DataRange<Vector3> Range { get; set; } Property Value Type Description DataRange < UnityEngine.Vector3 > | Improve this Doc View Source SpecificRanges Declaration public Dictionary<string, DataRange<Vector3>> SpecificRanges { get; set; } Property Value Type Description Dictionary < String , DataRange < UnityEngine.Vector3 >> Methods | Improve this Doc View Source GetArray(IKeyData) Declaration public Vector3[] GetArray(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description UnityEngine.Vector3 [] | Improve this Doc View Source GetDataset() Declaration public Dataset GetDataset() Returns Type Description Dataset | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput | Improve this Doc View Source IsPartOf(IKeyData) Declaration public bool IsPartOf(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Boolean Implements IDataVariable<T> IABRInput IHasDataset"
  },
  "api/IVLab.ABREngine.VisAsset.html": {
    "href": "api/IVLab.ABREngine.VisAsset.html",
    "title": "Class VisAsset | ABREngine",
    "keywords": "Class VisAsset Generic type for all VisAssets to inherit from Inheritance Object VisAsset ColormapVisAsset GlyphVisAsset LineTextureVisAsset SurfaceTextureVisAsset VisAssetGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class VisAsset Fields | Improve this Doc View Source VisAssetTypeMap Typemap where we can look up ABR visasset types and convert to C# types. The typestring that defines this VisAsset type, from the ABR Schema . Should match one of: #/definitions/VisAssetType Declaration public static Dictionary<string, Type> VisAssetTypeMap Field Value Type Description Dictionary < String , Type > Properties | Improve this Doc View Source Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre | Improve this Doc View Source ImportTime Declaration public DateTime ImportTime { get; set; } Property Value Type Description DateTime | Improve this Doc View Source Uuid Declaration public Guid Uuid { get; set; } Property Value Type Description Guid Methods | Improve this Doc View Source GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput | Improve this Doc View Source IsValidVisAssetType(String) Check if a ABR VisAsset schema type is valid with this system Declaration public static bool IsValidVisAssetType(string vaType) Parameters Type Name Description String vaType Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.VisAssetGradient.html": {
    "href": "api/IVLab.ABREngine.VisAssetGradient.html",
    "title": "Class VisAssetGradient | ABREngine",
    "keywords": "Class VisAssetGradient Concrete implementation of a VisAsset Gradient, which is a collection of VisAssets that also counts as a single VisAsset. Inheritance Object VisAsset VisAssetGradient GlyphGradient LineTextureGradient SurfaceTextureGradient Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class VisAssetGradient : VisAsset Methods | Improve this Doc View Source FromRaw<T, S>(RawVisAssetGradient) Convert from a RawVisAssetGradient to a regular gradient for internal use. Declaration public static T FromRaw<T, S>(RawVisAssetGradient raw) where T : IVisAssetGradient<S>, new() where S : IVisAsset Parameters Type Name Description RawVisAssetGradient raw Returns Type Description T Type Parameters Name Description T S"
  },
  "api/IVLab.ABREngine.VisAssetLoader.html": {
    "href": "api/IVLab.ABREngine.VisAssetLoader.html",
    "title": "Class VisAssetLoader | ABREngine",
    "keywords": "Class VisAssetLoader Use a particular fetcher to try and get the VisAsset from its source, and construct the requisite Unity objects and IVisAsset to add. Inheritance Object VisAssetLoader Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class VisAssetLoader Constructors | Improve this Doc View Source VisAssetLoader() Declaration public VisAssetLoader() Methods | Improve this Doc View Source LoadVisAsset(Guid) Declaration public IVisAsset LoadVisAsset(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description IVisAsset | Improve this Doc View Source LoadVisAsset(Guid, IVisAssetFetcher) Declaration public IVisAsset LoadVisAsset(Guid uuid, IVisAssetFetcher _fetcher) Parameters Type Name Description Guid uuid IVisAssetFetcher _fetcher Returns Type Description IVisAsset"
  },
  "api/IVLab.ABREngine.VisAssetManager.html": {
    "href": "api/IVLab.ABREngine.VisAssetManager.html",
    "title": "Class VisAssetManager | ABREngine",
    "keywords": "Class VisAssetManager The VisAssetManager is where all VisAssets are stored within the ABREngine. VisAssets can be loaded and fetched from various sources defined in VisAssetFetchers . Currently, VisAssets may be loaded from any of the following: The state itself ( localVisAssets ) The media directory on the machine ABR is running on Any Resources folder (in Assets or in any Package) A VisAsset server Inheritance Object VisAssetManager Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class VisAssetManager Examples VisAssets can be loaded manually from your media folder, resources folder, or a network resource. This example loads a colormap 66b3cde4-034d-11eb-a7e6-005056bae6d8 from Resources (it's included in the ABREngine/Resources/media folder). public class VisAssetManagerExample : MonoBehaviour { void Start() { // Note, we could've used `LoadVisAsset` explicitly here, but // GetVisAsset will automatically try to load the VisAsset if it // doesn't already exist. ColormapVisAsset cmap = ABREngine.Instance.VisAssets.GetVisAsset<ColormapVisAsset>(new System.Guid(\"66b3cde4-034d-11eb-a7e6-005056bae6d8\")); } void Update() { // If you want to access the colormap later, you can use `GetVisAsset`. ColormapVisAsset cmapInUpdate = ABREngine.Instance.VisAssets.GetVisAsset<ColormapVisAsset>(new System.Guid(\"66b3cde4-034d-11eb-a7e6-005056bae6d8\"); } } You can also get the \"default\" visasset for a few VisAsset types. Keep in mind that the GetDefault<T>() method may not be defined for the VisAsset type that you want to get! public class VisAssetManagerExample : MonoBehaviour { void Start() { ColormapVisAsset cmap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; } } Constructors | Improve this Doc View Source VisAssetManager(String) Initialize a new VisAssetManager and define all of the places VisAssets may be loaded from. Declaration public VisAssetManager(string visassetPath) Parameters Type Name Description String visassetPath Path to the VisAssets folder within ABR's media folder. Fields | Improve this Doc View Source appDataPath Application data path for internal access Declaration public string appDataPath Field Value Type Description String | Improve this Doc View Source VISASSET_JSON Name of the artifact.json files that each VisAsset has Declaration public const string VISASSET_JSON = \"artifact.json\" Field Value Type Description String Properties | Improve this Doc View Source LocalVisAssets Any (custom) visassets that are solely described inside the state and do not exist on disk or on a server somewhere. Declaration public JObject LocalVisAssets { get; set; } Property Value Type Description Newtonsoft.Json.Linq.JObject | Improve this Doc View Source VisAssetGradients Any VisAsset gradients that are contained within the state (updated directly from state) Declaration public Dictionary<string, RawVisAssetGradient> VisAssetGradients { get; set; } Property Value Type Description Dictionary < String , RawVisAssetGradient > Methods | Improve this Doc View Source GetDefault<T>() Obtain the default visasset for a particular type, if there is one. Declaration public IVisAsset GetDefault<T>() where T : IVisAsset Returns Type Description IVisAsset Type Parameters Name Description T Remarks If using the VisAsset immediately as the type T , you will likely need to do a cast (e.g. ColormapVisAsset c = ....GetDefault&lt;ColormapVisAsset>() as ColormapVisAsset ). | Improve this Doc View Source GetVisAsset<T>(Guid) Get a visasset by its unique identifier. Declaration public T GetVisAsset<T>(Guid uuid) where T : IVisAsset Parameters Type Name Description Guid uuid UUID of the VisAsset to get from the engine. Returns Type Description T Returns the VisAsset, if found. If not found, tries to load the VisAsset then return it. Type Parameters Name Description T Any VisAsset type. | Improve this Doc View Source GetVisAssets() Get the UUIDs of every VisAsset that's been imported into ABR Declaration public List<Guid> GetVisAssets() Returns Type Description List < Guid > Returns a list containing UUIDs of each VisAsset in ABR. | Improve this Doc View Source LoadVisAsset(Guid, Boolean) Load a particular VisAsset described by its UUID. Declaration public IVisAsset LoadVisAsset(Guid visAssetUUID, bool replaceExisting = false) Parameters Type Name Description Guid visAssetUUID Boolean replaceExisting Returns Type Description IVisAsset Returns the IVisAsset that was loaded, or null if the VisAsset was not found. | Improve this Doc View Source LoadVisAsset<T>(Guid, Boolean) Load a VisAsset of a specific type. Declaration public T LoadVisAsset<T>(Guid visAssetUUID, bool replaceExisting = false) where T : IVisAsset Parameters Type Name Description Guid visAssetUUID UUID of the VisAsset to load from any VisAsset loader. Boolean replaceExisting Returns Type Description T Returns the VisAsset of type T that was loaded, or null if the VisAsset was not found. Type Parameters Name Description T Any VisAsset type. | Improve this Doc View Source LoadVisAssetPalette() Load all VisAssets located in the Media directory into memory. Declaration [Obsolete(\"LoadVisAssetPalette is obsolete because it only takes into consideration VisAssets in the media directory\")] public void LoadVisAssetPalette() | Improve this Doc View Source TryGetVisAsset(Guid, out IVisAsset) Attempt to retrieve a VisAsset. Declaration public bool TryGetVisAsset(Guid guid, out IVisAsset visAsset) Parameters Type Name Description Guid guid IVisAsset visAsset Returns Type Description Boolean Returns true if the VisAsset is currently loaded into the memory. | Improve this Doc View Source UnloadVisAsset(Guid) Unload a particular VisAsset described by its UUID. Declaration public void UnloadVisAsset(Guid visAssetUUID) Parameters Type Name Description Guid visAssetUUID Remarks Note that this method does not check if the VisAsset is in use , so be careful when calling it!"
  },
  "api/IVLab.ABREngine.VolumeKeyData.html": {
    "href": "api/IVLab.ABREngine.VolumeKeyData.html",
    "title": "Class VolumeKeyData | ABREngine",
    "keywords": "Class VolumeKeyData Inheritance Object KeyData VolumeKeyData Implements IHasDataset IKeyData IABRInput Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class VolumeKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors | Improve this Doc View Source VolumeKeyData(String) Declaration public VolumeKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "api/IVLab.ABREngine.VolumeLightManager.html": {
    "href": "api/IVLab.ABREngine.VolumeLightManager.html",
    "title": "Class VolumeLightManager | ABREngine",
    "keywords": "Class VolumeLightManager Transfer any lights in the ABR scene to variables in the volume rendering shader. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour VolumeLightManager Namespace : IVLab.ABREngine Assembly : IVLab.ABREngine.Runtime.dll Syntax public class VolumeLightManager : MonoBehaviour"
  },
  "index.html": {
    "href": "index.html",
    "title": "Artifact-Based Rendering Engine | ABREngine",
    "keywords": "Artifact-Based Rendering Engine Here for the ABREngine examples and C# documentation? Head over to the API documentation . A good place to start is the main ABREngine class. We introduce Artifact-Based Rendering (ABR), a framework of tools, algorithms, and processes that makes it possible to produce real, data-driven 3D scientific visualizations with a visual language derived entirely from colors, lines, textures, and forms created using traditional physical media or found in nature. A theory and process for ABR is presented to address three current needs: (i) designing better visualizations by making it possible for non-programmers to rapidly design and critique many alternative data-to-visual mappings; (ii) expanding the visual vocabulary used in scientific visualizations to depict increasingly complex multivariate data; (iii) bringing a more engaging, natural, and human-relatable handcrafted aesthetic to data visualization. New tools and algorithms to support ABR include front-end applets for constructing artifact-based colormaps, optimizing 3D scanned meshes for use in data visualization, and synthesizing textures from artifacts. These are complemented by an interactive rendering engine with custom algorithms and interfaces that demonstrate multiple new visual styles for depicting point, line, surface, and volume data. A within-the-research-team design study provides early evidence of the shift in visualization design processes that ABR is believed to enable when compared to traditional scientific visualization systems. Qualitative user feedback on applications to climate science and brain imaging support the utility of ABR for scientific discovery and public communication. This Unity package provides features and functionality for the Artifact-Based Rendering technique, as described by the paper from VIS 2019 . Getting Started Follow the Installation Guide to incorporate the Template into your project. Package introduction / overview Key classes organized by theme / functionality Core concepts"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "| ABREngine",
    "keywords": ""
  },
  "manual/core-concepts.html": {
    "href": "manual/core-concepts.html",
    "title": "| ABREngine",
    "keywords": "Key Data VisAssets Data Impressions Basic Terminology Media Folder"
  },
  "manual/creating-cs-abr-vis.html": {
    "href": "manual/creating-cs-abr-vis.html",
    "title": "Creating your first C# ABR Visualization | ABREngine",
    "keywords": "Creating your first C# ABR Visualization Before you begin, make sure you have Unity open and have followed the ABR install instructions . During this tutorial, we'll make a visualization of some 3D surface data like this: Part 0: Getting used to C# Syntax and the ABREngine Even if you've done lots of C# Scripting previously, this part is still worth reading because it's important to be aware of a few design patterns the ABREngine uses. Tip 1: Use of .Instance Like other object-oriented programming languages, C# uses classes, and you access the member variables and functions of those classes with a . So, in the line above, ABREngine is a class (one of the most important in ABR), and .Instance refers to a member variable inside the ABREngine class. Whenever you see a member variable named Instance , it's a good bet that this code is using a Singleton Design Pattern . In short, this means it is a class that is used sort of like a global variable, where the code enforces that only one instance of this class can ever exist within the program. In Unity programming, you will see this used a lot for classes that are \"in charge\" of coordinating or sharing important resources across the whole program, so often these will be named \"Engine\" or \"Manager\" or something similar. It's a good practice to make such classes \"singletons\" when your code assumes you will never have more than one \"engine\" or \"manager\". The convention is that you can refer to this single instance of the engine or manager class from anywhere in your program by simply writing Classname.Instance -- in this case, ABREngine.Instance . Tip 2: C# Properties Since ABREngine.Instance refers to the single instance of the ABREngine class that exists in our program, anything that comes after this must be a member variable, property, or function of the ABREngine class. If you go to the ABREngine documentation and scroll down a bit, you'll find VisAssets listed under the \"Properties\" section. In C#, Properties are used like getter/setting methods in many other languages - they just provide access to get and/or set data stored internally in the class. Tip 3: Generics with <> Notation Many ABREngine methods have a generic type parameter in angle brackets, for example ABREngine.Instance.VisAssets.LoadVisAsset<ColormapVisAsset>(new Guid(\"5a761a72-8bcb-11ea-9265-005056bae6d8\")) has a type parameter ColormapVisAsset . The method declaration for the generic method @IVLab.ABREngine.ABREngine.LoadVisAsset might look something like: public class ABREngine { public T LoadVisAsset<T>(Guid visAssetID) { ... } } Here, the compiler knows that wherever it sees a T inside this function it should replace it with whatever class name you give it when you call the function. So, when we write LoadVisAsset<ColormapVisAsset>(...) it's like calling a ColormapVisAsset -specific version of the LoadVisAsset function. It is good to have this syntax in mind when programming with Unity because some of the most frequently used function in Unity, like @UnityEngine.GameObject.GetComponent use the same approach. Part 1: Creating the ABREngine GameObject and configuration Every ABR visualization needs to have the ABREngine GameObject and configuration correctly set up. In the Unity Editor \"Project\" tab, search for ABREngine \"In Packages\". Then, drag-and-drop the ABREngine prefab (blue cube icon) into the Hierarchy. If you click on the ABREngine GameObject you just created, you'll notice an error message in on the right Inspector panel: To fix this, we need to create an ABR Configuration. In the Project tab, go to your Assets folder. Then, right/two-finger -click anywhere in the empty space and select Create > ABR > ABR Configuration . You may leave it named \"ABRConfig\". Inspect the ABRConfig object you just created to see what configuration options are available to you - but for now, we can leave these all at their defaults. Observe that now, when you click on the \"ABREngine\" GameObject, the ABRConfig you just created shows up under \"Choose ABR Configuration\". Save your scene by pressing Ctrl+S or Cmd+S or navigating to File > Save . Part 2: Creating a C# Script to drive your visualization Some ABR visualizations use the ABR design interface, but in this tutorial we will solely focus on making a visualization with C# code. We will have a single script, \"VisDriver.cs\", that creates our visualization by creating ABR key data , VisAssets and telling ABR to render these with data impressions . First, let's create a new Empty GameObject. In the Hierarchy, right/two-finger click anywhere in the open space and select Create Empty . Call this GameObject \"VisDriverObject\". Now, create a new C# Script. In the Project tab, right/two-finger click anywhere in the open space an select *Create > C# Script\". Name it \"VisDriver\". Lastly, drag and drop this script onto the \"VisDriverObject\" GameObject you created earlier. To edit the script, right/two-finger click the \"VisDriver\" script in the Project tab and click \"Open C# Project\". Before doing this, ensure that your external script editor is set up correctly, and that under \"Generate .csproj files for:\", \"Embedded Packages\", \"Local Packages\", and \"Local Tarball\" are all checked. Part 3: Making a visualization After clicking \"Open C# Project\" and navigating to VisDriver.cs in your code editor, you should see that Unity has populated a new MonoBehaviour Class named VisDriver . This part will walk you through the steps to create your first script-based visualization with ABR, which will end up looking like this: Importing the ABREngine Add the following code to the header of the VisDriver file under using UnityEngine : using IVLab.ABREngine; This line of code makes the power of ABR available to you in this script. 1. Import some data For simplicity, we're going to put all our visualization code in the Start() method, so you can delete the Update() method at this point. Now, in the Start() method, we'll begin by importing some example data that's available for you to use in ABR. Copy and past the following code into your Start() method: // 1.a. Load the dataset from disk (see ABREngine-UnityPackage/Runtime/Resources/media/datasets) for the raw data files string contourDataPath = \"Demo/Wavelet/KeyData/Contour\"; RawDataset contourRaw = ABREngine.Instance.Data.LoadRawDataset<ResourcesDataLoader>(contourDataPath); // 1.b. Import the contour surface dataset into ABR ABREngine.Instance.Data.ImportRawDataset(contourDataPath, contourRaw); 2. Putting it together in a data impression Data impressions are the \"layers\" of the visualization. So, to combine data and VisAssets, we need to create a data impression and assign data to it: // 2. Create surface data impression and assign key data SimpleSurfaceDataImpression surf = new SimpleSurfaceDataImpression(); surf.keyData = contour; 3. Registering and rendering Finally, to get our data to show up at all, we need to first Register the data impression we created with the ABREngine. This only needs to be done once right after the Data Impression is created. // 3.a. Register the data impression so ABR knows about it ABREngine.Instance.RegisterDataImpression(surf); Then Render() the visualization. This needs to be done every time something changes, such as a colormap or data value. // 3.b. Render the visualization ABREngine.Instance.Render(); At this point, check your work. Go back to Unity and press the \"Play\" button triangle in the top toolbar. If everything is working correctly, you should see a small \"blob-like\" visualization in the center of your game view - this is the \"Contour\" data you imported in Step 1! 4. Import a colormap VisAsset To add some color to the visualization, we'll need a colormap. Add the following code to your Start() method. Copy/paste this code right after the existing Step 1 code: // 1.c. Import a Colormap VisAsset ColormapVisAsset cmap = ABREngine.Instance.VisAssets.LoadVisAsset<ColormapVisAsset>(new System.Guid(\"5a761a72-8bcb-11ea-9265-005056bae6d8\")); 5. Assign colormap and color variable to data impression The data and the colormap visasset are linked together in the surf data impression created in Step 2. Let's add some more code between steps 2 and 3: // 2.b. Assign colormap to data impression surf.colormap = cmap; // 2.c. Assign color variable to data impression surf.colorVariable = contour.GetScalarVariable(\"XAxis\"); This code will first link the colormap you imported in Step 4 to the data impression, then it will look in the \"Contour\" key data object and find a scalar variable \"XAxis\". See Key Data for more information on key data. At this point, go back to Unity and try running the visualization again. After adjusting the camera to be closer to the center of the scene (camera position = (0, 0, -2)), your game view should look like this:"
  },
  "manual/data-impressions.html": {
    "href": "manual/data-impressions.html",
    "title": "Data Impressions | ABREngine",
    "keywords": "Data Impressions Every \"layer\" in the visualization is represented by a data impression. In the ABR design interface, each impression is shown by a \"tower\"; for example this data impression represents the ground's surface in the simulation, and we've applied some scalar data variables and styling to it. ABR has four types of data impressions: SimpleSurfaceDataImpression SimpleLineDataImpression SimpleGlyphDataImpression SimpleVolumeDataImpression Using Data Impressions in Code To construct a data impression, use the KeyData, Variables, and VisAssets that you have loaded in in the previous examples and link them into the data impression by assigning to instance variables like keyData , colormap , colorVariable etc. See the documentation links above for the values that can be changed for each Data Impression. For example, to create the same effect as the \"tower\" in the previous image, we might use code like this: // Import ground data KeyData groundData = ABREngine.Instance.Data.ImportRawDataset(...); // Import the colormap ColormapVisAsset cmap = ABREngine.Instance.VisAssets.LoadVisAsset<ColormapVisAsset>(...); // Create a new data impression for the ground SimpleSurfaceDataImpression ground = new SimpleSurfaceDataImpression(); ground.keyData = groundData; ground.colormap = cmap; ground.colorVariable = groundData.GetScalarVariable(...); // Register the data impression with the engine ABREngine.Instance.RegisterDataImpression(ground);"
  },
  "manual/install.html": {
    "href": "manual/install.html",
    "title": "To install ABREngine in a Unity Project | ABREngine",
    "keywords": "To install ABREngine in a Unity Project Prereqs There are no prereqs if you want to host this package on github.com, but to host this package on github.umn.edu, you will need to have SSH access to github.umn.edu and be a member of the IV/LAB Organization on github.umn.edu. Create a GitHub SSH key for your UMN GitHub account on your development machine. Unity has trouble sshing with passwords; just leave the password for this key blank. If you cannot see the IV/LAB Organization on github.umn.edu , then ask the Current Lab GitHub and Software Development Czar to please add you to the org. Install via the Unity Package Manager To use the package in a read-only mode, the same way you would for packages downloaded directly from Unity: In Unity, open Window -> Package Manager. Click the + button Select Add package from git URL Paste git@github.umn.edu:ivlab-cs/ABREngine-UnityPackage.git for the latest package Repeat steps 2-4 for each of these additional package dependencies: ssh://git@github.umn.edu/ivlab-cs/JsonSchema-UnityPackage.git ssh://git@github.umn.edu/ivlab-cs/OBJImport-UnityPackage.git ssh://git@github.umn.edu/ivlab-cs/JsonDiffPatch-UnityPackage.git ssh://git@github.umn.edu/ivlab-cs/IVLab-Utilities-UnityPackage.git Development Mode Collectively, the lab now recommends a development process where you start by adding the package to your project in read-only mode, as described above. This way, your Unity project files will always maintain a link to download the latest version of the package from git whenever the project is loaded, and all users of the package will be including it the same way. If/when you have a need to edit the package, the process is then to \"temporarily\" switch into development mode by cloning a temporary copy of the package. Then, edit this source as needed, test your edits for as long as you like, etc. When you get to a good stopping point, commit and push the changes to github from within this temporary clone inside the Packages directory . Once the latest version of your package is on github, you can then \"switch out of development mode\" by deleting the cloned repo. This will cause Unity to revert to using the read-only version of the package, which it keeps in its internal package cache, and we can trigger Unity to update this version to the latest by removing the packages-lock.json file. In summary: Follow the read-only mode steps above. Navigate your terminal or Git tool into your Unity project's main folder and clone this repository into the packages folder, e.g., cd Packages; git clone git@github.umn.edu:ivlab-cs/ABREngine-UnityPackage.git . This will create a ABREngine-UnityPackage folder that contains all the sourcecode in the package. Go for it. Edit the source you just checked out; add files, etc. However, BE VERY CAREFUL NOT TO ADD THE ABREngine-UnityPackage FOLDER TO YOUR PROJECT'S GIT REPO. We are essentially cloning one git repo inside another here, but we do not want to add the package repo as a submodule or subdirectory of the project's repo, we just want to temporarily work with the source. When you are ready to commit and push changes to the package repo, go for it. JUST MAKE SURE YOU DO THIS FROM WITHIN THE Packages/ABREngine-UnityPackage DIRECTORY! Once these changes are up on github, you can switch out of \"development mode\" by simply deleting the ABREngine-UnityPackage directory. The presence of that directory is like a temporary override. Once it is gone, Unity will revert back to using the cached version of ABREngine that it originally downloaded from git. The final step is to force a refresh of the package cache so that Unity will pull in the new version of the package you just saved to github. To do this, simply delete the packages-lock.json file inside your project's Packages folder."
  },
  "manual/intro.html": {
    "href": "manual/intro.html",
    "title": "Artifact-Based Rendering Engine | ABREngine",
    "keywords": "Artifact-Based Rendering Engine The purpose of the Artifact-Based Rendering Engine (ABR Engine) is to provide artists with tools and techniques to create high-fidelity visualizations of multivariate spatiotemporal data using their own traditional-media creations, such as: Colormaps inspired by nature Sketched / inked lines Textures gathered from the real world Hand-sculpted clay glyphs With ABR as a tool in their studio, artists have created images like the following: Gulf of Mexico biogeochemistry visualization created by artist Stephanie Zeller Ocean currents underneath the Filchner-Ronne Ice Shelf in the antarctic by artist Francesca Samsel The ABR Engine was created and is maintained by the Sculpting Visualizations Collective . Getting Started with ABR ABR has two modes which have similar functionality. GUI mode is for rapidly creating visualizations with no programming involved. C# mode is useful for creating programmatic visualizations, and this mode includes newer and experimental features of ABR that haven't yet been incorporated to the GUI mode. Before getting into specifics of either of these modes, it is important to understand a few concepts about ABR. Give each of these core concepts a read through before diving into creating with ABR: Key Data VisAssets Data Impressions Basic Terminology Media Folder Getting Started with ABR C# Please see Creating your first C# ABR Visualization . Getting Started with ABR GUI ABR design interface for a visualization of wildfire data. [more to come on this section]"
  },
  "manual/key-data.html": {
    "href": "manual/key-data.html",
    "title": "Key Data | ABREngine",
    "keywords": "Key Data For data visualizations that have a spatial structure, the geometric structure itself is a critical part of the data. In fact, access to individual data variables is usually \"keyed\" off these geometric structures. You can't ask, \"What is the average temperature at _ \", without filling in the blank with some geometric identifier. There are some choices; we could fill in the blank with a point, a line, a surface, or a volume in space, but we need something to act as that structure upon which the data variables are defined. We call this geometric structure the \"key data\". Key Data Types Key data are the \"building blocks\" upon which visualizations are created. ABR currently supports four types of key data: Surfaces Lines Points Volumes Every key data has its own geometric structure and variables applied to it. You can think of the Key Data as the \"canvas\" upon which the variables are painted, for example, this visualization of a wavelet is a surface key data object representing the wavy blob surface: Then, we can \"paint\" a visualization on these geometric data by pairing one of the key data's scalar variables (in this case, the X Axis) with a colormap (in this case, a white to green linear map): Key Data Identification Every key data object is identified by a \"Data Path\" string comprised of 4 parts: <Organization>/<Dataset>/KeyData/<KeyDataName> Organization: The governing body that owns the dataset, for example \"TACC\", \"UMN\", \"Brown\", etc. Dataset: A label for the dataset the key data is a part of, for example \"GulfOfMexico\". KeyDataName: The label for this particular key data object, for example \"NitrateSampling\". All in all, for a nitrate point sampling from the Gulf of Mexico, we might end up with a data path string like: E3SM/GulfOfMexico/KeyData/NitrateSampling Using Key Data in Code In scripting, we can obtain an ABR KeyData object by importing some data into ABR. The key data object has some variables. For example, to get a KeyData object from a RawDataset (more on this later) and list its scalar variables, we might write some C# code like this: string keyDataName = \"E3SM/GulfOfMexico/KeyData/NitrateSampling\"; KeyData kd = ABREngine.Instance.Data.ImportRawDataset(keyDataName, nitrateRawData); foreach (ScalarDataVariable s in kd.GetScalarVariables()) { Debug.Log(s); } // Would print out something like \"Temperature, Salinity, ...\" Check out the KeyData and DataManager classes for more examples and further documentation, and be sure to also look at the Creating a C# ABR Visualization tutorial."
  },
  "manual/license.html": {
    "href": "manual/license.html",
    "title": "| ABREngine",
    "keywords": "GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/ . Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html ."
  },
  "manual/media-folder.html": {
    "href": "manual/media-folder.html",
    "title": "The Media Folder | ABREngine",
    "keywords": "The Media Folder The media folder is where all datasets and visassets are stored. Every ABR project should have one or more media folders. By default in the ABR configuration, the media folder is located in the Application.persistentDataPath . However, this can be changed to a more convenient location, including the Unity project's own Assets folder by modifying the mediaPath in the ABR Configuration that is used for the ABREngine."
  },
  "manual/terminology-starter.html": {
    "href": "manual/terminology-starter.html",
    "title": "Basic ABREngine Terminology | ABREngine",
    "keywords": "Basic ABREngine Terminology Beyond the key data, visasset, and data impression metaphors, there are also some new concepts and terminology that you'll need to work with the ABR Engine via C# scripting in Unity. ABREngine The ABREngine is the main class with which visualizations are constructed. ABREngine exists as a singleton object in the Unity scene, that is, there is only ONE instance of ABREngine the entire time Unity is running. You can access the running instance easily in code with ABREngine.Instance; for example, you can use any of the following important methods and objects in this manner: ABREngine.Instance.VisAssets - single instanceSingle instance of the VisAssetManager (you can load or get visassets with this object) ABREngine.Instance.Data - Single instance of the DataManager (you can load or get data with this object) ABREngine.Instance.RegisterDataImpression() - Connect the data and visuals together in the engine ABRengine.Instance.Render() - Display the visualization RawDataset A RawDataset is a standardized geometric dataset (points, lines, surface, volume) formatted in a way that ABR can import it. RawDatasets MUST be imported to be used in ABR. RawDataset objects can be obtained from from the RawDatasetAdapter class and import it immediately after. The following example shows how to construct and import a simple dataset of 3 points: // Build a simple list of 3D points List<Vector3> points = new List<Vector3> { Vector3.zero, Vector3.one, 2*Vector3.one }; // We need to provide a bounding box for the data so ABR knows where it can safely place the visualization in space. // The data should NEVER go outside these bounds. Bounds b = new Bounds(Vector3.zero, 2*Vector3.one); // Standardize these points into a format ABR can understand RawDataset abrPoints = RawDatasetAdapter.PointsToPoints(points, b, null, null); // Then, import the data so we can use it in a visualization KeyData pointsKD = ABREngine.Instance.Data.ImportRawDataset(abrPoints); Read the docs on ABREngine.Instance.Data.ImportRawDataset() and RawDatasetAdapter for more information. DataImpressionGroup Data impressions can be \"grouped\" in your ABR scene, which makes it easier to move data impressions around (e.g., for a side-by-side visualization). Check out the DataImpressionGroup example in the ABREngine for more information."
  },
  "manual/visassets.html": {
    "href": "manual/visassets.html",
    "title": "VisAssets (Visualization Assets) | ABREngine",
    "keywords": "VisAssets (Visualization Assets) VisAssets are visual building blocks or elements of a visualization sourced from real-world artifacts and materials. ABR currently supports four types of VisAssets: Name Colormap Line Texture Glyph Example C# Class ColormapVisAsset LineTextureVisAsset SurfaceTextureVisAsset GlyphVisAsset Using VisAssets in code: Each VisAsset has a unique identifier, known as a UUID (or a Guid in C# (Links to an external site.)) - this is the long hex number you may have seen in your ABR media folder. When programming with ABR, you'll need to use these UUIDs to load and reference VisAssets, since there's not an easy way to tell the computer \"I want that blue linear colormap over there\". The general process for loading VisAssets in C# scripts is: Find the UUID of the VisAsset you want. Usually this can be accomplished by right/two-finger clicking the VisAsset in question in a browser (either from the ABR Design Interface or the Sculpting Vis Library ), then copy/pasting the long hex UUID from your browser's URL bar (e.g. 5a761a72-8bcb-11ea-9265-005056bae6d8 ). Create a Guid object to store this UUID. Load the VisAsset using VisAssetManager LoadVisAsset method. For example, in code, you might load a colormap like this (note the use of LoadVisAsset and Guid): ColormapVisAsset cmap = ABREngine.Instance.VisAssets.LoadVisAsset<ColormapVisAsset>(new Guid(\"5a761a72-8bcb-11ea-9265-005056bae6d8\")); See the VisAssetManager for more details and example loading code."
  }
}