{
  "abr-config.html": {
    "href": "abr-config.html",
    "title": "Configuring ABR | ABREngine",
    "keywords": "Configuring ABR ABR configuration allows you, the developer, to make modifications to how the ABR Engine behaves. All configuration options are defined in ABRConfigInfo.cs . To make changes to the configuration, place a file ABRConfig.json in your Assets/StreamingAssets folder in Unity, and define any of the key-value pairs specified in ABRConfig.cs to change the engine behaviour. If you build your Unity project, you can modify the ABR Config without rebuilding; the ABRConfig.json file is located at [BuildFolder]/[AppName]_Data/StreamingAssets/ABRConfig.json . Example configurations A common configuration for ABR is to allow it to connect to an ABR Server , which allows interactive design of a visualization using a puzzle-piece based drag-n-drop UI. By defining the mediaPath key, we are telling the ABREngine to look for datasets and visassets in the same folder the ABR Server is saving them to (i.e., ABR Server and this Unity Project are sibling directories with media ). { \"serverAddres\": \"http://localhost:8000\", \"statePathOnServer\": \"api/state\", \"mediaPath\": \"../media\" } Another common change is to be able to connect an upstream data creation/management application: { \"dataListenerPort\": 1900 } Lastly, for debugging or embedded/console applications of ABREngine, a state to load on start can be specified. The Engine looks in both Resources and StreamingAssets folders for this state to load. { \"loadStateOnStart\": \"testState.json\" }"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | ABREngine",
    "keywords": "Namespace Global Classes VolumeLightManager"
  },
  "api/Global.VolumeLightManager.html": {
    "href": "api/Global.VolumeLightManager.html",
    "title": "Class VolumeLightManager | ABREngine",
    "keywords": "Class VolumeLightManager Inheritance Object VolumeLightManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class VolumeLightManager : MonoBehaviour"
  },
  "api/IVLab.ABREngine.ABRConfig.Consts.html": {
    "href": "api/IVLab.ABREngine.ABRConfig.Consts.html",
    "title": "Class ABRConfig.Consts | ABREngine",
    "keywords": "Class ABRConfig.Consts Global access to constants in the ABR Engine Inheritance Object ABRConfig.Consts Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public static class Consts Fields ConfigFile User configuration file to be placed in the StreamingAssets folder (editor) or Data folder (build) Declaration public const string ConfigFile = \"ABRConfig.json\" Field Value Type Description String ConfigFileFallback Fall back to the defaults located in this package (Located in ABREngine Resources folder) Declaration public const string ConfigFileFallback = \"ABRConfigDefault\" Field Value Type Description String DatasetFolder Dataset folder within media folder Declaration public const string DatasetFolder = \"datasets\" Field Value Type Description String MediaFolder Default name for the media folder Declaration public const string MediaFolder = \"media\" Field Value Type Description String SchemaUrl Where to find the Schema online Declaration public const string SchemaUrl = \"https://raw.githubusercontent.com/ivlab/abr-schema/master/ABRSchema_0-2-0.json\" Field Value Type Description String VisAssetFolder VisAsset folder within media folder Declaration public const string VisAssetFolder = \"visassets\" Field Value Type Description String VisAssetJson Name of VisAsset JSON specifier Declaration public const string VisAssetJson = \"artifact.json\" Field Value Type Description String"
  },
  "api/IVLab.ABREngine.ABRConfig.html": {
    "href": "api/IVLab.ABREngine.ABRConfig.html",
    "title": "Class ABRConfig | ABREngine",
    "keywords": "Class ABRConfig The ABRConfig class provides access throughtout ABR to everything that is loaded in from a user's / developer's ABRConfig.json file. This is mainly useful for modifying the behaviour of the ABREngine internally, but can be occasionally helpful in other situations - for instance, if a developer needs to get access to the default bounding box / container that ABR is using. Inheritance Object ABRConfig Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ABRConfig Examples Bounds defaultBounds = ABREngine.Instance.Config.Info.defaultBounds.Value; // ... do something fancy based on `defaultBounds` Constructors ABRConfig() Declaration public ABRConfig() Properties ABRConfigFile The actual path that ABRConfig.json is located at, if any Declaration public string ABRConfigFile { get; } Property Value Type Description String Defaults Declaration public ABRConfigDefaults Defaults { get; } Property Value Type Description ABRConfigDefaults Info Miscellaneous info about the currently-running version of ABR Declaration public ABRConfigInfo Info { get; } Property Value Type Description ABRConfigInfo Schema The Json Schema to use for validation of ABR states Declaration public JSchema Schema { get; } Property Value Type Description JSchema SchemaJson Schema to use for internally grabbing default values Declaration public JObject SchemaJson { get; } Property Value Type Description JObject Methods GetInputNames(String) Obtain a full list of all inputs available to this plate Declaration public string[] GetInputNames(string plateName) Parameters Type Name Description String plateName Returns Type Description String [] GetInputValueDefault<T>(String, String) Get the default primitive value for a particular data impression's parameter Declaration public T GetInputValueDefault<T>(string plateName, string inputName) where T : IPrimitive Parameters Type Name Description String plateName String inputName Returns Type Description T Type Parameters Name Description T"
  },
  "api/IVLab.ABREngine.ABRConfigDefaults.html": {
    "href": "api/IVLab.ABREngine.ABRConfigDefaults.html",
    "title": "Class ABRConfigDefaults | ABREngine",
    "keywords": "Class ABRConfigDefaults Inheritance Object ABRConfigDefaults Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ABRConfigDefaults Fields defaultPrefab Prefab to use for defaults in each data impression Declaration public GameObject defaultPrefab Field Value Type Description GameObject"
  },
  "api/IVLab.ABREngine.ABRConfigInfo.html": {
    "href": "api/IVLab.ABREngine.ABRConfigInfo.html",
    "title": "Class ABRConfigInfo | ABREngine",
    "keywords": "Class ABRConfigInfo These options, when declared in an ABRConfig.json file, change the behaviour of the ABREngine. JSON naming convention is analagous to field names seen here. Inheritance Object ABRConfigInfo Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ABRConfigInfo Examples This example shows a simple ABRConfig.json file which will be converted to an ABRConfigInfo object when the ABREngine is started. { \"serverAddress\": \"http://localhost:8000\", \"statePathOnServer\": \"api/state\", \"mediaPath\": \"./media\", \"dataListenerPort\": 1900 } When the ABREngine is running, we would be able to access the config: void Start() { Debug.Log(ABREngine.Instance.Config.Info.serverAddress); // prints \"http://localhost:8000\" } Fields dataListenerPort Port to listen for data on, if any. Useful if, for instance, you want to have a live connection to ParaView that pushes data into ABR. Default: null Declaration public int? dataListenerPort Field Value Type Description Nullable < Int32 > dataServer What server to obtain data from, if any. If none provided, ABR will assume that everything is in Unity's persistentData path. If server is provided and resource doesn't exist in persistentData, it will be downloaded. Default: null Declaration public string dataServer Field Value Type Description String defaultBounds Default bounds for datasets when showing (in Unity world coordinates) Declaration public Bounds? defaultBounds Field Value Type Description Nullable < Bounds > defaultPrefabName The name of the default prefab to look for in any resources folder Declaration public string defaultPrefabName Field Value Type Description String loadStateOnStart Load a state from resources on ABREngine startup Declaration public string loadStateOnStart Field Value Type Description String mediaPath Local path to look for datasets and visassets at. Default: Application.persistentDataPath Declaration public string mediaPath Field Value Type Description String schemaName The schema that should be loaded Declaration public string schemaName Field Value Type Description String serverAddress What server to connect to, if any. If provided, ABR will try to register with the server immediately upon startup. Default: null Declaration public Uri serverAddress Field Value Type Description Uri statePathOnServer State url to fetch on the server; will be concatenated with serverAddress. Note: Do not include a leading slash! Declaration public string statePathOnServer Field Value Type Description String version Version of ABR Declaration public string version Field Value Type Description String visAssetServer What server to obtain VisAssets from, if any. If none provided, ABR will assume that everything is in Unity's persistentData path. If server is provided and resource doesn't exist in persistentData, it will be downloaded. Default: null Declaration public string visAssetServer Field Value Type Description String Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/IVLab.ABREngine.ABREngine.html": {
    "href": "api/IVLab.ABREngine.ABREngine.html",
    "title": "Class ABREngine | ABREngine",
    "keywords": "Class ABREngine The ABREngine class is the main operational MonoBehaviour Singleton for the ABREngine-UnityPackage. It is in charge of kicking off all startup processes for ABR, including setting up connections with the server, the data listener, VisAssets and Data managers, etc. Inheritance Object ABREngine Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ABREngine : Singleton<ABREngine> Remarks Many of the methods in the ABREngine must be run from Unity's Main Thread. For simple scenes this is not a problem, but when you start to integrate with an ABR Server things become more difficult. The general guideline is - if anything interacts directly with Unity, it should go in the main thread using IVLab.Utilities.UnityThreadScheduler . See the following example for information on how to properly handle asynchrony in ABR. Examples Most methods of the ABREngine can be accessed through its singleton Instance without needing to do a GetComponent : string mediaPath = ABREngine.Instance.MediaPath; Applications built on ABR should make heavy use of C#'s System.Threading.Task framework and IVLab.Utilities.UnityThreadScheduler . Here's a simple example that loads in the ABREngine, loads a state, and displays a single data impression. See for additional example calls into the ABREngine. using System; using System.Threading.Tasks; using UnityEngine; using IVLab.ABREngine; using IVLab.Utilities; public class SimpleABRExample : MonoBehaviour { void Start() { Task.Run(async () => { await ABREngine.GetInstance().WaitUntilInitialized(); // By this point, the ABREngine is initialized and we can // load a state. await ABREngine .Instance .LoadStateAsync<ResourceStateFileLoader>(\"exampleState.json\"); // At this point, all the data impressions, visassets, and // data have been loaded into ABR, so we can retrieve them. SimpleGlyphDataImpression gi = ABREngine .Instance .GetDataImpression( new Guid(\"48cca33b-e1ae-4998-a0d1-2eee1e75e07d\") ) as SimpleGlyphDataImpression; // Now that we have the impression, we can modify its // contents (e.g. remove the colormap) gi.colormap = null; // Lastly, render the data impressions.... but this MUST be // done in the Unity Main thread. UnityThreadScheduler.Instance.RunMainThreadWork(() => { ABREngine.Instance.Render(); }); }); } } Fields httpClient Client for internal application usage to make web requests. Declaration public static readonly HttpClient httpClient Field Value Type Description HttpClient OnStateChanged Delegate that is called whenever ABRState is updated. Declaration public ABREngine.StateChangeDelegate OnStateChanged Field Value Type Description ABREngine.StateChangeDelegate Examples Developers may need to use this if they want to know when the state has been updated: using UnityEngine; using IVLab.ABREngine; public class ABRStateExample : MonoBehaviour { void Start() { ABREngine.Instance.OnStateChanged += ExampleOnStateChanged; } void ExampleOnStateChanged(JObject state) { Debug.Log(state[\"version\"]); } } Properties ABRTransform Cached, readonly version of the ABREngine transform so it can be accessed in a non-main thread Declaration public Transform ABRTransform { get; } Property Value Type Description Transform Config Provides access to all of the ABRConfig options that were loaded in at startup Declaration public ABRConfig Config { get; } Property Value Type Description ABRConfig Data System-wide manager for Data (the geometry and variables that make up the visualization) Declaration public DataManager Data { get; } Property Value Type Description DataManager DataListener A listener for data connections (e.g., Send2ABR from ParaView) Declaration public SocketDataListener DataListener { get; } Property Value Type Description SocketDataListener IsInitialized Declaration public bool IsInitialized { get; } Property Value Type Description Boolean MediaPath Media path where all datasets and visassets are located. If the media path is provided in the ABRConfig, use that media path. Otherwise, use Unity's Application.persistentDataPath . Declaration public string MediaPath { get; } Property Value Type Description String State JSON representation of the state that has been previously loaded into ABR Declaration public JObject State { get; } Property Value Type Description JObject VisAssets System-wide manager for VisAssets (visual elements used in the visualization) Declaration public VisAssetManager VisAssets { get; } Property Value Type Description VisAssetManager Methods AddDataImpressionGroup(String) Add a bare data impression group into the ABR scene. The group bounds defaults to the bounds found in ABRConfig.Info.defaultBounds , and the position/rotation default to zero. Declaration public DataImpressionGroup AddDataImpressionGroup(string name) Parameters Type Name Description String name Returns Type Description DataImpressionGroup The group that has been added. AddDataImpressionGroup(String, Guid) Add a new data impression group with a particular UUID. The group bounds defaults to the bounds found in ABRConfig.Info.defaultBounds , and the position/rotation default to zero. Declaration public DataImpressionGroup AddDataImpressionGroup(string name, Guid uuid) Parameters Type Name Description String name Guid uuid Returns Type Description DataImpressionGroup The group that has been added. AddDataImpressionGroup(String, Guid, Bounds, Vector3, Quaternion) Add a new data impression group with a particular UUID, bounds, position, and rotation. Declaration public DataImpressionGroup AddDataImpressionGroup(string name, Guid uuid, Bounds bounds, Vector3 position, Quaternion rotation) Parameters Type Name Description String name Guid uuid Bounds bounds Vector3 position Quaternion rotation Returns Type Description DataImpressionGroup The group that has been added. Awake() Declaration protected override void Awake() ClearState() Remove all data impression groups from the ABR scene (and in turn, remove all data impressions). Declaration public void ClearState() DuplicateDataImpression(IDataImpression) Create and return a duplicate copy of the given data impression. All inputs in the new data impression are identical to the one being copied. By default duplicate data impressions will be placed in their default groups (grouped by dataset). Declaration public IDataImpression DuplicateDataImpression(IDataImpression impression) Parameters Type Name Description IDataImpression impression Returns Type Description IDataImpression The new data impression. DuplicateDataImpression(IDataImpression, DataImpressionGroup) Create and return a duplicate copy of the given data impression. The data impression will be placed within the specified DataImpressionGroup group . If group is null, the default group will be used (either conforming to the input dataset that the data impression has, or the default empty group) Declaration public IDataImpression DuplicateDataImpression(IDataImpression dataImpression, DataImpressionGroup group) Parameters Type Name Description IDataImpression dataImpression DataImpressionGroup group Returns Type Description IDataImpression The new data impression. DuplicateDataImpression(IDataImpression, Boolean) Create and return a duplicate copy of the given data impression, but ensure that the copy is within the same data impression group as its source. Declaration public IDataImpression DuplicateDataImpression(IDataImpression dataImpression, bool retainGroup = true) Parameters Type Name Description IDataImpression dataImpression Boolean retainGroup Returns Type Description IDataImpression The new data impression. DuplicateDataImpression(Guid) Create and return a duplicate copy of the data impression with a given UUID. All inputs in the new data impression are identical to the one being copied. By default duplicate data impressions will be placed in their default groups (grouped by dataset). Declaration public IDataImpression DuplicateDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description IDataImpression The new data impression. GetAllDataImpressions() Retrieve ALL data impressions that currently exist within the Engine, over ALL data impression groups. Declaration public List<IDataImpression> GetAllDataImpressions() Returns Type Description List < IDataImpression > GetDataImpression(Func<IDataImpression, Boolean>) Retreive the first data impression found with a particular function crieteria Declaration public IDataImpression GetDataImpression(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Returns Type Description IDataImpression A data impression if found, null otherwise. GetDataImpression(Guid) Retreive a particular data impression from the Engine Declaration public IDataImpression GetDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description IDataImpression A data impression if found, null otherwise. Remarks It is often useful to cast the result of this data impression so individual inputs can be modified: SimpleSurfaceDataImpression di = ABREngine.Instance.GetDataImpression(someGuid) as SimpleSurfaceDataImpression GetDataImpression<T>() Retreive the first data impression found with a particular type Declaration public T GetDataImpression<T>() where T : IDataImpression Returns Type Description T Type Parameters Name Description T GetDataImpression<T>(Func<T, Boolean>) Retreive the first data impression found with a particular type AND function crieteria Declaration public T GetDataImpression<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Returns Type Description T Type Parameters Name Description T GetDataImpressionGroup(Guid) Retrieve a particular data impression group from the scene Declaration public DataImpressionGroup GetDataImpressionGroup(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description DataImpressionGroup A data impression with a given UUID GetDataImpressionGroupByDataset(Dataset) Retrieve the first data impression group found that is associated with a particular dataset. Declaration public DataImpressionGroup GetDataImpressionGroupByDataset(Dataset ds) Parameters Type Name Description Dataset ds Returns Type Description DataImpressionGroup A data impression with the given dataset. GetDataImpressionGroups() Retrieve all data impression groups that currently exist in the Unity ABR scene. Declaration public Dictionary<Guid, DataImpressionGroup> GetDataImpressionGroups() Returns Type Description Dictionary < Guid , DataImpressionGroup > Dictionary mapping of (uuid => DataImpressionGroup ) GetDataImpressions(Func<IDataImpression, Boolean>) Retrieve all data impressions matching a particular criteria Declaration public List<IDataImpression> GetDataImpressions(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Returns Type Description List < IDataImpression > GetDataImpressions<T>() Retrieve all data impressions of a particular type Declaration public List<T> GetDataImpressions<T>() where T : IDataImpression Returns Type Description List <T> Type Parameters Name Description T GetDataImpressions<T>(Func<T, Boolean>) Retrieve all data impressions of a particular type AND matching criteria Declaration public List<T> GetDataImpressions<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Returns Type Description List <T> Type Parameters Name Description T GetDataImpressionsOfType<T>() Retrieve all data impressions in an ABR state of a given impression type (e.g., all SimpleSurfaceDataImpression s) Declaration [Obsolete(\"GetDataImpressionsOfType<T> is obsolete, use GetDataImpressions<T> instead\")] public List<T> GetDataImpressionsOfType<T>() where T : IDataImpression Returns Type Description List <T> A list of data impressions that have a particular type Type Parameters Name Description T GetDataImpressionsWithTag(String) Retrieve all data impressions in an ABR scene that have a particular tag. Note that the ABREngine does not do anything with tags; these exist solely for application developers. Declaration public List<IDataImpression> GetDataImpressionsWithTag(string tag) Parameters Type Name Description String tag Returns Type Description List < IDataImpression > A list of data impressions with a particular tag GetEncodedGameObject(Guid) Retrieve the encoded game object in the Unity scene associated with a particular data impression, identified by its guid. Declaration public EncodedGameObject GetEncodedGameObject(Guid impressionGuid) Parameters Type Name Description Guid impressionGuid Returns Type Description EncodedGameObject An EncodedGameObject (MonoBehaviour) of the Data Impression as it exists in the Unity Scene, or null if no such impression exists. GetGroupFromImpression(IDataImpression) Get the group a particular data impression Declaration public DataImpressionGroup GetGroupFromImpression(IDataImpression dataImpression) Parameters Type Name Description IDataImpression dataImpression Returns Type Description DataImpressionGroup HasDataImpression(Guid) Check to see if the data impression with a given uuid exists Declaration public bool HasDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean A boolean whether or not this data impression is present in this ABR state HasDataImpressionGroup(Guid) Check if a particular data impression group exists. Declaration public bool HasDataImpressionGroup(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean Boolean - true if the given group exists in the ABR scene, false otherwise. LoadState<T>(String) Load a state into ABR. Declaration public void LoadState<T>(string stateName) where T : IABRStateLoader, new() Parameters Type Name Description String stateName Type Parameters Name Description T Remarks NOTE: it is recommended to use ABREngine.LoadStateAsync instead of this method; this method provides no timing guarantees (e.g. that any data impressions would be initialized by the time it finishes). LoadStateAsync<T>(String) Load a state into ABR, asynchronously. This Task is finished when: (1) All Data and VisAssets from the state have been loaded, (2) The ABR scene has been rendered with all updates, and (3) the OnStateChanged callback has been fired. Declaration public async Task LoadStateAsync<T>(string stateName) where T : IABRStateLoader, new() Parameters Type Name Description String stateName Returns Type Description Task Type Parameters Name Description T Examples A state may be loaded from any of the following places: // A Resources folder (in Assets or in a Package) await ABREngine.Instance.LoadStateAsync<ResourceStateFileLoader>(\"exampleState.json\"); // A web resource await ABREngine.Instance.LoadStateAsync<HttpStateFileLoader>(\"http://localhost:8000/api/state\"); // A local file await ABREngine.Instance.LoadStateAsync<PathStateFileLoader>(\"C:/Users/VRDemo/Desktop/test.json\"); // A JSON string await ABREngine.Instance.LoadStateAsync<ResourceStateFileLoader>(\"{\\\"version\\\": \\\"0.2.0\\\", \\\"name\\\": \\\"test\\\"}\"); MoveImpressionToGroup(IDataImpression, DataImpressionGroup, Boolean) Move a data impression from its current group to a new group. Declaration public void MoveImpressionToGroup(IDataImpression dataImpression, DataImpressionGroup newGroup, bool allowOverwrite = true) Parameters Type Name Description IDataImpression dataImpression DataImpressionGroup newGroup Boolean allowOverwrite RegisterDataImpression(IDataImpression, DataImpressionGroup, Boolean) Add a new data impression, but add it to a specific group ID. Declaration public void RegisterDataImpression(IDataImpression dataImpression, DataImpressionGroup newGroup, bool allowOverwrite = true) Parameters Type Name Description IDataImpression dataImpression DataImpressionGroup newGroup Boolean allowOverwrite RegisterDataImpression(IDataImpression, Boolean) Register a new data impression, or replace an existing one. If the data impression has a dataset, defaults to placing it inside the existing group with the same dataset, or creating a new DataImpressionGroup with that dataset if no group exists yet. Declaration public void RegisterDataImpression(IDataImpression dataImpression, bool allowOverwrite = true) Parameters Type Name Description IDataImpression dataImpression Boolean allowOverwrite RemoveDataImpressionGroup(Guid) Remove a given data impression group from the scene, destroying all of the data impressions within the group. Declaration public void RemoveDataImpressionGroup(Guid uuid) Parameters Type Name Description Guid uuid Render() Go through every data impression group's impressions and render them. Each impression intelligently decides if the entire geometry needs to be recomputed (slow), or if only the style has changed (fast). Declaration public void Render() SaveStateAsync<T>(String) Save a state from the ABR Unity scene back to a particular destination. Declaration public async Task SaveStateAsync<T>(string overrideStateName = null) where T : IABRStateLoader, new() Parameters Type Name Description String overrideStateName Returns Type Description Task Type Parameters Name Description T Remarks The SaveState functionality is only implemented in a few IABRStateLoader s, namely PathStateFileLoader and HttpStateFileLoader . UnregisterDataImpression(Guid) Remove a data impression from the ABR scene Declaration public void UnregisterDataImpression(Guid uuid) Parameters Type Name Description Guid uuid WaitUntilInitialized() Wait until the Engine is fully initialized before proceeding to use it. Declaration public async Task WaitUntilInitialized() Returns Type Description Task Examples For example, if we want to do some ABREngine-dependant tasks in a MonoBehaviour Start(): using System.Threading.Tasks; using UnityEngine; using IVLab.ABREngine; public class ABRInitializerExample : MonoBehaviour { void Start() { Task.Run(async () => { // Wait for the engine to initialize... await ABREngine.Instance.WaitUntilInitialized(); // ... then print out some very important information that // depends on ABR being initialized Debug.Log(ABREngine.Instance.Config.Info.defaultBounds); }); } }"
  },
  "api/IVLab.ABREngine.ABREngine.StateChangeDelegate.html": {
    "href": "api/IVLab.ABREngine.ABREngine.StateChangeDelegate.html",
    "title": "Delegate ABREngine.StateChangeDelegate | ABREngine",
    "keywords": "Delegate ABREngine.StateChangeDelegate Delegate callback that is called whenever the ABRState is updated. This is useful for applications that build on ABR and need to know when the state has been updated. See OnStateChanged for usage. Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public delegate void StateChangeDelegate(JObject state); Parameters Type Name Description JObject state"
  },
  "api/IVLab.ABREngine.ABRInputAttribute.html": {
    "href": "api/IVLab.ABREngine.ABRInputAttribute.html",
    "title": "Class ABRInputAttribute | ABREngine",
    "keywords": "Class ABRInputAttribute Input attribute used for annotating an ABR input to a data impression (VisAsset, DataVariable, etc.) Inheritance Object Attribute ABRInputAttribute Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field)] public class ABRInputAttribute : Attribute, _Attribute Constructors ABRInputAttribute(String, String, UpdateLevel) Declaration public ABRInputAttribute(string inputName, string parameterName, UpdateLevel updateLevel) Parameters Type Name Description String inputName String parameterName UpdateLevel updateLevel Fields inputName Declaration public string inputName Field Value Type Description String parameterName Declaration public string parameterName Field Value Type Description String updateLevel Declaration public UpdateLevel updateLevel Field Value Type Description UpdateLevel"
  },
  "api/IVLab.ABREngine.ABRInputGenre.html": {
    "href": "api/IVLab.ABREngine.ABRInputGenre.html",
    "title": "Enum ABRInputGenre | ABREngine",
    "keywords": "Enum ABRInputGenre Possible genres of a visualization input Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public enum ABRInputGenre Fields Name Description KeyData Primitive PrimitiveGradient Variable VisAsset"
  },
  "api/IVLab.ABREngine.ABRInputIndexerModule.html": {
    "href": "api/IVLab.ABREngine.ABRInputIndexerModule.html",
    "title": "Class ABRInputIndexerModule | ABREngine",
    "keywords": "Class ABRInputIndexerModule Convenience class to avoid having to repeatedly manage reflection when adjusting ABR inputs to Data Impressions. Inheritance Object ABRInputIndexerModule Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ABRInputIndexerModule Constructors ABRInputIndexerModule(DataImpression) Declaration public ABRInputIndexerModule(DataImpression target) Parameters Type Name Description DataImpression target Properties ABRInputFields Declaration protected FieldInfo[] ABRInputFields { get; } Property Value Type Description FieldInfo [] ABRInputIndicesByName Declaration protected Dictionary<string, int> ABRInputIndicesByName { get; } Property Value Type Description Dictionary < String , Int32 > InputCount Declaration public int InputCount { get; } Property Value Type Description Int32 InputNames Declaration public string[] InputNames { get; } Property Value Type Description String [] Methods AssignInput(FieldInfo, IABRInput) Declaration protected void AssignInput(FieldInfo inputField, IABRInput value) Parameters Type Name Description FieldInfo inputField IABRInput value AssignInput(Int32, IABRInput) Declaration public void AssignInput(int inputIndex, IABRInput value) Parameters Type Name Description Int32 inputIndex IABRInput value AssignInput(String, IABRInput) Declaration public void AssignInput(string inputName, IABRInput value) Parameters Type Name Description String inputName IABRInput value CanAssignInput(Int32, IABRInput) Declaration public bool CanAssignInput(int inputIndex, IABRInput value) Parameters Type Name Description Int32 inputIndex IABRInput value Returns Type Description Boolean CanAssignInput(String, IABRInput) Declaration public bool CanAssignInput(string inputName, IABRInput value) Parameters Type Name Description String inputName IABRInput value Returns Type Description Boolean CatalogABRInputNames(FieldInfo[]) Declaration protected static string[] CatalogABRInputNames(FieldInfo[] abrInputs) Parameters Type Name Description FieldInfo [] abrInputs Returns Type Description String [] GetABRInputFields(Object) Declaration protected static FieldInfo[] GetABRInputFields(object target) Parameters Type Name Description Object target Returns Type Description FieldInfo [] GetInputField(Int32) Declaration public FieldInfo GetInputField(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description FieldInfo GetInputField(String) Declaration public FieldInfo GetInputField(string inputName) Parameters Type Name Description String inputName Returns Type Description FieldInfo GetInputIndex(String) Declaration public int GetInputIndex(string inputName) Parameters Type Name Description String inputName Returns Type Description Int32 GetInputName(Int32) Declaration public string GetInputName(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description String GetInputType(Int32) Declaration public Type GetInputType(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description Type GetInputType(String) Declaration public Type GetInputType(string inputName) Parameters Type Name Description String inputName Returns Type Description Type GetInputValue(Int32) Declaration public IABRInput GetInputValue(int inputIndex) Parameters Type Name Description Int32 inputIndex Returns Type Description IABRInput GetInputValue(String) Declaration public IABRInput GetInputValue(string inputName) Parameters Type Name Description String inputName Returns Type Description IABRInput IndexABRInputsByName(FieldInfo[]) Declaration protected static Dictionary<string, int> IndexABRInputsByName(FieldInfo[] abrInputs) Parameters Type Name Description FieldInfo [] abrInputs Returns Type Description Dictionary < String , Int32 >"
  },
  "api/IVLab.ABREngine.ABRPlateType.html": {
    "href": "api/IVLab.ABREngine.ABRPlateType.html",
    "title": "Class ABRPlateType | ABREngine",
    "keywords": "Class ABRPlateType Attribute to match up this class with the string plate name from the ABR Schema Inheritance Object Attribute ABRPlateType Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ABRPlateType : Attribute, _Attribute Constructors ABRPlateType(String) Declaration public ABRPlateType(string plateType) Parameters Type Name Description String plateType Fields plateType Declaration public string plateType Field Value Type Description String"
  },
  "api/IVLab.ABREngine.ABRStateParser.html": {
    "href": "api/IVLab.ABREngine.ABRStateParser.html",
    "title": "Class ABRStateParser | ABREngine",
    "keywords": "Class ABRStateParser The ABRStateParser takes a (text) ABR state from JSON and loads its components into Unity, or takes the current state of objects in the Unity scene and translates it back into text. Inheritance Object ABRStateParser Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ABRStateParser Methods LoadState<T>(String, JObject) The LoadState method, the workhorse of this class, has side effects that range from populating new GameObjects for data impressions, to loading new data, to loading in VisAssets. By the end of LoadState , the visualization should be complete. Declaration public async Task<JObject> LoadState<T>(string stateText, JObject previousState) where T : IABRStateLoader, new() Parameters Type Name Description String stateText JObject previousState Returns Type Description Task < JObject > Type Parameters Name Description T SerializeState(JObject) The SerializeState method takes the current state of the ABR unity scene and attempts to put it back into JSON form. There are several fields that aren't stored anywhere in the ABREngine, and must thus rely on the JSON version of the previous state. Declaration public string SerializeState(JObject previousState) Parameters Type Name Description JObject previousState Returns Type Description String"
  },
  "api/IVLab.ABREngine.AnglePrimitive.html": {
    "href": "api/IVLab.ABREngine.AnglePrimitive.html",
    "title": "Class AnglePrimitive | ABREngine",
    "keywords": "Class AnglePrimitive Inheritance Object FloatPrimitive AnglePrimitive Implements IFloatPrimitive IPrimitive IABRInput Inherited Members FloatPrimitive.Genre FloatPrimitive.Value FloatPrimitive.ToString() FloatPrimitive.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class AnglePrimitive : FloatPrimitive, IFloatPrimitive, IPrimitive, IABRInput Constructors AnglePrimitive(Single) Declaration public AnglePrimitive(float value) Parameters Type Name Description Single value AnglePrimitive(String) Declaration public AnglePrimitive(string value) Parameters Type Name Description String value Properties ParsingRegex Declaration public override Regex ParsingRegex { get; } Property Value Type Description Regex Overrides FloatPrimitive.ParsingRegex Units Declaration public override string Units { get; } Property Value Type Description String Overrides FloatPrimitive.Units Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.BooleanPrimitive.html": {
    "href": "api/IVLab.ABREngine.BooleanPrimitive.html",
    "title": "Class BooleanPrimitive | ABREngine",
    "keywords": "Class BooleanPrimitive Inheritance Object BooleanPrimitive Implements IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class BooleanPrimitive : IPrimitive, IABRInput Constructors BooleanPrimitive() Declaration public BooleanPrimitive() BooleanPrimitive(Boolean) Declaration public BooleanPrimitive(bool value) Parameters Type Name Description Boolean value BooleanPrimitive(String) Declaration public BooleanPrimitive(string value) Parameters Type Name Description String value Properties Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre ParsingRegex Declaration public Regex ParsingRegex { get; } Property Value Type Description Regex Value Declaration public bool Value { get; protected set; } Property Value Type Description Boolean Methods GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.ColormapVisAsset.html": {
    "href": "api/IVLab.ABREngine.ColormapVisAsset.html",
    "title": "Class ColormapVisAsset | ABREngine",
    "keywords": "Class ColormapVisAsset Inheritance Object VisAsset ColormapVisAsset Implements IColormapVisAsset IVisAsset IABRInput Inherited Members VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ColormapVisAsset : VisAsset, IColormapVisAsset, IVisAsset, IABRInput Constructors ColormapVisAsset() Declaration public ColormapVisAsset() ColormapVisAsset(Guid, Texture2D) Declaration public ColormapVisAsset(Guid uuid, Texture2D colormap) Parameters Type Name Description Guid uuid Texture2D colormap ColormapVisAsset(Texture2D) Declaration public ColormapVisAsset(Texture2D colormap) Parameters Type Name Description Texture2D colormap Properties Colormap Declaration public Texture2D Colormap { get; } Property Value Type Description Texture2D VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods GetColorGradient() Declaration public Texture2D GetColorGradient() Returns Type Description Texture2D GetColorInterp(Single) Declaration public Color GetColorInterp(float interpAmount) Parameters Type Name Description Single interpAmount Returns Type Description Color SolidColor(Color) Declaration public static ColormapVisAsset SolidColor(Color fillColor) Parameters Type Name Description Color fillColor Returns Type Description ColormapVisAsset Implements IColormapVisAsset IVisAsset IABRInput"
  },
  "api/IVLab.ABREngine.DataImpression.html": {
    "href": "api/IVLab.ABREngine.DataImpression.html",
    "title": "Class DataImpression | ABREngine",
    "keywords": "Class DataImpression Private data for a single data impression Should contain properties with attributes for all of the inputs Inheritance Object DataImpression SimpleGlyphDataImpression SimpleLineDataImpression SimpleSurfaceDataImpression SimpleVolumeDataImpression Implements IDataImpression IHasDataset Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public abstract class DataImpression : IDataImpression, IHasDataset Constructors DataImpression() Declaration public DataImpression() DataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID - if you override this constructor bad things might happen. Declaration public DataImpression(string uuid) Parameters Type Name Description String uuid Properties ImpressionMaterial Slot to load the material into at runtime Declaration protected virtual Material ImpressionMaterial { get; } Property Value Type Description Material InputIndexer Declaration public ABRInputIndexerModule InputIndexer { get; set; } Property Value Type Description ABRInputIndexerModule KeyDataRenderInfo Cache of current KeyData rendering information Declaration protected virtual IKeyDataRenderInfo KeyDataRenderInfo { get; set; } Property Value Type Description IKeyDataRenderInfo LayerName The layer to put this data impression in Warning: layer must exist in the Unity project! Declaration protected virtual string LayerName { get; } Property Value Type Description String MaterialName Name of the material to use to render this DataImpression Declaration protected virtual string MaterialName { get; } Property Value Type Description String MatPropBlock Storage for the rendering data to be sent to the shader Declaration protected virtual MaterialPropertyBlock MatPropBlock { get; set; } Property Value Type Description MaterialPropertyBlock RenderHints Declaration public RenderHints RenderHints { get; set; } Property Value Type Description RenderHints RenderInfo Cache of current rendering information Declaration protected virtual IDataImpressionRenderInfo RenderInfo { get; set; } Property Value Type Description IDataImpressionRenderInfo Tags A list of tags that this data impression has - solely used for external purposes (the engine does nothing with them) Declaration public List<string> Tags { get; set; } Property Value Type Description List < String > Uuid Declaration public Guid Uuid { get; set; } Property Value Type Description Guid Methods Cleanup(EncodedGameObject) Declaration public virtual void Cleanup(EncodedGameObject encodedGameObject) Parameters Type Name Description EncodedGameObject encodedGameObject ComputeGeometry() Declaration public virtual void ComputeGeometry() Copy() Unknown why it's necessary to copy each input individually, but here we are. Declaration public virtual IDataImpression Copy() Returns Type Description IDataImpression CopyExisting(IDataImpression) Update this data impression from an existing (possibly temporary) one. Declaration public virtual void CopyExisting(IDataImpression other) Parameters Type Name Description IDataImpression other GetDataset() By default, there's no dataset. DataImpressions should only have one dataset, and it's up to them individually to enforce that they correctly implement this. Declaration public virtual Dataset GetDataset() Returns Type Description Dataset HasTag(String) Declaration public bool HasTag(string tag) Parameters Type Name Description String tag Returns Type Description Boolean SetupGameObject(EncodedGameObject) Declaration public virtual void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject UpdateStyling(EncodedGameObject) Declaration public virtual void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject UpdateVisibility(EncodedGameObject) Declaration public virtual void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.DataImpressionGroup.html": {
    "href": "api/IVLab.ABREngine.DataImpressionGroup.html",
    "title": "Class DataImpressionGroup | ABREngine",
    "keywords": "Class DataImpressionGroup A DataImpressionGroup is, as the name suggests, a group of data impressions within ABR. DataImpressionGroups are contained within a defined bounding box, and automatically rescale all of their data to stay within this container. Each time a new key data object is loaded into a data impression in this group, the GroupToDataMatrix and GroupBounds are updated. Inheritance Object DataImpressionGroup Implements IHasDataset Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class DataImpressionGroup : IHasDataset Constructors DataImpressionGroup(String, Bounds, Transform) Declaration public DataImpressionGroup(string name, Bounds bounds, Transform parent) Parameters Type Name Description String name Bounds bounds Transform parent DataImpressionGroup(String, Guid, Bounds, Vector3, Quaternion, Transform) Declaration public DataImpressionGroup(string name, Guid uuid, Bounds bounds, Vector3 position, Quaternion rotation, Transform parent) Parameters Type Name Description String name Guid uuid Bounds bounds Vector3 position Quaternion rotation Transform parent Fields GroupBounds The actual bounds (contained within DataContainer) of the group-scale dataset Declaration public Bounds GroupBounds Field Value Type Description Bounds GroupToDataMatrix Transformation from the original data space into the room-scale bounds. Multiply by a vector to go from group-space into data-space. Declaration public Matrix4x4 GroupToDataMatrix Field Value Type Description Matrix4x4 Properties GroupContainer Room-scale (Unity rendering space) bounds that all data should be contained within Declaration public Bounds GroupContainer { get; } Property Value Type Description Bounds GroupRoot GameObject to place all Data Impressions under Declaration public GameObject GroupRoot { get; } Property Value Type Description GameObject Name Human-readable name for the data impression group Declaration public string Name { get; } Property Value Type Description String Uuid Unique identifier for this group Declaration public Guid Uuid { get; } Property Value Type Description Guid Methods AddDataImpression(IDataImpression, Boolean) Add a data impression to this group. All data impressions in the same group NEED to have the same dataset, error will be displayed otherwise. Declaration public void AddDataImpression(IDataImpression impression, bool allowOverwrite = true) Parameters Type Name Description IDataImpression impression Boolean allowOverwrite Clear() Remove all data impressions from this DataImpressionGroup Declaration public void Clear() GetDataImpression(Func<IDataImpression, Boolean>) Get a data impression matching a particular criteria Declaration public IDataImpression GetDataImpression(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Returns Type Description IDataImpression The data impression, if found, otherwise null Examples This method can be used to access data impressions in a functional manner, for example checking if the impression has a particular colormap assigned. DataImpressionGroup group; group.GetDataImpression((di) => { try { SimpleSurfaceDataImpression sdi = di as SimpleSurfaceDataImpression; return sdi.colormap.Uuid == new Guid(\"5a761a72-8bcb-11ea-9265-005056bae6d8\"); } catch { return null; } }); GetDataImpression(Guid) Get a data impression by its UUID Declaration public IDataImpression GetDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description IDataImpression The data impression, if found, otherwise null GetDataImpression<T>() Get a data impression matching a type Declaration public T GetDataImpression<T>() where T : IDataImpression Returns Type Description T Type Parameters Name Description T GetDataImpression<T>(Func<T, Boolean>) Get a data impression matching a type AND a particular criteria Declaration public T GetDataImpression<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Returns Type Description T Type Parameters Name Description T Examples This method can be used as a more elegant way to access individual types of data impressions. DataImpressionGroup group; group.GetDataImpression<SimpleSurfaceDataImpression>((di) => { // di is already a SimpleSurfaceDataImpression return sdi.colormap.Uuid == new Guid(\"5a761a72-8bcb-11ea-9265-005056bae6d8\"); }); GetDataImpressions() Return all data impressions inside this data impression group Declaration public Dictionary<Guid, IDataImpression> GetDataImpressions() Returns Type Description Dictionary < Guid , IDataImpression > GetDataImpressions(Func<IDataImpression, Boolean>) Return all data impressions that match a particular criteria Declaration public List<IDataImpression> GetDataImpressions(Func<IDataImpression, bool> criteria) Parameters Type Name Description Func < IDataImpression , Boolean > criteria Returns Type Description List < IDataImpression > GetDataImpressions<T>() Return all data impressions that have a particular type Declaration public List<T> GetDataImpressions<T>() where T : IDataImpression Returns Type Description List <T> Type Parameters Name Description T GetDataImpressions<T>(Func<T, Boolean>) Return all data impressions that match a particular criteria AND have a particular type Declaration public List<T> GetDataImpressions<T>(Func<T, bool> criteria) where T : IDataImpression Parameters Type Name Description Func <T, Boolean > criteria Returns Type Description List <T> Type Parameters Name Description T GetDataImpressionsOfType<T>() Get all data impressions in this group that match a particular type (e.g. get all SimpleSurfaceDataImpression s). Declaration [Obsolete(\"GetDataImpressionsOfType<T> is obsolete, use GetDataImpressions<T> instead\")] public List<T> GetDataImpressionsOfType<T>() where T : IDataImpression Returns Type Description List <T> Type Parameters Name Description T GetDataImpressionsWithTag(String) Get all data impressions that have a particular tag. Tags can be any string value. They are not used internally to the engine but can be useful for keeping track of data impressions in applications that use ABR. Declaration public List<IDataImpression> GetDataImpressionsWithTag(string tag) Parameters Type Name Description String tag Returns Type Description List < IDataImpression > GetDataset() Get the dataset that all impressions in this DataImpressionGroup are associated with. All DataImpressionGroups MUST have only one dataset. Declaration public Dataset GetDataset() Returns Type Description Dataset GetEncodedGameObject(Guid) Return the Unity GameObject associated with this particular UUID. Declaration public EncodedGameObject GetEncodedGameObject(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description EncodedGameObject HasDataImpression(Guid) Return whether or not the data impression with a given UUID is present in this DataImpressionGroup Declaration public bool HasDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean HasEncodedGameObject(Guid) Check to see if a data impression with a particular UUID has a GameObject yet Declaration public bool HasEncodedGameObject(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean RecalculateBounds() From scratch, recalculate the bounds of this DataImpressionGroup. Start with a zero-size bounding box and expand until it encapsulates all datasets. Declaration public bool RecalculateBounds() Returns Type Description Boolean Returns a boolean whether or not the bounds have changed since last recalculation RemoveDataImpression(Guid) Remove data impression, returning true if this data impression group is empty after the removal of such impression. Declaration public bool RemoveDataImpression(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Boolean RenderImpressions() Render every data impression inside this data impression group. Three levels of \"update\" are provided for each data impression (see RenderHints for more information): Recompute everything if the data source has changed (geometry, style, visibility) Only recompute style if only the style (variables, visassets, etc.) has changed Only toggle visibility if only that has changed Declaration public void RenderImpressions() Implements IHasDataset"
  },
  "api/IVLab.ABREngine.DataManager.html": {
    "href": "api/IVLab.ABREngine.DataManager.html",
    "title": "Class DataManager | ABREngine",
    "keywords": "Class DataManager Manager where all datasets, key data, and variables live. This class makes the connection between Datasets and RawDatasets. This class is useful for obtaining any KeyData and Variables needed to apply to Data Impressions. Inheritance Object DataManager Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class DataManager Examples Key data and variables can be loaded directly from the data manager: // Load an example dataset await ABREngine.Instance.Data.LoadRawDataset<ResourcesDataLoader>(\"Test/Test/KeyData/Example\"); // Load the high-level dataset that both Contour and Points are contained within Dataset ds = null; if (!ABREngine.Instance.Data.TryGetDataset(datasetPath, out ds)) { Debug.LogError(\"Unable to load dataset \" + datasetPath); return; } KeyData kd = null; // Populate the key data objects from dataset if (!ds.TryGetKeyData(\"Test/Test/KeyData/Example\", out kd)) { Debug.LogError(\"Key data not found in dataset\"); return; } ScalarDataVariable s = null; // Populate the variables from dataset if (!ds.TryGetScalarVar(\"Test/Test/ScalarVar/ExampleVar\", out s)) { Debug.LogError(\"Dataset does not have variable\"); return; } Additionally, the actual raw data can be loaded from the data manager. Generally this is not necessary, simply using the high-level variables above in conjunction with Data Impressions is usually sufficient. RawDataset rds = null; if (ABREngine.Instance.Data.TryGetRawDataset(\"Test/Test/KeyData/Example\", out rds)) { float[] var = rds.GetScalarArray(\"ExampleVar\"); } Constructors DataManager(String) Declaration public DataManager(string datasetPath) Parameters Type Name Description String datasetPath Methods CacheRawDataset(String, String, Byte[]) Save a copy of the RawDataset described by json and data to the media folder. Declaration public async Task CacheRawDataset(string dataPath, string json, byte[] data) Parameters Type Name Description String dataPath String json Byte [] data Returns Type Description Task GetDatasets() Retrieve all datasets that are currently loaded into the ABR Engine Declaration public List<Dataset> GetDatasets() Returns Type Description List < Dataset > List of currently loaded Datasets ImportRawDataset(String, RawDataset) Import a raw dataset into ABR. This method makes the dataset available as a key data object and makes all of its scalar and vector variables available across ABR. Declaration public void ImportRawDataset(string dataPath, RawDataset importing) Parameters Type Name Description String dataPath RawDataset importing LoadRawDataset<T>(String) Load a raw dataset into a RawDataset object by its data path and return the rawdataset after it has been successfully imported. Declaration public async Task<RawDataset> LoadRawDataset<T>(string dataPath) where T : IDataLoader, new() Parameters Type Name Description String dataPath Returns Type Description Task < RawDataset > Returns the actual RawDataset if the dataset was found, null if not found. Type Parameters Name Description T Examples Datasets may be loaded from any of the following locations: // From a file in the media directory RawDataset ds1 = await ABREngine.Instance.Data.LoadRawDataset<Media>(\"Test/Test/KeyData/Example\"); // From a web resource RawDataset ds2 = await ABREngine.Instance.Data.LoadRawDataset<HttpDataLoader>(\"Test/Test/KeyData/Example\"); TryGetDataset(String, out Dataset) Attempt to get a lightweight dataset by its data path. Declaration public bool TryGetDataset(string dataPath, out Dataset dataset) Parameters Type Name Description String dataPath Dataset dataset Returns Type Description Boolean Returns true if the dataset was found, and populates the out Dataset dataset accordingly. TryGetRawDataset(String, out RawDataset) Attempt to get a RawDataset at a particular data path. Declaration public bool TryGetRawDataset(string dataPath, out RawDataset dataset) Parameters Type Name Description String dataPath RawDataset dataset Returns Type Description Boolean Returns true if the raw dataset was found, false if not, and populates the out RawDataset dataset accordingly. UnloadRawDataset(String) Unload a raw dataset from a RawDataset object by its data path. Declaration public void UnloadRawDataset(string dataPath) Parameters Type Name Description String dataPath"
  },
  "api/IVLab.ABREngine.DataPath.DataPathType.html": {
    "href": "api/IVLab.ABREngine.DataPath.DataPathType.html",
    "title": "Enum DataPath.DataPathType | ABREngine",
    "keywords": "Enum DataPath.DataPathType Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public enum DataPathType Fields Name Description Dataset KeyData ScalarVar VectorVar"
  },
  "api/IVLab.ABREngine.DataPath.html": {
    "href": "api/IVLab.ABREngine.DataPath.html",
    "title": "Class DataPath | ABREngine",
    "keywords": "Class DataPath A path to a data source, be it a KeyData object, a Scalar Variable, a Vector Variable, or something else. Should take the form of Organization/DatasetName/* Example: TACC/GulfOfMexico/KeyData/bathymetry Example: TACC/GulfOfMexico/ScalarVar/temperature Inheritance Object DataPath Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public static class DataPath Methods FollowsConvention(String, DataPath.DataPathType) Declaration public static bool FollowsConvention(string label, DataPath.DataPathType pathType = DataPath.DataPathType.KeyData) Parameters Type Name Description String label DataPath.DataPathType pathType Returns Type Description Boolean GetConvention(DataPath.DataPathType) Declaration public static string GetConvention(DataPath.DataPathType pathType) Parameters Type Name Description DataPath.DataPathType pathType Returns Type Description String GetDataset(String) Declaration public static string GetDataset(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String GetDatasetPath(String) Declaration public static string GetDatasetPath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String GetName(String) Declaration public static string GetName(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String GetNamePath(String) Declaration public static string GetNamePath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String GetOrganization(String) Declaration public static string GetOrganization(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String GetOrganizationPath(String) Declaration public static string GetOrganizationPath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String GetPathType(String) Declaration public static string GetPathType(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String GetPathTypePath(String) Declaration public static string GetPathTypePath(string dataPath) Parameters Type Name Description String dataPath Returns Type Description String Join(String, DataPath.DataPathType) Declaration public static string Join(string path1, DataPath.DataPathType pathType) Parameters Type Name Description String path1 DataPath.DataPathType pathType Returns Type Description String Join(String, String) Declaration public static string Join(string path1, string path2) Parameters Type Name Description String path1 String path2 Returns Type Description String WarnOnDataPathFormat(String, DataPath.DataPathType) Declaration public static void WarnOnDataPathFormat(string dataPath, DataPath.DataPathType dataPathType) Parameters Type Name Description String dataPath DataPath.DataPathType dataPathType"
  },
  "api/IVLab.ABREngine.DataRange-1.html": {
    "href": "api/IVLab.ABREngine.DataRange-1.html",
    "title": "Class DataRange<T> | ABREngine",
    "keywords": "Class DataRange<T> Range descriptor for a variable, including a min and max. Inheritance Object DataRange<T> Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class DataRange<T> Type Parameters Name Description T Fields max Declaration public T max Field Value Type Description T min Declaration public T min Field Value Type Description T Methods Equals(DataRange<T>) Declaration public bool Equals(DataRange<T> other) Parameters Type Name Description DataRange <T> other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/IVLab.ABREngine.Dataset.html": {
    "href": "api/IVLab.ABREngine.Dataset.html",
    "title": "Class Dataset | ABREngine",
    "keywords": "Class Dataset Lightweight container for a collection of KeyData objects and variables that share a common coordinate space. Its bounding box contains all of data, and the rendered objects are children of this object's GameObject. Inheritance Object Dataset Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class Dataset Constructors Dataset(String, Bounds, Transform) Declaration public Dataset(string dataPath, Bounds bounds, Transform parent) Parameters Type Name Description String dataPath Bounds bounds Transform parent Fields DataSpaceBounds The bounds of the original, data-scale dataset, which grow as we add more datasets Declaration public Bounds DataSpaceBounds Field Value Type Description Bounds Properties Path Path of this dataset (should conform to DataPath) Declaration public string Path { get; } Property Value Type Description String Methods AddKeyData(IKeyData) Declaration public void AddKeyData(IKeyData keyData) Parameters Type Name Description IKeyData keyData AddScalarVariable(ScalarDataVariable) Declaration public void AddScalarVariable(ScalarDataVariable scalarVar) Parameters Type Name Description ScalarDataVariable scalarVar AddVectorVariable(VectorDataVariable) Declaration public void AddVectorVariable(VectorDataVariable vectorVar) Parameters Type Name Description VectorDataVariable vectorVar GetAllKeyData() Declaration public Dictionary<string, IKeyData> GetAllKeyData() Returns Type Description Dictionary < String , IKeyData > GetAllScalarVars() Declaration public Dictionary<string, ScalarDataVariable> GetAllScalarVars() Returns Type Description Dictionary < String , ScalarDataVariable > GetAllVectorVars() Declaration public Dictionary<string, VectorDataVariable> GetAllVectorVars() Returns Type Description Dictionary < String , VectorDataVariable > TryGetKeyData(String, out IKeyData) Declaration public bool TryGetKeyData(string dataPath, out IKeyData keyData) Parameters Type Name Description String dataPath IKeyData keyData Returns Type Description Boolean TryGetScalarVar(String, out ScalarDataVariable) Declaration public bool TryGetScalarVar(string dataPath, out ScalarDataVariable scalarVar) Parameters Type Name Description String dataPath ScalarDataVariable scalarVar Returns Type Description Boolean TryGetVectorVar(String, out VectorDataVariable) Declaration public bool TryGetVectorVar(string dataPath, out VectorDataVariable vectorVar) Parameters Type Name Description String dataPath VectorDataVariable vectorVar Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.DataTopology.html": {
    "href": "api/IVLab.ABREngine.DataTopology.html",
    "title": "Enum DataTopology | ABREngine",
    "keywords": "Enum DataTopology Extension of Unity's MeshTopology enum that defines more generic \"data\" topology, including voxels. Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public enum DataTopology Fields Name Description Lines LineStrip Points Quads Triangles Voxels"
  },
  "api/IVLab.ABREngine.EncodedGameObject.html": {
    "href": "api/IVLab.ABREngine.EncodedGameObject.html",
    "title": "Class EncodedGameObject | ABREngine",
    "keywords": "Class EncodedGameObject An EncodedGameObject connects a DataImpression with a Unity Game Object. Inheritance Object EncodedGameObject Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class EncodedGameObject : MonoBehaviour Properties Uuid Declaration public Guid Uuid { get; set; } Property Value Type Description Guid"
  },
  "api/IVLab.ABREngine.FilePathVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.FilePathVisAssetFetcher.html",
    "title": "Class FilePathVisAssetFetcher | ABREngine",
    "keywords": "Class FilePathVisAssetFetcher Fetch VisAsset from somewhere on local disk Inheritance Object FilePathVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class FilePathVisAssetFetcher : IVisAssetFetcher Constructors FilePathVisAssetFetcher(String) Declaration public FilePathVisAssetFetcher(string appDataPath) Parameters Type Name Description String appDataPath Properties VisAssetJson Declaration public string VisAssetJson { get; } Property Value Type Description String Methods GetArtifactJson(Guid) Declaration public async Task<JObject> GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < JObject > GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String GetColormapTexture(Guid) Declaration public async Task<Texture2D> GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetGlyphGameObject(Guid, JObject) Declaration public async Task<GameObject> GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < GameObject > GetGlyphNormalMapTexture(Guid, JObject) Declaration public async Task<Texture2D> GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < Texture2D > GetLineTexture(Guid) Declaration public async Task<Texture2D> GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceNormalMap(Guid) Declaration public async Task<Texture2D> GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceTexture(Guid) Declaration public async Task<Texture2D> GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.FloatPrimitive.html": {
    "href": "api/IVLab.ABREngine.FloatPrimitive.html",
    "title": "Class FloatPrimitive | ABREngine",
    "keywords": "Class FloatPrimitive Inheritance Object FloatPrimitive AnglePrimitive LengthPrimitive PercentPrimitive Implements IFloatPrimitive IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class FloatPrimitive : IFloatPrimitive, IPrimitive, IABRInput Constructors FloatPrimitive() Declaration public FloatPrimitive() FloatPrimitive(Single) Declaration public FloatPrimitive(float value) Parameters Type Name Description Single value FloatPrimitive(String) Declaration public FloatPrimitive(string value) Parameters Type Name Description String value Properties Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre ParsingRegex Declaration public virtual Regex ParsingRegex { get; } Property Value Type Description Regex Units Declaration public virtual string Units { get; } Property Value Type Description String Value Declaration public float Value { get; protected set; } Property Value Type Description Single Methods GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.GlyphGradient.html": {
    "href": "api/IVLab.ABREngine.GlyphGradient.html",
    "title": "Class GlyphGradient | ABREngine",
    "keywords": "Class GlyphGradient Inheritance Object VisAsset VisAssetGradient GlyphGradient Implements IGlyphVisAsset IVisAssetGradient < GlyphVisAsset > IVisAsset IABRInput Inherited Members VisAssetGradient.FromRaw<T, S>(RawVisAssetGradient) VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class GlyphGradient : VisAssetGradient, IGlyphVisAsset, IVisAssetGradient<GlyphVisAsset>, IVisAsset, IABRInput Properties Stops Declaration public List<float> Stops { get; } Property Value Type Description List < Single > VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 VisAssets Declaration public List<GlyphVisAsset> VisAssets { get; } Property Value Type Description List < GlyphVisAsset > Methods GetMesh(Int32) Declaration public Mesh GetMesh(int lod) Parameters Type Name Description Int32 lod Returns Type Description Mesh GetMesh(Int32, Int32) Declaration public Mesh GetMesh(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description Mesh GetMesh(Single, Int32) Declaration public Mesh GetMesh(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description Mesh GetNormalMap(Int32) Declaration public Texture2D GetNormalMap(int lod) Parameters Type Name Description Int32 lod Returns Type Description Texture2D GetNormalMap(Int32, Int32) Declaration public Texture2D GetNormalMap(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description Texture2D GetNormalMap(Single, Int32) Declaration public Texture2D GetNormalMap(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description Texture2D Initialize(Guid, List<GlyphVisAsset>, List<Single>) Declaration public void Initialize(Guid uuid, List<GlyphVisAsset> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List < GlyphVisAsset > visAssets List < Single > stops Implements IGlyphVisAsset IVisAssetGradient<T> IVisAsset IABRInput"
  },
  "api/IVLab.ABREngine.GlyphVisAsset.html": {
    "href": "api/IVLab.ABREngine.GlyphVisAsset.html",
    "title": "Class GlyphVisAsset | ABREngine",
    "keywords": "Class GlyphVisAsset Inheritance Object VisAsset GlyphVisAsset Implements IGlyphVisAsset IVisAsset IABRInput Inherited Members VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class GlyphVisAsset : VisAsset, IGlyphVisAsset, IVisAsset, IABRInput Constructors GlyphVisAsset() Declaration public GlyphVisAsset() GlyphVisAsset(List<Mesh>, List<Texture2D>) Declaration public GlyphVisAsset(List<Mesh> meshLods, List<Texture2D> normalMapLods) Parameters Type Name Description List < Mesh > meshLods List < Texture2D > normalMapLods GlyphVisAsset(Guid, List<Mesh>, List<Texture2D>) Declaration public GlyphVisAsset(Guid uuid, List<Mesh> meshLods, List<Texture2D> normalMapLods) Parameters Type Name Description Guid uuid List < Mesh > meshLods List < Texture2D > normalMapLods Properties MeshLods Declaration public List<Mesh> MeshLods { get; } Property Value Type Description List < Mesh > NormalMapLods Declaration public List<Texture2D> NormalMapLods { get; } Property Value Type Description List < Texture2D > VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods GetMesh(Int32) Declaration public Mesh GetMesh(int lod) Parameters Type Name Description Int32 lod Returns Type Description Mesh GetMesh(Int32, Int32) Declaration public Mesh GetMesh(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description Mesh GetMesh(Single, Int32) Declaration public Mesh GetMesh(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description Mesh GetNormalMap(Int32) Declaration public Texture2D GetNormalMap(int lod) Parameters Type Name Description Int32 lod Returns Type Description Texture2D GetNormalMap(Int32, Int32) Declaration public Texture2D GetNormalMap(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description Texture2D GetNormalMap(Single, Int32) Declaration public Texture2D GetNormalMap(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description Texture2D Implements IGlyphVisAsset IVisAsset IABRInput"
  },
  "api/IVLab.ABREngine.GradientBlendMap.html": {
    "href": "api/IVLab.ABREngine.GradientBlendMap.html",
    "title": "Class GradientBlendMap | ABREngine",
    "keywords": "Class GradientBlendMap Collection of essential textures for making texture-based VisAsset gradients happen. The blend maps are controlled via the and texture arrays. Inheritance Object GradientBlendMap Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class GradientBlendMap Constructors GradientBlendMap(List<Texture2D>, List<Single>, List<Single>) Declaration public GradientBlendMap(List<Texture2D> textures, List<float> stops, List<float> blendWidths) Parameters Type Name Description List < Texture2D > textures List < Single > stops List < Single > blendWidths GradientBlendMap(List<Texture2D>, List<Single>, Single) Declaration public GradientBlendMap(List<Texture2D> textures, List<float> stops, float blendWidth) Parameters Type Name Description List < Texture2D > textures List < Single > stops Single blendWidth GradientBlendMap(Texture2D) Declaration public GradientBlendMap(Texture2D texture) Parameters Type Name Description Texture2D texture Fields MaxSupportedTextures Maximum number of supported textures in a texture gradient Declaration public const int MaxSupportedTextures = 16 Field Value Type Description Int32 Properties AspectRatios Array of aspect ratios (width / height) of each texture Declaration public float[] AspectRatios { get; } Property Value Type Description Single [] BlendMaps Red/Green/Blue/Alpha texture that describes the blending between Stops . For a gradient with 3 elements, this texture will look red on the left, green in the middle, and blue on the right. For a gradient with 12 elements, this texture will have 3 rows with red, green, blue, and alpha. The transition blend is defined by blendWidth . For a gradient with 6 elements, the BlendMap looks something like this: Declaration public Texture2D BlendMaps { get; } Property Value Type Description Texture2D HeightWidthAspectRatios Array of aspect ratios (height / width) of each texture Declaration public float[] HeightWidthAspectRatios { get; } Property Value Type Description Single [] StopMaps Red/green/blue/alpha texture that describes how far along in the current stop we are, matching up with BlendMap . For a gradient with 3 elements, this texture will look like 3 black-to-white colormaps smooshed together. For a gradient with 6 elements, the StopMap looks something like this: Declaration public Texture2D StopMaps { get; } Property Value Type Description Texture2D Textures The actual combined texture that contains all visassets, stacked together vertically. For a gradient with 5 line texture elements, it might look something like this: Declaration public Texture2D Textures { get; } Property Value Type Description Texture2D"
  },
  "api/IVLab.ABREngine.html": {
    "href": "api/IVLab.ABREngine.html",
    "title": "Namespace IVLab.ABREngine | ABREngine",
    "keywords": "Namespace IVLab.ABREngine Classes ABRConfig The ABRConfig class provides access throughtout ABR to everything that is loaded in from a user's / developer's ABRConfig.json file. This is mainly useful for modifying the behaviour of the ABREngine internally, but can be occasionally helpful in other situations - for instance, if a developer needs to get access to the default bounding box / container that ABR is using. ABRConfig.Consts Global access to constants in the ABR Engine ABRConfigDefaults ABRConfigInfo These options, when declared in an ABRConfig.json file, change the behaviour of the ABREngine. JSON naming convention is analagous to field names seen here. ABREngine The ABREngine class is the main operational MonoBehaviour Singleton for the ABREngine-UnityPackage. It is in charge of kicking off all startup processes for ABR, including setting up connections with the server, the data listener, VisAssets and Data managers, etc. ABRInputAttribute Input attribute used for annotating an ABR input to a data impression (VisAsset, DataVariable, etc.) ABRInputIndexerModule Convenience class to avoid having to repeatedly manage reflection when adjusting ABR inputs to Data Impressions. ABRPlateType Attribute to match up this class with the string plate name from the ABR Schema ABRStateParser The ABRStateParser takes a (text) ABR state from JSON and loads its components into Unity, or takes the current state of objects in the Unity scene and translates it back into text. AnglePrimitive BooleanPrimitive ColormapVisAsset DataImpression Private data for a single data impression Should contain properties with attributes for all of the inputs DataImpressionGroup A DataImpressionGroup is, as the name suggests, a group of data impressions within ABR. DataImpressionGroups are contained within a defined bounding box, and automatically rescale all of their data to stay within this container. Each time a new key data object is loaded into a data impression in this group, the GroupToDataMatrix and GroupBounds are updated. DataManager Manager where all datasets, key data, and variables live. This class makes the connection between Datasets and RawDatasets. This class is useful for obtaining any KeyData and Variables needed to apply to Data Impressions. DataPath A path to a data source, be it a KeyData object, a Scalar Variable, a Vector Variable, or something else. Should take the form of Organization/DatasetName/* Example: TACC/GulfOfMexico/KeyData/bathymetry Example: TACC/GulfOfMexico/ScalarVar/temperature DataRange<T> Range descriptor for a variable, including a min and max. Dataset Lightweight container for a collection of KeyData objects and variables that share a common coordinate space. Its bounding box contains all of data, and the rendered objects are children of this object's GameObject. EncodedGameObject An EncodedGameObject connects a DataImpression with a Unity Game Object. FilePathVisAssetFetcher Fetch VisAsset from somewhere on local disk FloatPrimitive GlyphGradient GlyphVisAsset GradientBlendMap Collection of essential textures for making texture-based VisAsset gradients happen. The blend maps are controlled via the and texture arrays. HttpDataLoader Load data from a remote source HttpStateFileLoader Save/Load a state from a web URL HttpVisAssetFetcher Fetch VisAssets from a URL via HTTP InstancedMeshRenderer Custom-tailored Instanced Mesh Renderer for rendering glyphs in ABR. When using this, developers should make sure that \"Use Instanced\" is checked on the material that these glyphs are using. IntegerPrimitive KeyData Lightweight container for a data object KeyDataMapping Mapping between topologies / types of geometry and actual key data LengthPrimitive LineKeyData LineTextureGradient LineTextureVisAsset MediaDataLoader Load data from the ABREngine Media directory (specified in ABRConfig) Notifier Notifier for ABR state / cache updates, based on WebSockets. PathStateFileLoader Save/Load a state to a JSON file somewhere on disk PercentPrimitive PointKeyData PrimitiveGradient RawABRInput Raw string values from a state JSON being passed to ABR Matches InputValue definition from ABR State Schema Parameters can have one or more inputs RawDataset The raw variable arrays and geometry for a Data Object. RawDatasets can be loaded from a pair of .json and .bin files (JsonHeader and BinaryData, respectively). This RawDataset defines the specification for each of these files. RawDataset is not to be confused with Dataset , which represents a collection of RawDatasets which share a coordinate space, key data, and variables. RawDataset.BinaryData Actual geometric representation of the data to load from a file / socket RawDataset.JsonHeader Header that contains metadata for a particular RawDataset RawDatasetAdapter Adapter for converting other formats to ABRDataFormat. For example, OBJs => surfaces, or lists of points => ribbons, or lists of points => glyphs. RawPrimitiveGradient RawVisAssetGradient Serializable version of the VisAsset gradients that interacts with state/schema. Each VisAsset type should be responsible for implementing their own conversion to/from this. RenderHints Hints for rendering, such as whether a data impression should be hidden ResourcesDataLoader Load data from resources folder. NOTE: The actual data files (.bin) must have their file extension changed to .txt in order to be recognized. When data are imported, the identity of each is lost so we must guess which is which - currently guessing the larger of the two files is the \"Data\" and the smaller is \"Metadata\". ResourceStateFileLoader Load a state from any Resources folder within Unity (within any Package or Asset) ResourceVisAssetFetcher Fetch VisAsset from a Resources folder (in an Asset or Package) ScalarDataVariable SerializableFloatArray SerializableVectorArray SimpleGlyphDataImpression A \"Glyphs\" data impression that uses hand-sculpted geometry to depict point data. SimpleLineDataImpression A \"Lines\" data impression that uses hand-drawn line textures to depict line/flow data. SimpleSurfaceDataImpression A \"Surfaces\" data impression that uses hand-drawn textures and color to show surface data. SimpleVolumeDataImpression SocketDataListener Listener for incoming upstream data, for example, from a Send2ABR plugin for ParaView. Operation of this class is controlled by the ABRConfig option dataListenerPort . StateLocalVisAssetFetcher Fetch a VisAsset from the currently loaded ABR state. Currently only valid for ColormapVisAssets. SurfaceKeyData SurfaceTextureGradient SurfaceTextureVisAsset TextStateFileLoader Load a state from a serialized JSON string TypeExtentions UnityObjectSerializer Custom converter to allow less verbose Newtonsoft serialization of Unity builtin objects. This converter manually handles several cases, add more as they become necessary. VectorDataVariable VisAsset Generic type for all VisAssets to inherit from VisAssetGradient Concrete implementation of a VisAsset Gradient, which is a collection of VisAssets that also counts as a single VisAsset. VisAssetLoader Use a particular fetcher to try and get the VisAsset from its source, and construct the requisite Unity objects and IVisAsset to add. VisAssetManager The VisAssetManager is where all VisAssets are stored within the ABREngine. VisAssets can be loaded and fetched from various sources defined in VisAssetFetchers . VolumeKeyData Structs SocketTextData Interfaces IABRInput Interface that includes every input to a data impression. Every type of ABR input should fit into a specific ABRInputGenre. IABRStateLoader Generic state loader for ABR. Implementations should allow both retrieving a state ( GetState ) and saving a state ( SaveState ). IColormapVisAsset IDataImpression Public interface for a single ABR visualization layer IDataImpressionRenderInfo IDataLoader Generic interface to fetch a RawDataset from somewhere IDataVariable<T> Lightweight / high level container for a data variable. Variables keep track of their ranges and path, but the actual Data Arrays are preserved within the original RawDataset. IFloatPrimitive Represents a numeric primitive value (e.g. 10deg, 96cm, or 4.6) IGlyphVisAsset IHasDataset Should be assigned to anything that is associated with a dataset (e.g. KeyData, Variables, and even DataImpressions once they have valid KeyData) IIntegerPrimitive Represents an integer primitive value IKeyData IKeyDataRenderInfo ILineTextureVisAsset IPrimitive Representative of a primitive element (usually used in ABR Inputs). These should match the primitive input types in the schema. IPrimitiveGradient ISurfaceTextureVisAsset ITextureGradient A VisAsset gradient described by a texture (or, series of textures) IVisAsset IVisAssetFetcher Generic fetcher that supports fetching all types of VisAssets from a particular source. IVisAssetGradient<T> A gradient consisting of VisAssets of any type. NOTE: Texture-based gradients (Surface/Line textures and colormaps) must have 4 or fewer elements. Enums ABRInputGenre Possible genres of a visualization input DataPath.DataPathType DataTopology Extension of Unity's MeshTopology enum that defines more generic \"data\" topology, including voxels. UpdateLevel How \"deep\" a particular update needs to go to fully address this ABR Input Delegates ABREngine.StateChangeDelegate Delegate callback that is called whenever the ABRState is updated. This is useful for applications that build on ABR and need to know when the state has been updated. See OnStateChanged for usage."
  },
  "api/IVLab.ABREngine.HttpDataLoader.html": {
    "href": "api/IVLab.ABREngine.HttpDataLoader.html",
    "title": "Class HttpDataLoader | ABREngine",
    "keywords": "Class HttpDataLoader Load data from a remote source Inheritance Object HttpDataLoader Implements IDataLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class HttpDataLoader : IDataLoader Methods TryLoadDataAsync(String) Declaration public async Task<RawDataset> TryLoadDataAsync(string dataPath) Parameters Type Name Description String dataPath Returns Type Description Task < RawDataset > Implements IDataLoader"
  },
  "api/IVLab.ABREngine.HttpStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.HttpStateFileLoader.html",
    "title": "Class HttpStateFileLoader | ABREngine",
    "keywords": "Class HttpStateFileLoader Save/Load a state from a web URL Inheritance Object HttpStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class HttpStateFileLoader : IABRStateLoader Constructors HttpStateFileLoader() Declaration public HttpStateFileLoader() Methods GetState(String) Declaration public async Task<JObject> GetState(string url) Parameters Type Name Description String url Returns Type Description Task < JObject > SaveState(String, String) Declaration public async Task SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState Returns Type Description Task Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.HttpVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.HttpVisAssetFetcher.html",
    "title": "Class HttpVisAssetFetcher | ABREngine",
    "keywords": "Class HttpVisAssetFetcher Fetch VisAssets from a URL via HTTP Inheritance Object HttpVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class HttpVisAssetFetcher : IVisAssetFetcher Constructors HttpVisAssetFetcher(String, String) Declaration public HttpVisAssetFetcher(string serverUrl, string appDataPath) Parameters Type Name Description String serverUrl String appDataPath Properties VisAssetJson Declaration public string VisAssetJson { get; } Property Value Type Description String Methods GetArtifactJson(Guid) Declaration public async Task<JObject> GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < JObject > GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String GetArtifactPath(Guid) Declaration public string GetArtifactPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String GetColormapTexture(Guid) Declaration public async Task<Texture2D> GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetGlyphGameObject(Guid, JObject) Declaration public async Task<GameObject> GetGlyphGameObject(Guid uuid, JObject lodInfo) Parameters Type Name Description Guid uuid JObject lodInfo Returns Type Description Task < GameObject > GetGlyphNormalMapTexture(Guid, JObject) Declaration public async Task<Texture2D> GetGlyphNormalMapTexture(Guid uuid, JObject lodInfo) Parameters Type Name Description Guid uuid JObject lodInfo Returns Type Description Task < Texture2D > GetLineTexture(Guid) Declaration public async Task<Texture2D> GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetLocalArtifactJsonPath(Guid) Declaration public string GetLocalArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String GetSurfaceNormalMap(Guid) Declaration public async Task<Texture2D> GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceTexture(Guid) Declaration public async Task<Texture2D> GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.IABRInput.html": {
    "href": "api/IVLab.ABREngine.IABRInput.html",
    "title": "Interface IABRInput | ABREngine",
    "keywords": "Interface IABRInput Interface that includes every input to a data impression. Every type of ABR input should fit into a specific ABRInputGenre. Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IABRInput Properties Genre Declaration ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre Methods GetRawABRInput() Declaration RawABRInput GetRawABRInput() Returns Type Description RawABRInput"
  },
  "api/IVLab.ABREngine.IABRStateLoader.html": {
    "href": "api/IVLab.ABREngine.IABRStateLoader.html",
    "title": "Interface IABRStateLoader | ABREngine",
    "keywords": "Interface IABRStateLoader Generic state loader for ABR. Implementations should allow both retrieving a state ( GetState ) and saving a state ( SaveState ). Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IABRStateLoader Methods GetState(String) Load a state based on some text (perhaps a JSON string, a file path, or URL) Declaration Task<JObject> GetState(string stateText) Parameters Type Name Description String stateText Returns Type Description Task < JObject > SaveState(String, String) Save a serialized JSON state with a particular name Declaration Task SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState Returns Type Description Task"
  },
  "api/IVLab.ABREngine.IColormapVisAsset.html": {
    "href": "api/IVLab.ABREngine.IColormapVisAsset.html",
    "title": "Interface IColormapVisAsset | ABREngine",
    "keywords": "Interface IColormapVisAsset Inherited Members IVisAsset.Uuid IVisAsset.ImportTime IVisAsset.VisAssetCount IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IColormapVisAsset : IVisAsset, IABRInput Methods GetColorGradient() Declaration Texture2D GetColorGradient() Returns Type Description Texture2D"
  },
  "api/IVLab.ABREngine.IDataImpression.html": {
    "href": "api/IVLab.ABREngine.IDataImpression.html",
    "title": "Interface IDataImpression | ABREngine",
    "keywords": "Interface IDataImpression Public interface for a single ABR visualization layer Inherited Members IHasDataset.GetDataset() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IDataImpression : IHasDataset Properties InputIndexer Used for getting/setting ABRInputs on this DataImpression Declaration ABRInputIndexerModule InputIndexer { get; } Property Value Type Description ABRInputIndexerModule RenderHints Any hints to provide the rendering engine, such as if the impression should be hidden Declaration RenderHints RenderHints { get; set; } Property Value Type Description RenderHints Uuid Unique identifier for this Data Impression Assigned on object creation Declaration Guid Uuid { get; set; } Property Value Type Description Guid Methods Cleanup(EncodedGameObject) When this data impression is done being used, clean up after itself if necessary. This method may need access to the GameObject the data impression is applied to. Declaration void Cleanup(EncodedGameObject encodedGameObject) Parameters Type Name Description EncodedGameObject encodedGameObject ComputeGeometry() Populate rendering information (Geometry) for the DataImpression. This is triggered by the DataImpressionGroup when an UpdateLevel.Data happens. This step is generally expensive . Declaration void ComputeGeometry() Copy() Copy a data impression, giving a new Uuid Declaration IDataImpression Copy() Returns Type Description IDataImpression CopyExisting(IDataImpression) Update this data impression from an existing (possibly temporary) one. Declaration void CopyExisting(IDataImpression other) Parameters Type Name Description IDataImpression other HasTag(String) Return if this data impression has a particular string tag (for external purposes only, the engine currently does nothing with tags) Declaration bool HasTag(string tagName) Parameters Type Name Description String tagName Returns Type Description Boolean SetupGameObject(EncodedGameObject) Take geometric rendering information computed in ComputeGeometry() and sets up proper game object(s) and components for this Data Impression. Transfers geometry into Unity format (e.g. a Mesh ). No geometric computations should happen in this method, and it should generally be lightweight . Declaration void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject UpdateStyling(EncodedGameObject) Update the \"styling\" of an impression by sending each styling parameter to the shader. Occasionally will need to set per-vertex items like transforms. This method should generally be lightweight . Declaration void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject UpdateVisibility(EncodedGameObject) Update the visibility of an impression (hidden or shown) Declaration void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject"
  },
  "api/IVLab.ABREngine.IDataImpressionRenderInfo.html": {
    "href": "api/IVLab.ABREngine.IDataImpressionRenderInfo.html",
    "title": "Interface IDataImpressionRenderInfo | ABREngine",
    "keywords": "Interface IDataImpressionRenderInfo Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IDataImpressionRenderInfo"
  },
  "api/IVLab.ABREngine.IDataLoader.html": {
    "href": "api/IVLab.ABREngine.IDataLoader.html",
    "title": "Interface IDataLoader | ABREngine",
    "keywords": "Interface IDataLoader Generic interface to fetch a RawDataset from somewhere Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IDataLoader Methods TryLoadDataAsync(String) Load data specified by dataPath from a particular source Declaration Task<RawDataset> TryLoadDataAsync(string dataPath) Parameters Type Name Description String dataPath Returns Type Description Task < RawDataset >"
  },
  "api/IVLab.ABREngine.IDataVariable-1.html": {
    "href": "api/IVLab.ABREngine.IDataVariable-1.html",
    "title": "Interface IDataVariable<T> | ABREngine",
    "keywords": "Interface IDataVariable<T> Lightweight / high level container for a data variable. Variables keep track of their ranges and path, but the actual Data Arrays are preserved within the original RawDataset. Inherited Members IHasDataset.GetDataset() IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IDataVariable<T> : IHasDataset, IABRInput Type Parameters Name Description T Properties CustomizedRange Have this var's ranges been customized? Declaration bool CustomizedRange { get; set; } Property Value Type Description Boolean OriginalRange Save the original range in case the user wants to reset it later. Declaration DataRange<T> OriginalRange { get; set; } Property Value Type Description DataRange <T> Path The DataPath that represents this variable Declaration string Path { get; } Property Value Type Description String Range Range is calculated by the DataManager when it imports a new dataset. Range is calculated from the smallest/largest values encountered across every instance of this variable, across all datasets. Declaration DataRange<T> Range { get; set; } Property Value Type Description DataRange <T> SpecificRanges Dictionary of keyData paths that have specific ranges for this variable Declaration Dictionary<string, DataRange<T>> SpecificRanges { get; set; } Property Value Type Description Dictionary < String , DataRange <T>> Methods GetArray(IKeyData) Get the actual data values in the context of this particular Key Data object Declaration T[] GetArray(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description T[] IsPartOf(IKeyData) Determine if this variable is a part of the key data Declaration bool IsPartOf(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.IFloatPrimitive.html": {
    "href": "api/IVLab.ABREngine.IFloatPrimitive.html",
    "title": "Interface IFloatPrimitive | ABREngine",
    "keywords": "Interface IFloatPrimitive Represents a numeric primitive value (e.g. 10deg, 96cm, or 4.6) Inherited Members IPrimitive.ParsingRegex IPrimitive.ToString() IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IFloatPrimitive : IPrimitive, IABRInput Properties Units Declaration string Units { get; } Property Value Type Description String Value Declaration float Value { get; } Property Value Type Description Single"
  },
  "api/IVLab.ABREngine.IGlyphVisAsset.html": {
    "href": "api/IVLab.ABREngine.IGlyphVisAsset.html",
    "title": "Interface IGlyphVisAsset | ABREngine",
    "keywords": "Interface IGlyphVisAsset Inherited Members IVisAsset.Uuid IVisAsset.ImportTime IVisAsset.VisAssetCount IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IGlyphVisAsset : IVisAsset, IABRInput Methods GetMesh(Int32) Get the mesh at an LOD for a single glyph visasset Declaration Mesh GetMesh(int lod) Parameters Type Name Description Int32 lod Returns Type Description Mesh GetMesh(Int32, Int32) Get the mesh at a particular index of the gradient Declaration Mesh GetMesh(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description Mesh GetMesh(Single, Int32) Get the mesh at a particular percentage (t-value) through the gradient Declaration Mesh GetMesh(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description Mesh GetNormalMap(Int32) Get the normal map at an LOD for a single glyph visasset Declaration Texture2D GetNormalMap(int lod) Parameters Type Name Description Int32 lod Returns Type Description Texture2D GetNormalMap(Int32, Int32) Get the normal map at a particular index of the gradient Declaration Texture2D GetNormalMap(int gradientIndex, int lod) Parameters Type Name Description Int32 gradientIndex Int32 lod Returns Type Description Texture2D GetNormalMap(Single, Int32) Get the normal map at a particular percentage (t-value) through the gradient Declaration Texture2D GetNormalMap(float gradientT, int lod) Parameters Type Name Description Single gradientT Int32 lod Returns Type Description Texture2D"
  },
  "api/IVLab.ABREngine.IHasDataset.html": {
    "href": "api/IVLab.ABREngine.IHasDataset.html",
    "title": "Interface IHasDataset | ABREngine",
    "keywords": "Interface IHasDataset Should be assigned to anything that is associated with a dataset (e.g. KeyData, Variables, and even DataImpressions once they have valid KeyData) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IHasDataset Methods GetDataset() Declaration Dataset GetDataset() Returns Type Description Dataset"
  },
  "api/IVLab.ABREngine.IIntegerPrimitive.html": {
    "href": "api/IVLab.ABREngine.IIntegerPrimitive.html",
    "title": "Interface IIntegerPrimitive | ABREngine",
    "keywords": "Interface IIntegerPrimitive Represents an integer primitive value Inherited Members IPrimitive.ParsingRegex IPrimitive.ToString() IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IIntegerPrimitive : IPrimitive, IABRInput Properties Units Declaration string Units { get; } Property Value Type Description String Value Declaration int Value { get; } Property Value Type Description Int32"
  },
  "api/IVLab.ABREngine.IKeyData.html": {
    "href": "api/IVLab.ABREngine.IKeyData.html",
    "title": "Interface IKeyData | ABREngine",
    "keywords": "Interface IKeyData Inherited Members IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IKeyData : IABRInput Properties Path The DataPath that represents this KeyData Declaration string Path { get; } Property Value Type Description String"
  },
  "api/IVLab.ABREngine.IKeyDataRenderInfo.html": {
    "href": "api/IVLab.ABREngine.IKeyDataRenderInfo.html",
    "title": "Interface IKeyDataRenderInfo | ABREngine",
    "keywords": "Interface IKeyDataRenderInfo Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IKeyDataRenderInfo"
  },
  "api/IVLab.ABREngine.ILineTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.ILineTextureVisAsset.html",
    "title": "Interface ILineTextureVisAsset | ABREngine",
    "keywords": "Interface ILineTextureVisAsset Inherited Members IVisAsset.Uuid IVisAsset.ImportTime IVisAsset.VisAssetCount IABRInput.Genre IABRInput.GetRawABRInput() ITextureGradient.BlendMaps Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface ILineTextureVisAsset : IVisAsset, IABRInput, ITextureGradient Methods GetTexture() Obtain the first (or, only) texture in a multi-visasset gradient Declaration Texture2D GetTexture() Returns Type Description Texture2D GetTexture(Int32) Obtain the texture at a specific index within a multi-visasset gradient Declaration Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description Texture2D GetTexture(Single) Obtain the texture at a specific t-value (percentage) within a multi-visasset gradient Declaration Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description Texture2D"
  },
  "api/IVLab.ABREngine.InstancedMeshRenderer.html": {
    "href": "api/IVLab.ABREngine.InstancedMeshRenderer.html",
    "title": "Class InstancedMeshRenderer | ABREngine",
    "keywords": "Class InstancedMeshRenderer Custom-tailored Instanced Mesh Renderer for rendering glyphs in ABR. When using this, developers should make sure that \"Use Instanced\" is checked on the material that these glyphs are using. Inheritance Object InstancedMeshRenderer Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class InstancedMeshRenderer : MonoBehaviour Fields block Declaration public MaterialPropertyBlock block Field Value Type Description MaterialPropertyBlock bounds Declaration public Bounds bounds Field Value Type Description Bounds cachedInstanceCount Declaration public int cachedInstanceCount Field Value Type Description Int32 instanceCount Declaration public int instanceCount Field Value Type Description Int32 instanceDensity Declaration public float instanceDensity Field Value Type Description Single instanceLocalTransforms Declaration public Matrix4x4[] instanceLocalTransforms Field Value Type Description Matrix4x4 [] instanceMaterial Declaration public Material instanceMaterial Field Value Type Description Material instanceMesh Declaration public Mesh instanceMesh Field Value Type Description Mesh renderInfo Declaration public Vector4[] renderInfo Field Value Type Description Vector4 [] subMeshIndex Declaration public int subMeshIndex Field Value Type Description Int32 useInstanced Declaration public bool useInstanced Field Value Type Description Boolean"
  },
  "api/IVLab.ABREngine.IntegerPrimitive.html": {
    "href": "api/IVLab.ABREngine.IntegerPrimitive.html",
    "title": "Class IntegerPrimitive | ABREngine",
    "keywords": "Class IntegerPrimitive Inheritance Object IntegerPrimitive Implements IIntegerPrimitive IPrimitive IABRInput Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class IntegerPrimitive : IIntegerPrimitive, IPrimitive, IABRInput Constructors IntegerPrimitive() Declaration public IntegerPrimitive() IntegerPrimitive(Int32) Declaration public IntegerPrimitive(int value) Parameters Type Name Description Int32 value IntegerPrimitive(String) Declaration public IntegerPrimitive(string value) Parameters Type Name Description String value Properties Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre ParsingRegex Declaration public virtual Regex ParsingRegex { get; } Property Value Type Description Regex Units Declaration public virtual string Units { get; } Property Value Type Description String Value Declaration public int Value { get; protected set; } Property Value Type Description Int32 Methods GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IIntegerPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.IPrimitive.html": {
    "href": "api/IVLab.ABREngine.IPrimitive.html",
    "title": "Interface IPrimitive | ABREngine",
    "keywords": "Interface IPrimitive Representative of a primitive element (usually used in ABR Inputs). These should match the primitive input types in the schema. Inherited Members IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IPrimitive : IABRInput Properties ParsingRegex The regex to use to convert this from a string. Group named \"value\" should be the floating point number, group named \"units\" should be the units, if any. Declaration Regex ParsingRegex { get; } Property Value Type Description Regex Methods ToString() Convert the primitive to a string so it can be sent along with the state Declaration string ToString() Returns Type Description String"
  },
  "api/IVLab.ABREngine.IPrimitiveGradient.html": {
    "href": "api/IVLab.ABREngine.IPrimitiveGradient.html",
    "title": "Interface IPrimitiveGradient | ABREngine",
    "keywords": "Interface IPrimitiveGradient Inherited Members IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IPrimitiveGradient : IABRInput Properties InputValue Declaration Guid InputValue { get; } Property Value Type Description Guid Points Declaration float[] Points { get; } Property Value Type Description Single [] Values Declaration string[] Values { get; } Property Value Type Description String []"
  },
  "api/IVLab.ABREngine.ISurfaceTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.ISurfaceTextureVisAsset.html",
    "title": "Interface ISurfaceTextureVisAsset | ABREngine",
    "keywords": "Interface ISurfaceTextureVisAsset Inherited Members IVisAsset.Uuid IVisAsset.ImportTime IVisAsset.VisAssetCount IABRInput.Genre IABRInput.GetRawABRInput() ITextureGradient.BlendMaps Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface ISurfaceTextureVisAsset : IVisAsset, IABRInput, ITextureGradient Methods GetTexture() Obtain the first (or, only) texture in a multi-visasset gradient Declaration Texture2D GetTexture() Returns Type Description Texture2D GetTexture(Int32) Obtain the texture at a specific index within a multi-visasset gradient Declaration Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description Texture2D GetTexture(Single) Obtain the texture at a specific t-value (percentage) within a multi-visasset gradient Declaration Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description Texture2D"
  },
  "api/IVLab.ABREngine.ITextureGradient.html": {
    "href": "api/IVLab.ABREngine.ITextureGradient.html",
    "title": "Interface ITextureGradient | ABREngine",
    "keywords": "Interface ITextureGradient A VisAsset gradient described by a texture (or, series of textures) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface ITextureGradient Properties BlendMaps Internal calculations for blend maps used for rendering Declaration GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap"
  },
  "api/IVLab.ABREngine.IVisAsset.html": {
    "href": "api/IVLab.ABREngine.IVisAsset.html",
    "title": "Interface IVisAsset | ABREngine",
    "keywords": "Interface IVisAsset Inherited Members IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IVisAsset : IABRInput Properties ImportTime (currently unused) The time that this VisAsset was imported into ABR Declaration DateTime ImportTime { get; set; } Property Value Type Description DateTime Uuid Globally-unique identifier for this VisAsset Declaration Guid Uuid { get; set; } Property Value Type Description Guid VisAssetCount How many VisAssets are in the gradient? (1 if it's not a gradient) Declaration int VisAssetCount { get; } Property Value Type Description Int32"
  },
  "api/IVLab.ABREngine.IVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.IVisAssetFetcher.html",
    "title": "Interface IVisAssetFetcher | ABREngine",
    "keywords": "Interface IVisAssetFetcher Generic fetcher that supports fetching all types of VisAssets from a particular source. Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IVisAssetFetcher Methods GetArtifactJson(Guid) Declaration Task<JObject> GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < JObject > GetArtifactJsonPath(Guid) Declaration string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String GetColormapTexture(Guid) Declaration Task<Texture2D> GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetGlyphGameObject(Guid, JObject) Declaration Task<GameObject> GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < GameObject > GetGlyphNormalMapTexture(Guid, JObject) Declaration Task<Texture2D> GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < Texture2D > GetLineTexture(Guid) Declaration Task<Texture2D> GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceNormalMap(Guid) Declaration Task<Texture2D> GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceTexture(Guid) Declaration Task<Texture2D> GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D >"
  },
  "api/IVLab.ABREngine.IVisAssetGradient-1.html": {
    "href": "api/IVLab.ABREngine.IVisAssetGradient-1.html",
    "title": "Interface IVisAssetGradient<T> | ABREngine",
    "keywords": "Interface IVisAssetGradient<T> A gradient consisting of VisAssets of any type. NOTE: Texture-based gradients (Surface/Line textures and colormaps) must have 4 or fewer elements. Inherited Members IVisAsset.Uuid IVisAsset.ImportTime IVisAsset.VisAssetCount IABRInput.Genre IABRInput.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public interface IVisAssetGradient<T> : IVisAsset, IABRInput where T : IVisAsset Type Parameters Name Description T Properties Stops List of gradient stops (length of VisAssets - 1) Declaration List<float> Stops { get; } Property Value Type Description List < Single > VisAssets List of all VisAssets inside this gradient Declaration List<T> VisAssets { get; } Property Value Type Description List <T> Methods Initialize(Guid, List<T>, List<Single>) Initialize this gradient with a UUID, some VisAssets, and some Stops. This is used instead of a constructor because it is much more flexible. Declaration void Initialize(Guid uuid, List<T> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List <T> visAssets List < Single > stops"
  },
  "api/IVLab.ABREngine.KeyData.html": {
    "href": "api/IVLab.ABREngine.KeyData.html",
    "title": "Class KeyData | ABREngine",
    "keywords": "Class KeyData Lightweight container for a data object Inheritance Object KeyData LineKeyData PointKeyData SurfaceKeyData VolumeKeyData Implements IKeyData IABRInput IHasDataset Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class KeyData : IKeyData, IABRInput, IHasDataset Constructors KeyData(String) Declaration public KeyData(string path) Parameters Type Name Description String path Properties Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre Path Declaration public string Path { get; } Property Value Type Description String Methods GetDataset() Declaration public Dataset GetDataset() Returns Type Description Dataset GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput Implements IKeyData IABRInput IHasDataset"
  },
  "api/IVLab.ABREngine.KeyDataMapping.html": {
    "href": "api/IVLab.ABREngine.KeyDataMapping.html",
    "title": "Class KeyDataMapping | ABREngine",
    "keywords": "Class KeyDataMapping Mapping between topologies / types of geometry and actual key data Inheritance Object KeyDataMapping Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public static class KeyDataMapping Fields typeMap Declaration public static Dictionary<DataTopology, Type> typeMap Field Value Type Description Dictionary < DataTopology , Type >"
  },
  "api/IVLab.ABREngine.Legends.ABRLegend.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegend.html",
    "title": "Class ABRLegend | ABREngine",
    "keywords": "Class ABRLegend Generate geometry, encodings, and legend images/GameObjects for ABR states Inheritance Object ABRLegend Namespace : IVLab.ABREngine.Legends Assembly : cs.temp.dll.dll Syntax public class ABRLegend : MonoBehaviour Fields entryOffset Declaration public Vector3 entryOffset Field Value Type Description Vector3 legendEntry2DPrefab Declaration public GameObject legendEntry2DPrefab Field Value Type Description GameObject updateOnABRStateChange Declaration public bool updateOnABRStateChange Field Value Type Description Boolean Methods CreateGlyphLegendEntry(SimpleGlyphDataImpression) Construct a glyph data impression for a glyph legend entry Declaration public static SimpleGlyphDataImpression CreateGlyphLegendEntry(SimpleGlyphDataImpression i) Parameters Type Name Description SimpleGlyphDataImpression i Returns Type Description SimpleGlyphDataImpression CreateRibbonLegendEntry(SimpleLineDataImpression) Construct a ribbon data impression for a line legend entry Declaration public static SimpleLineDataImpression CreateRibbonLegendEntry(SimpleLineDataImpression i) Parameters Type Name Description SimpleLineDataImpression i Returns Type Description SimpleLineDataImpression CreateSurfaceLegendEntry(SimpleSurfaceDataImpression) Construct a surface data impression for legend entry Declaration public static SimpleSurfaceDataImpression CreateSurfaceLegendEntry(SimpleSurfaceDataImpression i) Parameters Type Name Description SimpleSurfaceDataImpression i Returns Type Description SimpleSurfaceDataImpression CreateVolumeLegendEntry(SimpleVolumeDataImpression) Construct a volume data impression for legend entry Declaration public static SimpleVolumeDataImpression CreateVolumeLegendEntry(SimpleVolumeDataImpression i) Parameters Type Name Description SimpleVolumeDataImpression i Returns Type Description SimpleVolumeDataImpression UpdateLegend(Newtonsoft.Json.Linq.JObject) Update the legend display in Unity from the current ABR state Declaration public void UpdateLegend(Newtonsoft.Json.Linq.JObject state) Parameters Type Name Description Newtonsoft.Json.Linq.JObject state"
  },
  "api/IVLab.ABREngine.Legends.ABRLegendEntry.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegendEntry.html",
    "title": "Class ABRLegendEntry | ABREngine",
    "keywords": "Class ABRLegendEntry Controller for 3D GameObject-based legends for ABR Inheritance Object ABRLegendEntry Namespace : IVLab.ABREngine.Legends Assembly : cs.temp.dll.dll Syntax public class ABRLegendEntry : MonoBehaviour Methods SetTextLabel(ABRLegendEntry.Label, String) Declaration public void SetTextLabel(ABRLegendEntry.Label labelName, string text) Parameters Type Name Description ABRLegendEntry.Label labelName String text"
  },
  "api/IVLab.ABREngine.Legends.ABRLegendEntry.Label.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegendEntry.Label.html",
    "title": "Enum ABRLegendEntry.Label | ABREngine",
    "keywords": "Enum ABRLegendEntry.Label Namespace : IVLab.ABREngine.Legends Assembly : cs.temp.dll.dll Syntax public enum Label Fields Name Description TextLabels Title XAxis XAxisMax XAxisMin YAxis YAxisMax YAxisMin"
  },
  "api/IVLab.ABREngine.Legends.ABRLegendGeometry.html": {
    "href": "api/IVLab.ABREngine.Legends.ABRLegendGeometry.html",
    "title": "Class ABRLegendGeometry | ABREngine",
    "keywords": "Class ABRLegendGeometry Generate legend geometry for each data impression type defined in ABR. Methods in this class can generate the following variables and ranges: XAxis [0, 1] YAxis [0, 1] ZAxis [0, 1] Forward Up Inheritance Object ABRLegendGeometry Namespace : IVLab.ABREngine.Legends Assembly : cs.temp.dll.dll Syntax public static class ABRLegendGeometry Methods Glyphs(Int32) Generate a set of n glyphs to show a legend. Declaration public static RawDataset Glyphs(int variables) Parameters Type Name Description Int32 variables Number of variables to provide (1 var, 2 var) Returns Type Description RawDataset Ribbons(Int32) Generate a set of ribbons to show in a legend. Declaration public static RawDataset Ribbons(int variables) Parameters Type Name Description Int32 variables Number of variables to provide (1 var, 2 var) Returns Type Description RawDataset Surface() Generate a surface to show a legend Declaration public static RawDataset Surface() Returns Type Description RawDataset Volume() Generate a \"spherical\" volume for legends Declaration public static RawDataset Volume() Returns Type Description RawDataset"
  },
  "api/IVLab.ABREngine.Legends.html": {
    "href": "api/IVLab.ABREngine.Legends.html",
    "title": "Namespace IVLab.ABREngine.Legends | ABREngine",
    "keywords": "Namespace IVLab.ABREngine.Legends Classes ABRLegend Generate geometry, encodings, and legend images/GameObjects for ABR states ABRLegendEntry Controller for 3D GameObject-based legends for ABR ABRLegendGeometry Generate legend geometry for each data impression type defined in ABR. Methods in this class can generate the following variables and ranges: XAxis [0, 1] YAxis [0, 1] ZAxis [0, 1] Forward Up Enums ABRLegendEntry.Label"
  },
  "api/IVLab.ABREngine.LengthPrimitive.html": {
    "href": "api/IVLab.ABREngine.LengthPrimitive.html",
    "title": "Class LengthPrimitive | ABREngine",
    "keywords": "Class LengthPrimitive Inheritance Object FloatPrimitive LengthPrimitive Implements IFloatPrimitive IPrimitive IABRInput Inherited Members FloatPrimitive.Genre FloatPrimitive.Value FloatPrimitive.ToString() FloatPrimitive.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class LengthPrimitive : FloatPrimitive, IFloatPrimitive, IPrimitive, IABRInput Constructors LengthPrimitive(Single) Declaration public LengthPrimitive(float value) Parameters Type Name Description Single value LengthPrimitive(String) Declaration public LengthPrimitive(string value) Parameters Type Name Description String value Properties ParsingRegex Declaration public override Regex ParsingRegex { get; } Property Value Type Description Regex Overrides FloatPrimitive.ParsingRegex Units Declaration public override string Units { get; } Property Value Type Description String Overrides FloatPrimitive.Units Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.LineKeyData.html": {
    "href": "api/IVLab.ABREngine.LineKeyData.html",
    "title": "Class LineKeyData | ABREngine",
    "keywords": "Class LineKeyData Inheritance Object KeyData LineKeyData Implements IHasDataset IKeyData IABRInput Inherited Members KeyData.Genre KeyData.Path KeyData.GetDataset() KeyData.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class LineKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors LineKeyData(String) Declaration public LineKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "api/IVLab.ABREngine.LineTextureGradient.html": {
    "href": "api/IVLab.ABREngine.LineTextureGradient.html",
    "title": "Class LineTextureGradient | ABREngine",
    "keywords": "Class LineTextureGradient Inheritance Object VisAsset VisAssetGradient LineTextureGradient Implements ILineTextureVisAsset IVisAssetGradient < LineTextureVisAsset > IVisAsset IABRInput ITextureGradient Inherited Members VisAssetGradient.FromRaw<T, S>(RawVisAssetGradient) VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class LineTextureGradient : VisAssetGradient, ILineTextureVisAsset, IVisAssetGradient<LineTextureVisAsset>, IVisAsset, IABRInput, ITextureGradient Properties BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap Stops Declaration public List<float> Stops { get; } Property Value Type Description List < Single > VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 VisAssets Declaration public List<LineTextureVisAsset> VisAssets { get; } Property Value Type Description List < LineTextureVisAsset > Methods GetTexture() Declaration public Texture2D GetTexture() Returns Type Description Texture2D GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description Texture2D GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description Texture2D Initialize(Guid, List<LineTextureVisAsset>, List<Single>) Declaration public void Initialize(Guid uuid, List<LineTextureVisAsset> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List < LineTextureVisAsset > visAssets List < Single > stops Implements ILineTextureVisAsset IVisAssetGradient<T> IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.LineTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.LineTextureVisAsset.html",
    "title": "Class LineTextureVisAsset | ABREngine",
    "keywords": "Class LineTextureVisAsset Inheritance Object VisAsset LineTextureVisAsset Implements ILineTextureVisAsset IVisAsset IABRInput ITextureGradient Inherited Members VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class LineTextureVisAsset : VisAsset, ILineTextureVisAsset, IVisAsset, IABRInput, ITextureGradient Constructors LineTextureVisAsset() Declaration public LineTextureVisAsset() LineTextureVisAsset(Guid, Texture2D) Declaration public LineTextureVisAsset(Guid uuid, Texture2D texture) Parameters Type Name Description Guid uuid Texture2D texture LineTextureVisAsset(Texture2D) Declaration public LineTextureVisAsset(Texture2D texture) Parameters Type Name Description Texture2D texture Properties BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap Texture Declaration public Texture2D Texture { get; } Property Value Type Description Texture2D VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods GetTexture() Declaration public Texture2D GetTexture() Returns Type Description Texture2D GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description Texture2D GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description Texture2D Implements ILineTextureVisAsset IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.MediaDataLoader.html": {
    "href": "api/IVLab.ABREngine.MediaDataLoader.html",
    "title": "Class MediaDataLoader | ABREngine",
    "keywords": "Class MediaDataLoader Load data from the ABREngine Media directory (specified in ABRConfig) Inheritance Object MediaDataLoader Implements IDataLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class MediaDataLoader : IDataLoader Methods TryLoadDataAsync(String) Declaration public async Task<RawDataset> TryLoadDataAsync(string dataPath) Parameters Type Name Description String dataPath Returns Type Description Task < RawDataset > Implements IDataLoader"
  },
  "api/IVLab.ABREngine.Notifier.html": {
    "href": "api/IVLab.ABREngine.Notifier.html",
    "title": "Class Notifier | ABREngine",
    "keywords": "Class Notifier Notifier for ABR state / cache updates, based on WebSockets. Inheritance Object Notifier Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class Notifier Constructors Notifier(Uri) Declaration public Notifier(Uri serverAddress) Parameters Type Name Description Uri serverAddress Methods ForceDisconnect() Declaration public void ForceDisconnect() Init() Declaration public async Task Init() Returns Type Description Task Stop() Declaration public void Stop()"
  },
  "api/IVLab.ABREngine.PathStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.PathStateFileLoader.html",
    "title": "Class PathStateFileLoader | ABREngine",
    "keywords": "Class PathStateFileLoader Save/Load a state to a JSON file somewhere on disk Inheritance Object PathStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class PathStateFileLoader : IABRStateLoader Constructors PathStateFileLoader() Declaration public PathStateFileLoader() Methods GetState(String) Declaration public async Task<JObject> GetState(string stateFilePath) Parameters Type Name Description String stateFilePath Returns Type Description Task < JObject > SaveState(String, String) Declaration public async Task SaveState(string outPath, string serializedState) Parameters Type Name Description String outPath String serializedState Returns Type Description Task Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.PercentPrimitive.html": {
    "href": "api/IVLab.ABREngine.PercentPrimitive.html",
    "title": "Class PercentPrimitive | ABREngine",
    "keywords": "Class PercentPrimitive Inheritance Object FloatPrimitive PercentPrimitive Implements IFloatPrimitive IPrimitive IABRInput Inherited Members FloatPrimitive.Genre FloatPrimitive.Value FloatPrimitive.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class PercentPrimitive : FloatPrimitive, IFloatPrimitive, IPrimitive, IABRInput Constructors PercentPrimitive(Single) Declaration public PercentPrimitive(float value) Parameters Type Name Description Single value PercentPrimitive(String) Declaration public PercentPrimitive(string value) Parameters Type Name Description String value Properties ParsingRegex Declaration public override Regex ParsingRegex { get; } Property Value Type Description Regex Overrides FloatPrimitive.ParsingRegex Units Declaration public override string Units { get; } Property Value Type Description String Overrides FloatPrimitive.Units Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides FloatPrimitive.ToString() Implements IFloatPrimitive IPrimitive IABRInput"
  },
  "api/IVLab.ABREngine.PointKeyData.html": {
    "href": "api/IVLab.ABREngine.PointKeyData.html",
    "title": "Class PointKeyData | ABREngine",
    "keywords": "Class PointKeyData Inheritance Object KeyData PointKeyData Implements IHasDataset IKeyData IABRInput Inherited Members KeyData.Genre KeyData.Path KeyData.GetDataset() KeyData.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class PointKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors PointKeyData(String) Declaration public PointKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "api/IVLab.ABREngine.PrimitiveGradient.html": {
    "href": "api/IVLab.ABREngine.PrimitiveGradient.html",
    "title": "Class PrimitiveGradient | ABREngine",
    "keywords": "Class PrimitiveGradient Inheritance Object PrimitiveGradient Implements IPrimitiveGradient IABRInput Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class PrimitiveGradient : IPrimitiveGradient, IABRInput Constructors PrimitiveGradient(Guid, Single[], String[]) Declaration public PrimitiveGradient(Guid inputValue, float[] points, string[] values) Parameters Type Name Description Guid inputValue Single [] points String [] values Properties Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre InputValue Declaration public Guid InputValue { get; } Property Value Type Description Guid Points Declaration public float[] Points { get; } Property Value Type Description Single [] Values Declaration public string[] Values { get; } Property Value Type Description String [] Methods GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput Implements IPrimitiveGradient IABRInput"
  },
  "api/IVLab.ABREngine.RawABRInput.html": {
    "href": "api/IVLab.ABREngine.RawABRInput.html",
    "title": "Class RawABRInput | ABREngine",
    "keywords": "Class RawABRInput Raw string values from a state JSON being passed to ABR Matches InputValue definition from ABR State Schema Parameters can have one or more inputs Inheritance Object RawABRInput Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class RawABRInput Fields inputGenre What type of input is it (variable, visasset, etc.) Declaration public string inputGenre Field Value Type Description String inputType String representation of the C# type this ABR input is Declaration public string inputType Field Value Type Description String inputValue The actual value of the input (string representation) Declaration public string inputValue Field Value Type Description String parameterName The name of the parent parameter this input is associated with Declaration public string parameterName Field Value Type Description String"
  },
  "api/IVLab.ABREngine.RawDataset.BinaryData.html": {
    "href": "api/IVLab.ABREngine.RawDataset.BinaryData.html",
    "title": "Class RawDataset.BinaryData | ABREngine",
    "keywords": "Class RawDataset.BinaryData Actual geometric representation of the data to load from a file / socket Inheritance Object RawDataset.BinaryData Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class BinaryData Constructors BinaryData(RawDataset.JsonHeader, Byte[]) Declaration public BinaryData(RawDataset.JsonHeader bdh, byte[] bytes) Parameters Type Name Description RawDataset.JsonHeader bdh Byte [] bytes BinaryData(RawDataset.JsonHeader, String) Declaration public BinaryData(RawDataset.JsonHeader bdh, string file) Parameters Type Name Description RawDataset.JsonHeader bdh String file Properties index_array Declaration public int[] index_array { get; set; } Property Value Type Description Int32 [] scalar_arrays Declaration public float[][] scalar_arrays { get; set; } Property Value Type Description Single [][] vector_arrays Declaration public float[][] vector_arrays { get; set; } Property Value Type Description Single [][] vertices Declaration public float[] vertices { get; set; } Property Value Type Description Single [] Methods Decode(RawDataset.JsonHeader, Byte[]) Declaration public void Decode(RawDataset.JsonHeader bdh, byte[] bytes) Parameters Type Name Description RawDataset.JsonHeader bdh Byte [] bytes"
  },
  "api/IVLab.ABREngine.RawDataset.html": {
    "href": "api/IVLab.ABREngine.RawDataset.html",
    "title": "Class RawDataset | ABREngine",
    "keywords": "Class RawDataset The raw variable arrays and geometry for a Data Object. RawDatasets can be loaded from a pair of .json and .bin files (JsonHeader and BinaryData, respectively). This RawDataset defines the specification for each of these files. RawDataset is not to be confused with Dataset , which represents a collection of RawDatasets which share a coordinate space, key data, and variables. Inheritance Object RawDataset Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [Serializable] public class RawDataset Examples A simple 4-vertex plane with no variables can be created like this: RawDataset ds = new RawDataset(); ds.meshTopology = MeshTopology.Triangles; ds.bounds = new Bounds(Vector3.zero, Vector3.one * 2.0f); ds.vectorArrays = new SerializableVectorArray[0]; ds.vectorArrayNames = new string[0]; ds.scalarArrays = new SerializableFloatArray[0]; ds.scalarArrayNames = new string[0]; ds.scalarMins = new float[0]; ds.scalarMaxes = new float[0]; // Construct the vertices Vector3[] vertices = { new Vector3(-1, 0, -1), // 0 new Vector3( 1, 0, -1), // 1 new Vector3(-1, 0, 1), // 2 new Vector3( 1, 0, 1), // 3 }; ds.vertexArray = vertices; // Construct triangle indices/faces - LEFT HAND RULE, outward-facing normals int[] indices = { // Bottom face 0, 1, 3, 0, 3, 2 }; ds.indexArray = indices; // How many verts per cell are there? (each triangle is a cell) int[] cellIndexCounts = { 3, 3 }; ds.cellIndexCounts = cellIndexCounts; // Where does each cell begin? int[] cellIndexOffsets = { 0, 3 }; ds.cellIndexOffsets = cellIndexOffsets; Constructors RawDataset() Declaration public RawDataset() RawDataset(RawDataset.JsonHeader, RawDataset.BinaryData) Declaration public RawDataset(RawDataset.JsonHeader jh, RawDataset.BinaryData bd) Parameters Type Name Description RawDataset.JsonHeader jh RawDataset.BinaryData bd Fields bounds Declaration public Bounds bounds Field Value Type Description Bounds cellIndexCounts Declaration public int[] cellIndexCounts Field Value Type Description Int32 [] cellIndexOffsets Declaration public int[] cellIndexOffsets Field Value Type Description Int32 [] dataTopology Declaration public DataTopology dataTopology Field Value Type Description DataTopology dimensions Declaration public Vector3Int dimensions Field Value Type Description Vector3Int indexArray Declaration public int[] indexArray Field Value Type Description Int32 [] scalarArrayNames Declaration public string[] scalarArrayNames Field Value Type Description String [] scalarArrays Declaration public SerializableFloatArray[] scalarArrays Field Value Type Description SerializableFloatArray [] scalarMaxes Declaration public float[] scalarMaxes Field Value Type Description Single [] scalarMins Declaration public float[] scalarMins Field Value Type Description Single [] vectorArrayNames Declaration public string[] vectorArrayNames Field Value Type Description String [] vectorArrays Declaration public SerializableVectorArray[] vectorArrays Field Value Type Description SerializableVectorArray [] vertexArray Declaration public Vector3[] vertexArray Field Value Type Description Vector3 [] Methods GetScalarArray(String) Declaration public float[] GetScalarArray(string name) Parameters Type Name Description String name Returns Type Description Single [] GetScalarMax(String) Declaration public float GetScalarMax(string name) Parameters Type Name Description String name Returns Type Description Single GetScalarMin(String) Declaration public float GetScalarMin(string name) Parameters Type Name Description String name Returns Type Description Single GetVectorArray(String) Declaration public Vector3[] GetVectorArray(string name) Parameters Type Name Description String name Returns Type Description Vector3 [] GetVectorMax(String) Declaration public Vector3 GetVectorMax(string name) Parameters Type Name Description String name Returns Type Description Vector3 GetVectorMin(String) Declaration public Vector3 GetVectorMin(string name) Parameters Type Name Description String name Returns Type Description Vector3 HasScalarArray(String) Declaration public bool HasScalarArray(string name) Parameters Type Name Description String name Returns Type Description Boolean HasVectorArray(String) Declaration public bool HasVectorArray(string name) Parameters Type Name Description String name Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.RawDataset.JsonHeader.html": {
    "href": "api/IVLab.ABREngine.RawDataset.JsonHeader.html",
    "title": "Class RawDataset.JsonHeader | ABREngine",
    "keywords": "Class RawDataset.JsonHeader Header that contains metadata for a particular RawDataset Inheritance Object RawDataset.JsonHeader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class JsonHeader Fields bounds Declaration public Bounds bounds Field Value Type Description Bounds dimensions Declaration public int[] dimensions Field Value Type Description Int32 [] meshTopology Declaration public DataTopology meshTopology Field Value Type Description DataTopology num_cell_indices Declaration public int num_cell_indices Field Value Type Description Int32 num_cells Declaration public int num_cells Field Value Type Description Int32 num_points Declaration public int num_points Field Value Type Description Int32 scalarArrayNames Declaration public string[] scalarArrayNames Field Value Type Description String [] scalarMaxes Declaration public float[] scalarMaxes Field Value Type Description Single [] scalarMins Declaration public float[] scalarMins Field Value Type Description Single [] vectorArrayNames Declaration public string[] vectorArrayNames Field Value Type Description String []"
  },
  "api/IVLab.ABREngine.RawDatasetAdapter.html": {
    "href": "api/IVLab.ABREngine.RawDatasetAdapter.html",
    "title": "Class RawDatasetAdapter | ABREngine",
    "keywords": "Class RawDatasetAdapter Adapter for converting other formats to ABRDataFormat. For example, OBJs => surfaces, or lists of points => ribbons, or lists of points => glyphs. Inheritance Object RawDatasetAdapter Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public static class RawDatasetAdapter Methods MeshToSurface(Mesh, Dictionary<String, List<Single>>) Create a surfaces data object from a Unity mesh Declaration public static RawDataset MeshToSurface(Mesh mesh, Dictionary<string, List<float>> scalarVars) Parameters Type Name Description Mesh mesh The original mesh Dictionary < String , List < Single >> scalarVars Returns Type Description RawDataset ObjToSurface(String) Load data from the data source. Declaration public static RawDataset ObjToSurface(string filePath) Parameters Type Name Description String filePath Data source file Returns Type Description RawDataset PointsToLine(List<List<Vector3>>, Bounds, Dictionary<String, List<Single>>) Define a Line dataset from a bunch of points. Don't try to assume or calculate the full bounds for the imported data objects - explictly ask the user for them. Declaration public static RawDataset PointsToLine(List<List<Vector3>> lines, Bounds dataBounds, Dictionary<string, List<float>> scalarVars) Parameters Type Name Description List < List < Vector3 >> lines One, or several, lines. Each line consistes of a series of points. Bounds dataBounds Dictionary < String , List < Single >> scalarVars Returns Type Description RawDataset PointsToPoints(List<Vector3>, Bounds, Dictionary<String, List<Single>>, Dictionary<String, List<Vector3>>) Define a Point dataset from a bunch of points. Don't try to assume or calculate the full bounds for the imported data objects - explictly ask the user for them. Declaration public static RawDataset PointsToPoints(List<Vector3> points, Bounds dataBounds, Dictionary<string, List<float>> scalarVars, Dictionary<string, List<Vector3>> vectorVars) Parameters Type Name Description List < Vector3 > points Points in a line - will be treated as a LineStrip Bounds dataBounds Dictionary < String , List < Single >> scalarVars Dictionary < String , List < Vector3 >> vectorVars Returns Type Description RawDataset UnityPrimitiveToSurface(PrimitiveType) Create a Surface data object from a Unity primitive. By default, includes XAxis, YAxis, and ZAxis scalar variables. Declaration public static RawDataset UnityPrimitiveToSurface(PrimitiveType primitive) Parameters Type Name Description PrimitiveType primitive Returns Type Description RawDataset"
  },
  "api/IVLab.ABREngine.RawPrimitiveGradient.html": {
    "href": "api/IVLab.ABREngine.RawPrimitiveGradient.html",
    "title": "Class RawPrimitiveGradient | ABREngine",
    "keywords": "Class RawPrimitiveGradient Inheritance Object RawPrimitiveGradient Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class RawPrimitiveGradient Fields points Declaration public List<float> points Field Value Type Description List < Single > values Declaration public List<string> values Field Value Type Description List < String >"
  },
  "api/IVLab.ABREngine.RawVisAssetGradient.html": {
    "href": "api/IVLab.ABREngine.RawVisAssetGradient.html",
    "title": "Class RawVisAssetGradient | ABREngine",
    "keywords": "Class RawVisAssetGradient Serializable version of the VisAsset gradients that interacts with state/schema. Each VisAsset type should be responsible for implementing their own conversion to/from this. Inheritance Object RawVisAssetGradient Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class RawVisAssetGradient Fields gradientScale Declaration public string gradientScale Field Value Type Description String gradientType Declaration public string gradientType Field Value Type Description String points Declaration public float[] points Field Value Type Description Single [] uuid Declaration public string uuid Field Value Type Description String visAssets Declaration public string[] visAssets Field Value Type Description String [] Methods ToRaw<T>(IVisAssetGradient<T>) Convert from a regular VisAssetGradient to raw gradient for serialization/import/export/interfacing with other apps. Declaration public static RawVisAssetGradient ToRaw<T>(IVisAssetGradient<T> gradient) where T : IVisAsset Parameters Type Name Description IVisAssetGradient <T> gradient Returns Type Description RawVisAssetGradient Type Parameters Name Description T"
  },
  "api/IVLab.ABREngine.RenderHints.html": {
    "href": "api/IVLab.ABREngine.RenderHints.html",
    "title": "Class RenderHints | ABREngine",
    "keywords": "Class RenderHints Hints for rendering, such as whether a data impression should be hidden Inheritance Object RenderHints Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class RenderHints Properties DataChanged Has the impression been changed since the last render (needs to be re-rendered?) Declaration public bool DataChanged { get; set; } Property Value Type Description Boolean StyleChanged Has the style of the impression been changed Declaration public bool StyleChanged { get; set; } Property Value Type Description Boolean VisibilityChanged Has the visibility of the impression been changed (mesh renderer needs to be toggled) Declaration public bool VisibilityChanged { get; set; } Property Value Type Description Boolean Visible Whether or not the impression is visible Declaration public bool Visible { get; set; } Property Value Type Description Boolean"
  },
  "api/IVLab.ABREngine.ResourcesDataLoader.html": {
    "href": "api/IVLab.ABREngine.ResourcesDataLoader.html",
    "title": "Class ResourcesDataLoader | ABREngine",
    "keywords": "Class ResourcesDataLoader Load data from resources folder. NOTE: The actual data files (.bin) must have their file extension changed to .txt in order to be recognized. When data are imported, the identity of each is lost so we must guess which is which - currently guessing the larger of the two files is the \"Data\" and the smaller is \"Metadata\". Inheritance Object ResourcesDataLoader Implements IDataLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ResourcesDataLoader : IDataLoader Methods TryLoadDataAsync(String) Declaration public async Task<RawDataset> TryLoadDataAsync(string dataPath) Parameters Type Name Description String dataPath Returns Type Description Task < RawDataset > Implements IDataLoader"
  },
  "api/IVLab.ABREngine.ResourceStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.ResourceStateFileLoader.html",
    "title": "Class ResourceStateFileLoader | ABREngine",
    "keywords": "Class ResourceStateFileLoader Load a state from any Resources folder within Unity (within any Package or Asset) Inheritance Object ResourceStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ResourceStateFileLoader : IABRStateLoader Constructors ResourceStateFileLoader() Declaration public ResourceStateFileLoader() Methods GetState(String) Declaration public async Task<JObject> GetState(string fileName) Parameters Type Name Description String fileName Returns Type Description Task < JObject > SaveState(String, String) Declaration public async Task SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState Returns Type Description Task Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.ResourceVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.ResourceVisAssetFetcher.html",
    "title": "Class ResourceVisAssetFetcher | ABREngine",
    "keywords": "Class ResourceVisAssetFetcher Fetch VisAsset from a Resources folder (in an Asset or Package) Inheritance Object ResourceVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ResourceVisAssetFetcher : IVisAssetFetcher Constructors ResourceVisAssetFetcher() Declaration public ResourceVisAssetFetcher() Properties ResourcePath Declaration public string ResourcePath { get; } Property Value Type Description String VisAssetJson Declaration public string VisAssetJson { get; } Property Value Type Description String Methods GetArtifactJson(Guid) Declaration public async Task<JObject> GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < JObject > GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String GetColormapTexture(Guid) Declaration public async Task<Texture2D> GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetGlyphGameObject(Guid, JObject) Declaration public async Task<GameObject> GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < GameObject > GetGlyphNormalMapTexture(Guid, JObject) Declaration public async Task<Texture2D> GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < Texture2D > GetLineTexture(Guid) Declaration public async Task<Texture2D> GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceNormalMap(Guid) Declaration public async Task<Texture2D> GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceTexture(Guid) Declaration public async Task<Texture2D> GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.ScalarDataVariable.html": {
    "href": "api/IVLab.ABREngine.ScalarDataVariable.html",
    "title": "Class ScalarDataVariable | ABREngine",
    "keywords": "Class ScalarDataVariable Inheritance Object ScalarDataVariable Implements IDataVariable < Single > IABRInput IHasDataset Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class ScalarDataVariable : IDataVariable<float>, IABRInput, IHasDataset Constructors ScalarDataVariable(String) Declaration public ScalarDataVariable(string path) Parameters Type Name Description String path Properties CustomizedRange Declaration public bool CustomizedRange { get; set; } Property Value Type Description Boolean Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre OriginalRange Declaration public DataRange<float> OriginalRange { get; set; } Property Value Type Description DataRange < Single > Path Declaration public string Path { get; } Property Value Type Description String Range Declaration public DataRange<float> Range { get; set; } Property Value Type Description DataRange < Single > SpecificRanges Declaration public Dictionary<string, DataRange<float>> SpecificRanges { get; set; } Property Value Type Description Dictionary < String , DataRange < Single >> Methods GetArray(IKeyData) Declaration public float[] GetArray(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Single [] GetDataset() Declaration public Dataset GetDataset() Returns Type Description Dataset GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput IsPartOf(IKeyData) Declaration public bool IsPartOf(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Boolean Implements IDataVariable<T> IABRInput IHasDataset"
  },
  "api/IVLab.ABREngine.SerializableFloatArray.html": {
    "href": "api/IVLab.ABREngine.SerializableFloatArray.html",
    "title": "Class SerializableFloatArray | ABREngine",
    "keywords": "Class SerializableFloatArray Inheritance Object SerializableFloatArray Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [Serializable] public class SerializableFloatArray Fields array Declaration public float[] array Field Value Type Description Single []"
  },
  "api/IVLab.ABREngine.SerializableVectorArray.html": {
    "href": "api/IVLab.ABREngine.SerializableVectorArray.html",
    "title": "Class SerializableVectorArray | ABREngine",
    "keywords": "Class SerializableVectorArray Inheritance Object SerializableVectorArray Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [Serializable] public class SerializableVectorArray Fields array Declaration public Vector3[] array Field Value Type Description Vector3 []"
  },
  "api/IVLab.ABREngine.SimpleGlyphDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleGlyphDataImpression.html",
    "title": "Class SimpleGlyphDataImpression | ABREngine",
    "keywords": "Class SimpleGlyphDataImpression A \"Glyphs\" data impression that uses hand-sculpted geometry to depict point data. Inheritance Object DataImpression SimpleGlyphDataImpression Implements IDataImpression IHasDataset Inherited Members DataImpression.Uuid DataImpression.InputIndexer DataImpression.RenderHints DataImpression.Tags DataImpression.ImpressionMaterial DataImpression.MatPropBlock DataImpression.RenderInfo DataImpression.KeyDataRenderInfo DataImpression.HasTag(String) DataImpression.Copy() DataImpression.CopyExisting(IDataImpression) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [ABRPlateType(\"Glyphs\")] public class SimpleGlyphDataImpression : DataImpression, IDataImpression, IHasDataset Examples An example of creating a single glyph data impression and setting its colormap, color variable, and glyph could be: SimpleGlyphDataImpression gi = new SimpleGlyphDataImpression(); gi.keyData = points as PointKeyData; gi.colorVariable = yAxis; gi.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; gi.glyph = glyph as GlyphVisAsset; ABREngine.Instance.RegisterDataImpression(gi); Constructors SimpleGlyphDataImpression() Declaration public SimpleGlyphDataImpression() SimpleGlyphDataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleGlyphDataImpression(string uuid) Parameters Type Name Description String uuid Fields colormap Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset colorVariable Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Style)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable forwardVariable Declaration [ABRInput(\"Forward Variable\", \"Direction\", UpdateLevel.Data)] public VectorDataVariable forwardVariable Field Value Type Description VectorDataVariable glyph Declaration [ABRInput(\"Glyph\", \"Glyph\", UpdateLevel.Data)] public IGlyphVisAsset glyph Field Value Type Description IGlyphVisAsset glyphDensity Declaration [ABRInput(\"Glyph Density\", \"Glyph\", UpdateLevel.Style)] public PercentPrimitive glyphDensity Field Value Type Description PercentPrimitive glyphLod Declaration public int glyphLod Field Value Type Description Int32 glyphSize Declaration [ABRInput(\"Glyph Size\", \"Glyph\", UpdateLevel.Style)] public LengthPrimitive glyphSize Field Value Type Description LengthPrimitive glyphVariable Declaration [ABRInput(\"Glyph Variable\", \"Glyph\", UpdateLevel.Style)] public ScalarDataVariable glyphVariable Field Value Type Description ScalarDataVariable keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public PointKeyData keyData Field Value Type Description PointKeyData upVariable Declaration [ABRInput(\"Up Variable\", \"Direction\", UpdateLevel.Data)] public VectorDataVariable upVariable Field Value Type Description VectorDataVariable Properties LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName MaterialName Declaration protected override string MaterialName { get; } Property Value Type Description String Overrides DataImpression.MaterialName Methods Cleanup(EncodedGameObject) Declaration public override void Cleanup(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.Cleanup(EncodedGameObject) ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SimpleLineDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleLineDataImpression.html",
    "title": "Class SimpleLineDataImpression | ABREngine",
    "keywords": "Class SimpleLineDataImpression A \"Lines\" data impression that uses hand-drawn line textures to depict line/flow data. Inheritance Object DataImpression SimpleLineDataImpression Implements IDataImpression IHasDataset Inherited Members DataImpression.Uuid DataImpression.InputIndexer DataImpression.RenderHints DataImpression.Tags DataImpression.ImpressionMaterial DataImpression.MatPropBlock DataImpression.RenderInfo DataImpression.KeyDataRenderInfo DataImpression.HasTag(String) DataImpression.Copy() DataImpression.CopyExisting(IDataImpression) DataImpression.Cleanup(EncodedGameObject) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [ABRPlateType(\"Ribbons\")] public class SimpleLineDataImpression : DataImpression, IDataImpression, IHasDataset Examples An example of creating a single glyph data impression and setting its colormap, color variable, and line texture could be: SimpleLineDataImpression gi = new SimpleLineDataImpression(); gi.keyData = lines as LineKeyData; gi.colorVariable = yAxis; gi.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; gi.lineTexture = line as LineTextureVisAsset; ABREngine.Instance.RegisterDataImpression(gi); Constructors SimpleLineDataImpression() Declaration public SimpleLineDataImpression() SimpleLineDataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleLineDataImpression(string uuid) Parameters Type Name Description String uuid Fields averageCount Declaration [ABRInput(\"Ribbon Smooth\", \"Ribbon\", UpdateLevel.Data)] public IntegerPrimitive averageCount Field Value Type Description IntegerPrimitive colormap Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset colorVariable Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Style)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable defaultCurveDirection Declaration public Vector3 defaultCurveDirection Field Value Type Description Vector3 keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public LineKeyData keyData Field Value Type Description LineKeyData lineTexture Declaration [ABRInput(\"Texture\", \"Texture\", UpdateLevel.Style)] public ILineTextureVisAsset lineTexture Field Value Type Description ILineTextureVisAsset lineTextureVariable Declaration [ABRInput(\"Texture Variable\", \"Texture\", UpdateLevel.Style)] public ScalarDataVariable lineTextureVariable Field Value Type Description ScalarDataVariable lineWidth Declaration [ABRInput(\"Ribbon Width\", \"Ribbon\", UpdateLevel.Data)] public LengthPrimitive lineWidth Field Value Type Description LengthPrimitive ribbonBrightness Declaration [ABRInput(\"Ribbon Brightness\", \"Ribbon\", UpdateLevel.Style)] public PercentPrimitive ribbonBrightness Field Value Type Description PercentPrimitive ribbonCurveAngle Declaration [ABRInput(\"Ribbon Curve\", \"Ribbon\", UpdateLevel.Data)] public AnglePrimitive ribbonCurveAngle Field Value Type Description AnglePrimitive ribbonRotationAngle Declaration [ABRInput(\"Ribbon Rotation\", \"Ribbon\", UpdateLevel.Data)] public AnglePrimitive ribbonRotationAngle Field Value Type Description AnglePrimitive textureCutoff Declaration [ABRInput(\"Texture Cutoff\", \"Texture\", UpdateLevel.Style)] public PercentPrimitive textureCutoff Field Value Type Description PercentPrimitive Properties LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName MaterialName Declaration protected override string MaterialName { get; } Property Value Type Description String Overrides DataImpression.MaterialName Methods ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SimpleSurfaceDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleSurfaceDataImpression.html",
    "title": "Class SimpleSurfaceDataImpression | ABREngine",
    "keywords": "Class SimpleSurfaceDataImpression A \"Surfaces\" data impression that uses hand-drawn textures and color to show surface data. Inheritance Object DataImpression SimpleSurfaceDataImpression Implements IDataImpression IHasDataset Inherited Members DataImpression.Uuid DataImpression.InputIndexer DataImpression.RenderHints DataImpression.Tags DataImpression.ImpressionMaterial DataImpression.MatPropBlock DataImpression.RenderInfo DataImpression.KeyDataRenderInfo DataImpression.HasTag(String) DataImpression.Copy() DataImpression.CopyExisting(IDataImpression) DataImpression.Cleanup(EncodedGameObject) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [ABRPlateType(\"Surfaces\")] public class SimpleSurfaceDataImpression : DataImpression, IDataImpression, IHasDataset Examples An example of creating a single surface data impression and setting its colormap, color variable, and texture could be: SimpleSurfaceDataImpression gi = new SimpleSurfaceDataImpression(); gi.keyData = surfs as SurfaceKeyData; gi.colorVariable = yAxis; gi.colormap = ABREngine.Instance.VisAssets.GetDefault<ColormapVisAsset>() as ColormapVisAsset; gi.lineTexture = tex as SurfaceTextureVisAsset; ABREngine.Instance.RegisterDataImpression(gi); Constructors SimpleSurfaceDataImpression() Declaration public SimpleSurfaceDataImpression() SimpleSurfaceDataImpression(String) Construct a data impession with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleSurfaceDataImpression(string uuid) Parameters Type Name Description String uuid Fields colormap Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset colorVariable Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Style)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public SurfaceKeyData keyData Field Value Type Description SurfaceKeyData pattern Declaration [ABRInput(\"Pattern\", \"Pattern\", UpdateLevel.Style)] public ISurfaceTextureVisAsset pattern Field Value Type Description ISurfaceTextureVisAsset patternIntensity Declaration [ABRInput(\"Pattern Intensity\", \"Pattern\", UpdateLevel.Style)] public PercentPrimitive patternIntensity Field Value Type Description PercentPrimitive patternSaturation Declaration [ABRInput(\"Pattern Saturation\", \"Pattern\", UpdateLevel.Style)] public PercentPrimitive patternSaturation Field Value Type Description PercentPrimitive patternSeamBlend Declaration [ABRInput(\"Pattern Seam Blend\", \"Pattern\", UpdateLevel.Style)] public PercentPrimitive patternSeamBlend Field Value Type Description PercentPrimitive patternSize Declaration [ABRInput(\"Pattern Size\", \"Pattern\", UpdateLevel.Style)] public LengthPrimitive patternSize Field Value Type Description LengthPrimitive patternVariable Declaration [ABRInput(\"Pattern Variable\", \"Pattern\", UpdateLevel.Style)] public ScalarDataVariable patternVariable Field Value Type Description ScalarDataVariable Properties LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName MaterialName Declaration protected override string MaterialName { get; } Property Value Type Description String Overrides DataImpression.MaterialName Methods ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SimpleVolumeDataImpression.html": {
    "href": "api/IVLab.ABREngine.SimpleVolumeDataImpression.html",
    "title": "Class SimpleVolumeDataImpression | ABREngine",
    "keywords": "Class SimpleVolumeDataImpression Inheritance Object DataImpression SimpleVolumeDataImpression Implements IDataImpression IHasDataset Inherited Members DataImpression.Uuid DataImpression.InputIndexer DataImpression.RenderHints DataImpression.Tags DataImpression.ImpressionMaterial DataImpression.MatPropBlock DataImpression.RenderInfo DataImpression.KeyDataRenderInfo DataImpression.HasTag(String) DataImpression.Copy() DataImpression.CopyExisting(IDataImpression) DataImpression.Cleanup(EncodedGameObject) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax [ABRPlateType(\"Volumes\")] public class SimpleVolumeDataImpression : DataImpression, IDataImpression, IHasDataset Constructors SimpleVolumeDataImpression() Declaration public SimpleVolumeDataImpression() SimpleVolumeDataImpression(String) Construct a data impression with a given UUID. Note that this will be called from ABRState and must assume that there's a single string argument with UUID. Declaration public SimpleVolumeDataImpression(string uuid) Parameters Type Name Description String uuid Fields colormap Declaration [ABRInput(\"Colormap\", \"Color\", UpdateLevel.Style)] public IColormapVisAsset colormap Field Value Type Description IColormapVisAsset colorVariable Declaration [ABRInput(\"Color Variable\", \"Color\", UpdateLevel.Data)] public ScalarDataVariable colorVariable Field Value Type Description ScalarDataVariable keyData Declaration [ABRInput(\"Key Data\", \"Key Data\", UpdateLevel.Data)] public VolumeKeyData keyData Field Value Type Description VolumeKeyData opacitymap Declaration [ABRInput(\"Opacitymap\", \"Color\", UpdateLevel.Style)] public PrimitiveGradient opacitymap Field Value Type Description PrimitiveGradient volumeBrightness Declaration [ABRInput(\"Volume Brightness\", \"Volume\", UpdateLevel.Style)] public PercentPrimitive volumeBrightness Field Value Type Description PercentPrimitive volumeLighting Declaration [ABRInput(\"Volume Lighting\", \"Volume\", UpdateLevel.Style)] public BooleanPrimitive volumeLighting Field Value Type Description BooleanPrimitive volumeOpacityMultiplier Declaration [ABRInput(\"Volume Opacity Multiplier\", \"Volume\", UpdateLevel.Style)] public PercentPrimitive volumeOpacityMultiplier Field Value Type Description PercentPrimitive Properties LayerName Declaration protected override string LayerName { get; } Property Value Type Description String Overrides DataImpression.LayerName MaterialName Declaration protected override string MaterialName { get; } Property Value Type Description String Overrides DataImpression.MaterialName Methods ComputeGeometry() Declaration public override void ComputeGeometry() Overrides DataImpression.ComputeGeometry() GetDataset() Declaration public override Dataset GetDataset() Returns Type Description Dataset Overrides DataImpression.GetDataset() SetupGameObject(EncodedGameObject) Declaration public override void SetupGameObject(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.SetupGameObject(EncodedGameObject) UpdateStyling(EncodedGameObject) Declaration public override void UpdateStyling(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateStyling(EncodedGameObject) UpdateVisibility(EncodedGameObject) Declaration public override void UpdateVisibility(EncodedGameObject currentGameObject) Parameters Type Name Description EncodedGameObject currentGameObject Overrides DataImpression.UpdateVisibility(EncodedGameObject) Implements IDataImpression IHasDataset"
  },
  "api/IVLab.ABREngine.SocketDataListener.html": {
    "href": "api/IVLab.ABREngine.SocketDataListener.html",
    "title": "Class SocketDataListener | ABREngine",
    "keywords": "Class SocketDataListener Listener for incoming upstream data, for example, from a Send2ABR plugin for ParaView. Operation of this class is controlled by the ABRConfig option dataListenerPort . Inheritance Object SocketDataListener Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class SocketDataListener Constructors SocketDataListener(Int32) Declaration public SocketDataListener(int port) Parameters Type Name Description Int32 port Fields listener Declaration public TcpListener listener Field Value Type Description TcpListener port Declaration public int port Field Value Type Description Int32 Methods DoAcceptSocketCallback(IAsyncResult) Declaration public void DoAcceptSocketCallback(IAsyncResult ar) Parameters Type Name Description IAsyncResult ar StartServer() Declaration public void StartServer() StopServer() Declaration public void StopServer()"
  },
  "api/IVLab.ABREngine.SocketTextData.html": {
    "href": "api/IVLab.ABREngine.SocketTextData.html",
    "title": "Struct SocketTextData | ABREngine",
    "keywords": "Struct SocketTextData Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public struct SocketTextData Fields bindata Declaration public byte[] bindata Field Value Type Description Byte [] data Declaration public string data Field Value Type Description String json Declaration public string json Field Value Type Description String label Declaration public string label Field Value Type Description String"
  },
  "api/IVLab.ABREngine.StateLocalVisAssetFetcher.html": {
    "href": "api/IVLab.ABREngine.StateLocalVisAssetFetcher.html",
    "title": "Class StateLocalVisAssetFetcher | ABREngine",
    "keywords": "Class StateLocalVisAssetFetcher Fetch a VisAsset from the currently loaded ABR state. Currently only valid for ColormapVisAssets. Inheritance Object StateLocalVisAssetFetcher Implements IVisAssetFetcher Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class StateLocalVisAssetFetcher : IVisAssetFetcher Fields ARTIFACT_DATA Declaration public const string ARTIFACT_DATA = \"artifactDataContents\" Field Value Type Description String VISASSET_JSON Declaration public const string VISASSET_JSON = \"artifactJson\" Field Value Type Description String VISASSET_STATE Declaration public const string VISASSET_STATE = \"localVisAssets\" Field Value Type Description String Methods GetArtifactJson(Guid) Declaration public async Task<JObject> GetArtifactJson(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < JObject > GetArtifactJsonPath(Guid) Declaration public string GetArtifactJsonPath(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description String GetColormapTexture(Guid) Declaration public async Task<Texture2D> GetColormapTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetGlyphGameObject(Guid, JObject) Declaration public async Task<GameObject> GetGlyphGameObject(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < GameObject > GetGlyphNormalMapTexture(Guid, JObject) Declaration public async Task<Texture2D> GetGlyphNormalMapTexture(Guid uuid, JObject lodJson) Parameters Type Name Description Guid uuid JObject lodJson Returns Type Description Task < Texture2D > GetLineTexture(Guid) Declaration public async Task<Texture2D> GetLineTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceNormalMap(Guid) Declaration public async Task<Texture2D> GetSurfaceNormalMap(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > GetSurfaceTexture(Guid) Declaration public async Task<Texture2D> GetSurfaceTexture(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < Texture2D > Implements IVisAssetFetcher"
  },
  "api/IVLab.ABREngine.SurfaceKeyData.html": {
    "href": "api/IVLab.ABREngine.SurfaceKeyData.html",
    "title": "Class SurfaceKeyData | ABREngine",
    "keywords": "Class SurfaceKeyData Inheritance Object KeyData SurfaceKeyData Implements IHasDataset IKeyData IABRInput Inherited Members KeyData.Genre KeyData.Path KeyData.GetDataset() KeyData.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class SurfaceKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors SurfaceKeyData(String) Declaration public SurfaceKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "api/IVLab.ABREngine.SurfaceTextureGradient.html": {
    "href": "api/IVLab.ABREngine.SurfaceTextureGradient.html",
    "title": "Class SurfaceTextureGradient | ABREngine",
    "keywords": "Class SurfaceTextureGradient Inheritance Object VisAsset VisAssetGradient SurfaceTextureGradient Implements ISurfaceTextureVisAsset IVisAssetGradient < SurfaceTextureVisAsset > IVisAsset IABRInput ITextureGradient Inherited Members VisAssetGradient.FromRaw<T, S>(RawVisAssetGradient) VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class SurfaceTextureGradient : VisAssetGradient, ISurfaceTextureVisAsset, IVisAssetGradient<SurfaceTextureVisAsset>, IVisAsset, IABRInput, ITextureGradient Properties BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap Stops Declaration public List<float> Stops { get; } Property Value Type Description List < Single > VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 VisAssets Declaration public List<SurfaceTextureVisAsset> VisAssets { get; } Property Value Type Description List < SurfaceTextureVisAsset > Methods GetTexture() Declaration public Texture2D GetTexture() Returns Type Description Texture2D GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description Texture2D GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description Texture2D Initialize(Guid, List<SurfaceTextureVisAsset>, List<Single>) Declaration public void Initialize(Guid uuid, List<SurfaceTextureVisAsset> visAssets, List<float> stops) Parameters Type Name Description Guid uuid List < SurfaceTextureVisAsset > visAssets List < Single > stops Implements ISurfaceTextureVisAsset IVisAssetGradient<T> IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.SurfaceTextureVisAsset.html": {
    "href": "api/IVLab.ABREngine.SurfaceTextureVisAsset.html",
    "title": "Class SurfaceTextureVisAsset | ABREngine",
    "keywords": "Class SurfaceTextureVisAsset Inheritance Object VisAsset SurfaceTextureVisAsset Implements ISurfaceTextureVisAsset IVisAsset IABRInput ITextureGradient Inherited Members VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class SurfaceTextureVisAsset : VisAsset, ISurfaceTextureVisAsset, IVisAsset, IABRInput, ITextureGradient Constructors SurfaceTextureVisAsset() Declaration public SurfaceTextureVisAsset() SurfaceTextureVisAsset(Guid, Texture2D, Texture2D) Declaration public SurfaceTextureVisAsset(Guid uuid, Texture2D texture, Texture2D normalMap) Parameters Type Name Description Guid uuid Texture2D texture Texture2D normalMap SurfaceTextureVisAsset(Texture2D, Texture2D) Declaration public SurfaceTextureVisAsset(Texture2D texture, Texture2D normalMap) Parameters Type Name Description Texture2D texture Texture2D normalMap Properties BlendMaps Declaration public GradientBlendMap BlendMaps { get; } Property Value Type Description GradientBlendMap NormalMap Declaration public Texture2D NormalMap { get; } Property Value Type Description Texture2D Texture Declaration public Texture2D Texture { get; } Property Value Type Description Texture2D VisAssetCount Declaration public int VisAssetCount { get; } Property Value Type Description Int32 Methods GetTexture() Declaration public Texture2D GetTexture() Returns Type Description Texture2D GetTexture(Int32) Declaration public Texture2D GetTexture(int gradientIndex) Parameters Type Name Description Int32 gradientIndex Returns Type Description Texture2D GetTexture(Single) Declaration public Texture2D GetTexture(float gradientT) Parameters Type Name Description Single gradientT Returns Type Description Texture2D Implements ISurfaceTextureVisAsset IVisAsset IABRInput ITextureGradient"
  },
  "api/IVLab.ABREngine.TextStateFileLoader.html": {
    "href": "api/IVLab.ABREngine.TextStateFileLoader.html",
    "title": "Class TextStateFileLoader | ABREngine",
    "keywords": "Class TextStateFileLoader Load a state from a serialized JSON string Inheritance Object TextStateFileLoader Implements IABRStateLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class TextStateFileLoader : IABRStateLoader Constructors TextStateFileLoader() Declaration public TextStateFileLoader() Methods GetState(String) Declaration public async Task<JObject> GetState(string jsonText) Parameters Type Name Description String jsonText Returns Type Description Task < JObject > SaveState(String, String) Declaration public async Task SaveState(string name, string serializedState) Parameters Type Name Description String name String serializedState Returns Type Description Task Implements IABRStateLoader"
  },
  "api/IVLab.ABREngine.TypeExtentions.html": {
    "href": "api/IVLab.ABREngine.TypeExtentions.html",
    "title": "Class TypeExtentions | ABREngine",
    "keywords": "Class TypeExtentions Inheritance Object TypeExtentions Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public static class TypeExtentions Methods ImplicitlyConvertsTo(Type, Type) Check if a type implicitly converts to another. Source: https://stackoverflow.com/a/2075975 Declaration public static bool ImplicitlyConvertsTo(this Type type, Type destinationType) Parameters Type Name Description Type type Type destinationType Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.UnityObjectSerializer.html": {
    "href": "api/IVLab.ABREngine.UnityObjectSerializer.html",
    "title": "Class UnityObjectSerializer | ABREngine",
    "keywords": "Class UnityObjectSerializer Custom converter to allow less verbose Newtonsoft serialization of Unity builtin objects. This converter manually handles several cases, add more as they become necessary. Inheritance Object UnityObjectSerializer Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class UnityObjectSerializer : JsonConverter Constructors UnityObjectSerializer() Build the custom converter and define both the types that are allowed to be serialized and the string keys that are allowed to exist post-serialization Declaration public UnityObjectSerializer() Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean Methods CanConvert(Type) We only provide serializers for these types Declaration public override bool CanConvert(Type type) Parameters Type Name Description Type type Returns Type Description Boolean ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader Type objectType Object existingValue JsonSerializer serializer Returns Type Description Object WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer Object value JsonSerializer serializer"
  },
  "api/IVLab.ABREngine.UpdateLevel.html": {
    "href": "api/IVLab.ABREngine.UpdateLevel.html",
    "title": "Enum UpdateLevel | ABREngine",
    "keywords": "Enum UpdateLevel How \"deep\" a particular update needs to go to fully address this ABR Input Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public enum UpdateLevel Fields Name Description Data Data updates generally need to address geometric information and/or populate data on a per-vertex basis, hence they are usually slow/expensive. Style Style updates are generally lightweight and only consist of updating uniforms on the GPU, for example changing the colormap or glyph size."
  },
  "api/IVLab.ABREngine.VectorDataVariable.html": {
    "href": "api/IVLab.ABREngine.VectorDataVariable.html",
    "title": "Class VectorDataVariable | ABREngine",
    "keywords": "Class VectorDataVariable Inheritance Object VectorDataVariable Implements IDataVariable < Vector3 > IABRInput IHasDataset Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class VectorDataVariable : IDataVariable<Vector3>, IABRInput, IHasDataset Constructors VectorDataVariable(String) Declaration public VectorDataVariable(string path) Parameters Type Name Description String path Properties CustomizedRange Declaration public bool CustomizedRange { get; set; } Property Value Type Description Boolean Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre OriginalRange Declaration public DataRange<Vector3> OriginalRange { get; set; } Property Value Type Description DataRange < Vector3 > Path Declaration public string Path { get; } Property Value Type Description String Range Declaration public DataRange<Vector3> Range { get; set; } Property Value Type Description DataRange < Vector3 > SpecificRanges Declaration public Dictionary<string, DataRange<Vector3>> SpecificRanges { get; set; } Property Value Type Description Dictionary < String , DataRange < Vector3 >> Methods GetArray(IKeyData) Declaration public Vector3[] GetArray(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Vector3 [] GetDataset() Declaration public Dataset GetDataset() Returns Type Description Dataset GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput IsPartOf(IKeyData) Declaration public bool IsPartOf(IKeyData keyData) Parameters Type Name Description IKeyData keyData Returns Type Description Boolean Implements IDataVariable<T> IABRInput IHasDataset"
  },
  "api/IVLab.ABREngine.VisAsset.html": {
    "href": "api/IVLab.ABREngine.VisAsset.html",
    "title": "Class VisAsset | ABREngine",
    "keywords": "Class VisAsset Generic type for all VisAssets to inherit from Inheritance Object VisAsset ColormapVisAsset GlyphVisAsset LineTextureVisAsset SurfaceTextureVisAsset VisAssetGradient Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class VisAsset Fields VisAssetTypeMap Typemap where we can look up ABR visasset types and convert to C# types. The typestring that defines this VisAsset type, from the ABR Schema . Should match one of: #/definitions/VisAssetType Declaration public static Dictionary<string, Type> VisAssetTypeMap Field Value Type Description Dictionary < String , Type > Properties Genre Declaration public ABRInputGenre Genre { get; } Property Value Type Description ABRInputGenre ImportTime Declaration public DateTime ImportTime { get; set; } Property Value Type Description DateTime Uuid Declaration public Guid Uuid { get; set; } Property Value Type Description Guid Methods GetRawABRInput() Declaration public RawABRInput GetRawABRInput() Returns Type Description RawABRInput IsValidVisAssetType(String) Check if a ABR VisAsset schema type is valid with this system Declaration public static bool IsValidVisAssetType(string vaType) Parameters Type Name Description String vaType Returns Type Description Boolean"
  },
  "api/IVLab.ABREngine.VisAssetGradient.html": {
    "href": "api/IVLab.ABREngine.VisAssetGradient.html",
    "title": "Class VisAssetGradient | ABREngine",
    "keywords": "Class VisAssetGradient Concrete implementation of a VisAsset Gradient, which is a collection of VisAssets that also counts as a single VisAsset. Inheritance Object VisAsset VisAssetGradient GlyphGradient LineTextureGradient SurfaceTextureGradient Inherited Members VisAsset.Uuid VisAsset.Genre VisAsset.ImportTime VisAsset.VisAssetTypeMap VisAsset.GetRawABRInput() VisAsset.IsValidVisAssetType(String) Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class VisAssetGradient : VisAsset Methods FromRaw<T, S>(RawVisAssetGradient) Convert from a RawVisAssetGradient to a regular gradient for internal use. Declaration public static T FromRaw<T, S>(RawVisAssetGradient raw) where T : IVisAssetGradient<S>, new() where S : IVisAsset Parameters Type Name Description RawVisAssetGradient raw Returns Type Description T Type Parameters Name Description T S"
  },
  "api/IVLab.ABREngine.VisAssetLoader.html": {
    "href": "api/IVLab.ABREngine.VisAssetLoader.html",
    "title": "Class VisAssetLoader | ABREngine",
    "keywords": "Class VisAssetLoader Use a particular fetcher to try and get the VisAsset from its source, and construct the requisite Unity objects and IVisAsset to add. Inheritance Object VisAssetLoader Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class VisAssetLoader Constructors VisAssetLoader() Declaration public VisAssetLoader() Methods LoadVisAsset(Guid) Declaration public async Task<IVisAsset> LoadVisAsset(Guid uuid) Parameters Type Name Description Guid uuid Returns Type Description Task < IVisAsset > LoadVisAsset(Guid, IVisAssetFetcher) Declaration public async Task<IVisAsset> LoadVisAsset(Guid uuid, IVisAssetFetcher _fetcher) Parameters Type Name Description Guid uuid IVisAssetFetcher _fetcher Returns Type Description Task < IVisAsset >"
  },
  "api/IVLab.ABREngine.VisAssetManager.html": {
    "href": "api/IVLab.ABREngine.VisAssetManager.html",
    "title": "Class VisAssetManager | ABREngine",
    "keywords": "Class VisAssetManager The VisAssetManager is where all VisAssets are stored within the ABREngine. VisAssets can be loaded and fetched from various sources defined in VisAssetFetchers . Inheritance Object VisAssetManager Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class VisAssetManager Examples VisAssets can be loaded manually - be mindful of async programming: // Initialize the ABR Engine await ABREngine.GetInstance().WaitUntilInitialized(); Guid cmapUuid = new Guid(\"66b3cde4-034d-11eb-a7e6-005056bae6d8\"); // Load a VisAsset (must be done in Main Thread!) ColormapVisAsset cmap = null; await UnityThreadScheduler.Instance.RunMainThreadWork(async () => { cmap = await ABREngine.Instance.VisAssets.LoadVisAsset(cmapUuid) as ColormapVisAsset; }); Constructors VisAssetManager(String) Declaration public VisAssetManager(string visassetPath) Parameters Type Name Description String visassetPath Fields appDataPath Declaration public string appDataPath Field Value Type Description String VISASSET_JSON Declaration public const string VISASSET_JSON = \"artifact.json\" Field Value Type Description String Properties LocalVisAssets Any (custom) visassets that are solely described inside the state and do not exist on disk or on a server somewhere. Declaration public JObject LocalVisAssets { get; set; } Property Value Type Description JObject VisAssetGradients Any VisAsset gradients that are contained within the state (updated directly from state) Declaration public Dictionary<string, RawVisAssetGradient> VisAssetGradients { get; set; } Property Value Type Description Dictionary < String , RawVisAssetGradient > Methods GetDefault<T>() Obtain the default visasset for a particular type, if there is one. Declaration public IVisAsset GetDefault<T>() where T : IVisAsset Returns Type Description IVisAsset Type Parameters Name Description T GetVisAssets() Get the UUIDs of every VisAsset that's been imported into ABR Declaration public List<Guid> GetVisAssets() Returns Type Description List < Guid > LoadVisAsset(Guid, Boolean) Load a particular VisAsset described by its UUID. VisAssets will automatically be loaded from any of the following places: The state itself ( localVisAssets ) The media directory on the machine ABR is running on Any Resources folder (in Assets or in any Package) A VisAsset server Declaration public async Task<IVisAsset> LoadVisAsset(Guid visAssetUUID, bool replaceExisting = false) Parameters Type Name Description Guid visAssetUUID Boolean replaceExisting Returns Type Description Task < IVisAsset > Returns the IVisAsset that was loaded, or null if the VisAsset was not found. LoadVisAssetPalette() Load all VisAssets located in the Media directory into memory. Declaration [Obsolete(\"LoadVisAssetPalette is obsolete because it only takes into consideration VisAssets in the media directory\")] public async Task LoadVisAssetPalette() Returns Type Description Task TryGetVisAsset(Guid, out IVisAsset) Attempt to retrieve a VisAsset. Declaration public bool TryGetVisAsset(Guid guid, out IVisAsset visAsset) Parameters Type Name Description Guid guid IVisAsset visAsset Returns Type Description Boolean Returns true if the VisAsset is currently loaded into the memory. UnloadVisAsset(Guid) Unload a particular VisAsset described by its UUID. Declaration public void UnloadVisAsset(Guid visAssetUUID) Parameters Type Name Description Guid visAssetUUID"
  },
  "api/IVLab.ABREngine.VolumeKeyData.html": {
    "href": "api/IVLab.ABREngine.VolumeKeyData.html",
    "title": "Class VolumeKeyData | ABREngine",
    "keywords": "Class VolumeKeyData Inheritance Object KeyData VolumeKeyData Implements IHasDataset IKeyData IABRInput Inherited Members KeyData.Genre KeyData.Path KeyData.GetDataset() KeyData.GetRawABRInput() Namespace : IVLab.ABREngine Assembly : cs.temp.dll.dll Syntax public class VolumeKeyData : KeyData, IHasDataset, IKeyData, IABRInput Constructors VolumeKeyData(String) Declaration public VolumeKeyData(string path) Parameters Type Name Description String path Implements IHasDataset IKeyData IABRInput"
  },
  "index.html": {
    "href": "index.html",
    "title": "Artifact-Based Rendering Engine | ABREngine",
    "keywords": "Artifact-Based Rendering Engine Introduction Here for the ABREngine examples and C# documentation? Head over to the ABREngine Docs page. A good place to start is the ABREngine Class . We introduce Artifact-Based Rendering (ABR), a framework of tools, algorithms, and processes that makes it possible to produce real, data-driven 3D scientific visualizations with a visual language derived entirely from colors, lines, textures, and forms created using traditional physical media or found in nature. A theory and process for ABR is presented to address three current needs: (i) designing better visualizations by making it possible for non-programmers to rapidly design and critique many alternative data-to-visual mappings; (ii) expanding the visual vocabulary used in scientific visualizations to depict increasingly complex multivariate data; (iii) bringing a more engaging, natural, and human-relatable handcrafted aesthetic to data visualization. New tools and algorithms to support ABR include front-end applets for constructing artifact-based colormaps, optimizing 3D scanned meshes for use in data visualization, and synthesizing textures from artifacts. These are complemented by an interactive rendering engine with custom algorithms and interfaces that demonstrate multiple new visual styles for depicting point, line, surface, and volume data. A within-the-research-team design study provides early evidence of the shift in visualization design processes that ABR is believed to enable when compared to traditional scientific visualization systems. Qualitative user feedback on applications to climate science and brain imaging support the utility of ABR for scientific discovery and public communication. This Unity package provides features and functionality for the Artifact-Based Rendering technique, as described by the paper from VIS 2019 . Installation Install via the Unity Package Manager (UPM). In Unity, go to Window > Package Manager > + > git package and paste the following URL (install dependencies first, see below): ssh://git@github.umn.edu/ivlab-cs/ABREngine-UnityPackage.git#[current version] # For example: ssh://git@github.umn.edu/ivlab-cs/ABREngine-UnityPackage.git#v0.2.1 Dependencies NOTE: Currently in Unity, these need to be manually installed. Go to Window > Package Manager > + > git package... and paste each of these URLs before you paste the ABREngine's URL. ssh://git@github.umn.edu/ivlab-cs/JsonSchema-UnityPackage.git ssh://git@github.umn.edu/ivlab-cs/OBJImport-UnityPackage.git ssh://git@github.umn.edu/ivlab-cs/JsonDiffPatch-UnityPackage.git ssh://git@github.umn.edu/ivlab-cs/IVLab-Utilities-UnityPackage.git Quick Start for Developers Using the ABREngine Step 1: Install the package using UPM as described above. Step 2: Drag and drop the ABREngine prefab into your scene. In the Project *tab, search In Packages for \"ABREngine\". Step 3: Edit your ABR Configuration. Please see ABR *Configuration for more details. Quick Start for Contributing to / Editing the ABREngine Step 1: Clone the ABREngine-UnityPackage git repository into the Packages *folder of your Unity project. Step 2: Same as above Step 2 Step 3: Same as above Step 3 Step 4: Make your changes on a branch, and make a pull request. See *CONTRIBUTING.md in the ABREngine-UnityPackage repository for more information."
  }
}